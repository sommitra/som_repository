*&---------------------------------------------------------------------*
*& This program is a copy of /OPT/COA_UPLOAD_REPORT with
*& custom changes for Application server(AL11)
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*& Report  To upload COA details from file to COA tables
*&---------------------------------------------------------------------*
INCLUDE zvim_bl_apprbaselinetop.
*INCLUDE /opt/bl_apprbaselinetop.
INCLUDE zvim_coa_uplcfg_reporttop.
*INCLUDE /opt/coa_uplcfg_reporttop.
INCLUDE zvim_bl_apprbaselinecl1.
*INCLUDE /opt/bl_apprbaselinecl1.
INCLUDE zvim_bl_apprbaselineo01.
*INCLUDE /opt/bl_apprbaselineo01.
INCLUDE zvim_bl_apprbaselinei01.
*INCLUDE /opt/bl_apprbaselinei01.
INCLUDE zvim_bl_apprbaselinef01.
*INCLUDE /opt/bl_apprbaselinef01.
INCLUDE zvim_coa_uplcfg_reportf01.
*INCLUDE /opt/coa_uplcfg_reportf01.
*--------------------------------------------------------------------*
*            Start-of-Selection                                      *
*--------------------------------------------------------------------*
START-OF-SELECTION.
* To initialize the values.
  PERFORM initialization USING gv_subrc.
  CHECK gv_subrc IS INITIAL.
* To upload the file into internal table
  PERFORM upload_data_file.
* To download the file from internal table
  PERFORM download_data_file.
* To dispaly output with successful & unsuccessful Records
  PERFORM display_output.
  
  
  *******************************************************************************************************************
  
  
  <<<<<< ZVIM_BL_APPRBASELINETOP >>>>>>>>
  
  *&---------------------------------------------------------------------*
*& Report  /OPT/BL_APPRBASELINE
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  /opt/bl_apprbaseline MESSAGE-ID /opt/vim_701.

TYPE-POOLS icon.
TYPE-POOLS : sx.                                            "VIMI-21108

TABLES: /ors/user_prefer,
       /opt/afs_coder.                                      "vimi-9049
* begin VIMI-11431

*DEFINE create_itab.
*  data &1 type standard table of &2 with header line.
*END-OF-DEFINITION.
* end VIMI-11431
DEFINE lock_table.
  call function 'ENQUEUE_E_TABLEE'
    exporting
      tabname        = &1
      varkey         = gv_varkey                            "VIMI-8319
      _scope         = 1                                    "I-VIMI-13918
    exceptions
      foreign_lock   = 1
      system_failure = 2
      others         = 3.
  if sy-subrc <> 0.
    message id sy-msgid type 'I' number sy-msgno
            with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    g_edit = space.
    exit.
  endif.
END-OF-DEFINITION.

TYPES: item_table_type TYPE STANDARD TABLE OF mtreeitm
       WITH DEFAULT KEY.
TYPES: BEGIN OF ty_ss,
          prog TYPE d020s-prog,
          dynr TYPE d020s-dnum,
       END OF ty_ss.
* Start of ins VIMI-7380
TYPES: BEGIN OF ty_level.
        INCLUDE STRUCTURE /opt/appr_limit.
TYPES: btext TYPE /opt/bulk_appr_text_de,
       descr TYPE text50,
       extxt TYPE char80,
       celltab TYPE lvc_t_styl,
       END OF ty_level.

TYPES: BEGIN OF ty_ncoa.
TYPES:        line_no TYPE i.                               "VIMI-16148
        INCLUDE STRUCTURE /opt/appr_coa.
TYPES:  descr TYPE text50,
        celltab TYPE lvc_t_styl,
       END OF ty_ncoa.
* End of ins VIMI-7380
DATA : g_okcode      TYPE syucomm.
DATA : g_okcode_save TYPE syucomm.
DATA : g_coa_okcode  TYPE syucomm. " VIMI-9049.
DATA : g_subrc       TYPE sysubrc.
DATA : g_tempumid    TYPE /ors/umoid VALUE '&'.
DATA : g_answer      TYPE char1.
DATA : g_changed     TYPE flag.
DATA : g_edit        TYPE flag.
DATA : g_tabix       TYPE sytabix.
DATA : g_view        TYPE ty_ss.
DATA : g_sview       TYPE ty_ss.                            "VIMI-9049
DATA : node_table    TYPE treev_ntab.
DATA : item_table    TYPE item_table_type.
DATA : v_create_200_flag.
DATA : v_change_200_flag.
DATA : v_answer_p TYPE char1.
DATA : v_mode TYPE flag.
DATA:  gv_index       TYPE sy-tabix.
* Controls
CONTROLS:
       ts_umdata   TYPE TABSTRIP,
       ts_coaview_det1 TYPE TABSTRIP.                       "VIMI-9049
* Constants
* Function Codes
CONSTANTS:
      c_fcancel    TYPE ui_func VALUE 'CANC',
      c_fsave      TYPE ui_func VALUE 'SAVE',
      c_fdich      TYPE ui_func VALUE 'DICH',
* BEGIN of VIM 5.2 SP5 - VIMI-3677 - CNICKLAS
      c_faend      TYPE ui_func VALUE 'AEND',
* ENDof VIM 5.2 SP5 - VIMI-3677 - CNICKLAS
      c_fexpand    TYPE ui_func VALUE 'EXPAND',
      c_fcollapse  TYPE ui_func VALUE 'COLLAPSE',
      c_flistbox   TYPE ui_func VALUE 'FC_LB',
      c_fconfig    TYPE ui_func VALUE 'XCONFIG',
      c_fumview    TYPE ui_func VALUE 'UMVIEW',
      c_fcoaview   TYPE ui_func VALUE 'COAVIEW',
      c_fcodcoa    TYPE ui_func VALUE 'COACRVIEW',          "VIMI-9049
      c_fapprcoa   TYPE ui_func VALUE 'COAAPRVIEW',         "VIMI-9049
      c_fcoderview TYPE ui_func VALUE 'CODERVIEW',
      c_freportview TYPE ui_func VALUE 'RPTAUTH',
      c_fabout     TYPE ui_func VALUE '/OPT/ABOUT',
      c_fdocu      TYPE ui_func VALUE '/OPT/DOCU',
      c_fokay      TYPE ui_func VALUE 'OKAY',
      c_applevel   TYPE ui_func VALUE 'APRLIMIT'.           "VIMI-7380
** Begin of VIMI-9049
*      c_utabview   type char20  VALUE 'USER DETAILS TAB',
*      c_ltabview   type char20  VALUE 'APPROVAL LEVEL TAB',
*      c_cstabview   type char20  VALUE 'CODER SETTINGS TAB',
*      c_ccoatabview   type char23  VALUE 'CODER-REQUESTER COA TAB',
*      c_acoatabview   type char20  VALUE 'APPROVER COA TAB'.
** End of VIMI-9049

* Nodes
CONSTANTS:
      c_nheader   TYPE seu_type VALUE 'HEAD',
      c_nuserid   TYPE seu_type VALUE 'UMID',
      c_ncoadata  TYPE seu_type VALUE 'COAD',
      c_numdata   TYPE seu_type VALUE 'UMDA'.

* begin VIMI-11431
*create_itab:
*       gt_coa     /opt/bl_appcoa,
*       gt_coan    /opt/bl_appcoa,
*       gt_coder   /opt/bl_ap_coder,
*       gt_codern  /opt/bl_ap_coder,
*       gt_401     /opt/bl_t401,
*       gt_402     /opt/bl_t402,
*       gt_nodes   snodetext,
*       gt_ncoa1    ty_ncoa,                                 "VIMI-7380
*       gt_ncoa2    ty_ncoa,                                 "VIMI-9049
*       gt_ncoa3    ty_ncoa,                                 "VIMI-9049
*       gt_ncoa    /opt/appr_coa,                            "VIMI-7380
*       gt_level1  ty_level,                                 "VIMI-7380
*       gt_level   /opt/appr_limit,                          "VIMI-7380
*       gt_level_old /opt/appr_limit,                        "VIMI-7380
*       gt_ncoa_old  /opt/appr_coa,                          "VIMI-9049
*       gt_coder_lba  /opt/afs_coder.                        "VIMI-9049
* end VIMI-11431
DATA:
       gt_coa      TYPE STANDARD TABLE OF /opt/bl_appcoa  WITH HEADER LINE,
       gt_coan     TYPE STANDARD TABLE OF /opt/bl_appcoa  WITH HEADER LINE,
       gt_coder    TYPE STANDARD TABLE OF /opt/bl_ap_coder  WITH HEADER LINE,
       gt_codern   TYPE STANDARD TABLE OF  /opt/bl_ap_coder  WITH HEADER LINE,
       gt_401      TYPE STANDARD TABLE OF /opt/bl_t401  WITH HEADER LINE,
       gt_402      TYPE STANDARD TABLE OF /opt/bl_t402  WITH HEADER LINE,
       gt_nodes    TYPE STANDARD TABLE OF snodetext  WITH HEADER LINE,
       gt_ncoa1    TYPE STANDARD TABLE OF ty_ncoa  WITH HEADER LINE, "VIMI-7380
       gt_ncoa2    TYPE STANDARD TABLE OF ty_ncoa  WITH HEADER LINE, "VIMI-9049
       gt_ncoa3    TYPE STANDARD TABLE OF ty_ncoa  WITH HEADER LINE, "VIMI-9049
       gt_ncoa     TYPE STANDARD TABLE OF /opt/appr_coa  WITH HEADER LINE, "VIMI-7380
       gt_level1   TYPE STANDARD TABLE OF ty_level  WITH HEADER LINE, "VIMI-7380
       gt_level    TYPE STANDARD TABLE OF /opt/appr_limit  WITH HEADER LINE, "VIMI-7380
       gt_level_old  TYPE STANDARD TABLE OF /opt/appr_limit  WITH HEADER LINE, "VIMI-7380
       gt_ncoa_old   TYPE STANDARD TABLE OF /opt/appr_coa  WITH HEADER LINE, "VIMI-9049
       gt_coder_lba  TYPE STANDARD TABLE OF  /opt/afs_coder  WITH HEADER LINE. "VIMI-9049

* Begin of VIMI-23560/AMANGAPA
DATA : gt_usermap_old TYPE TABLE OF /ors/usermap,
       gt_sapuser     TYPE TABLE OF /ors/usermap,
       gt_coa_old     TYPE TABLE OF /opt/bl_appcoa,
       gt_401_old     TYPE TABLE OF /opt/bl_t401,
       gt_bukrs       TYPE RANGE OF bukrs,
       gv_changedoc_coder TYPE c.
* End of VIMI-23560/AMANGAPA

DATA gt_usermap_new TYPE TABLE OF /ors/usermap.      "VIMI-24393/AMANGAPA
* Special Usermap Structure
DATA : BEGIN OF gt_usermap OCCURS 0.
* Begin of VIM 6.0 - VIMI-2215
*        INCLUDE STRUCTURE /ors/usermap.
        INCLUDE STRUCTURE /opt/bl_usermap_st.
* End of VIM 6.0 - VIMI-2215
DATA :     manager_id TYPE /ors/umoid,
       END OF gt_usermap.
DATA: s_userprefer TYPE /ors/user_prefer.

* begin VIMI-7280

TYPES:
  ty_usermap_line LIKE LINE OF gt_usermap.

DATA:
  gt_usermap_filtered TYPE STANDARD TABLE OF ty_usermap_line
                           WITH HEADER LINE,
  gt_coa_filtered   TYPE STANDARD TABLE OF /opt/bl_appcoa,
  gt_coder_filtered TYPE STANDARD TABLE OF /opt/bl_ap_coder,
  gt_ncoa_filtered  TYPE STANDARD TABLE OF ty_ncoa          "VIMI-8064
                           WITH HEADER LINE,                "VIMI-8064
  gt_level_filtered TYPE STANDARD TABLE OF ty_level         "VIMI-8064
                           WITH HEADER LINE,                "VIMI-8064
  gt_lcoder_filtered TYPE STANDARD TABLE OF /opt/afs_coder  "VIMI-8064
                           WITH HEADER LINE.                "VIMI-8064
* end VIMI-7280

* Begin of insert VIMI-15934
DATA:
  gt_usermap_unfiltered TYPE STANDARD TABLE OF ty_usermap_line
                           WITH HEADER LINE.
* End of insert VIMI-15934
****Begin of Changes 560/3.
TYPES : BEGIN OF ty_usermap,
            opt_userid TYPE /ors/usermap-opt_userid,
        END OF ty_usermap.
DATA  : tb_usermap TYPE STANDARD TABLE OF ty_usermap.
DATA  : wa_usermap TYPE ty_usermap.
****End of Changes 560/3
* Classes
CLASS: lcl_event_grid DEFINITION DEFERRED.
CLASS: lcl_alv_helper DEFINITION DEFERRED.

DATA : g_cgrid    TYPE REF TO cl_gui_custom_container.
DATA : g_grid     TYPE REF TO cl_gui_alv_grid.
DATA : g_evt_grid TYPE REF TO lcl_event_grid.
DATA : g_helper   TYPE REF TO lcl_alv_helper.
*DATA : g_sub_help TYPE REF TO lcl_alv_helper.               " VIMI-9049 "VIMI-23560/AMANGAPA
DATA : g_protocol TYPE REF TO cl_alv_changed_data_protocol.

DATA : g_cgridnew TYPE REF TO cl_gui_custom_container.
DATA : g_gridnew  TYPE REF TO cl_gui_alv_grid.
DATA : g_evt_new  TYPE REF TO lcl_event_grid.

DATA: g_constant TYPE /ptgwfi/value.
* Selection screen
PARAMETERS pdisplay TYPE flag NO-DISPLAY DEFAULT 'X'.

*-- Begin of VIM 6.0 - VIMI-2215
TYPES: BEGIN OF ty_auth.
        INCLUDE STRUCTURE /opt/bl_rpt_auth.
TYPES:  field_style  TYPE lvc_t_styl,
       END OF ty_auth.

DATA: gt_values_b TYPE TABLE OF dd07v INITIAL SIZE 0,
      gs_values_b TYPE dd07v,
      gt_auth TYPE TABLE OF ty_auth INITIAL SIZE 0,
      gt_authn TYPE TABLE OF /opt/bl_rpt_auth INITIAL SIZE 0,
      gs_auth TYPE ty_auth,
      gs_authn TYPE /opt/bl_rpt_auth,
      gv_datachanged_a TYPE char1,
      gt_rowid     TYPE TABLE OF lvc_s_modi,
      gt_values TYPE TABLE OF dd07v INITIAL SIZE 0,
      gt_extype TYPE TABLE OF /ors/expense_dec,             "VIMI-9049
      gt_lvltxt TYPE TABLE OF /opt/at_levelt,               "VIMI-9049
      gs_lvltxt TYPE /opt/at_levelt,                        "VIMI-9049
      gs_extype TYPE /ors/expense_dec,                      "VIMI-9049
      gv_afs_id_save TYPE /opt/a_afs_id_de,                 "VIMI-11026
      g_afs_desc TYPE char50,
      gs_values TYPE dd07v,
      gt_values_h TYPE TABLE OF dd07v INITIAL SIZE 0,
      gs_values_h TYPE dd07v,
      gv_bobj_display TYPE char1,
      gt_fcat TYPE lvc_t_fcat,                              "VIMI-7380
      gt_nfcat TYPE lvc_t_fcat,                             "VIMI-9049
      g_tab_desc TYPE char30,                               "VIMI-9049
      g_tabname  TYPE char20,                               "VIMI-9049
      gv_rowid TYPE i.                                      "VIMI-9049
*-- End of VIM 6.0 - VIMI-2215

* Begin of VIMI-8319 - rosterma
DATA: gv_varkey TYPE rstable-varkey.
gv_varkey = sy-mandt.
* End of VIMI-8319 - rosterma
****VIMI-10151******

TYPES : BEGIN OF ty_error_text.
        INCLUDE STRUCTURE /opt/appr_limit.
TYPES:  userid TYPE /ors/usermap-opt_userid,
        tab(3) TYPE c,
*        message(80) TYPE c,      "VIMI-16216
        message(120) TYPE c,                                "VIMI-16216
       END OF ty_error_text.

DATA : ls_error_mgs TYPE  ty_error_text,
       lt_error_mgs TYPE STANDARD TABLE OF ty_error_text.

* begin of VIMI-10151.
DATA : lv_opt_userid TYPE /ors/umoid,
       lv_index TYPE sy-tabix,
       l_text(100) TYPE c,
       l_tab(3) TYPE c.
* End of VIMI-10151
***********VIMI-10151**************************
DATA:  gv_fmode      TYPE char1.                            "VIMI-10153

* Begin of VIMI-16201

TYPES: BEGIN OF ts_authorized_cc,
          bukrs TYPE bukrs,
       END OF ts_authorized_cc.
DATA: gt_authorized_cc TYPE TABLE OF ts_authorized_cc.
DATA: gv_simple_mode TYPE c.
* End of VIMI-16201

DATA: gv_line_validity TYPE abap_bool.                      "VIMI-16229

DATA: gt_filter TYPE lvc_t_filt.                            "VIMI-16582

* Begin of VIMI-16997/STAMADA
TYPES : BEGIN OF gt_usr02,
         bname        TYPE xubname,
         class        TYPE xuclass,
        END OF gt_usr02.
TYPES : BEGIN OF gt_bname,
        bname         TYPE xubname,
        END OF gt_bname.
DATA: git_usr02       TYPE TABLE OF gt_usr02,
      gwa_usr02       TYPE gt_usr02,
      git_bname       TYPE TABLE OF gt_bname,
      gwa_bname       TYPE gt_bname,
      git_expense_typ TYPE TABLE OF /ors/expense_typ,
      gwa_expense_typ TYPE /ors/expense_typ,
      git_t001        TYPE TABLE OF t001,
      gwa_t001        TYPE t001.
* End of VIMI-16997/STAMADA
DATA : gt_usermap_coa     TYPE TABLE OF /ors/usermap.  "VIMI-18097/snittala

* Begin I-VIMI-17454
DATA:
  gt_ncoa_mod_rec TYPE STANDARD TABLE OF /opt/appr_coa  WITH HEADER LINE,
  gt_ncoa_del_rec TYPE STANDARD TABLE OF /opt/appr_coa  WITH HEADER LINE.
* End I-VIMI-17454

DATA: gv_skip_change_docs TYPE abap_bool.                   "VIMI-17623
DATA : lv_show_warn TYPE /ptgwfi/z_const-zvalue.   "VIMI-18019/snittala
DATA: lv_default_lang TYPE /ors/user_prefer-default_language. "INSERT VIMI-19145:ASUTHARA
*  Begin of insert VIMI-19275
DATA: lv_default_coder    TYPE /ors/user_prefer-default_coder,
      lv_inv_per_page     TYPE /ors/user_prefer-inv_per_page,
      lv_date_format      TYPE /ors/user_prefer-date_format,
      lv_decimal_notation TYPE /ors/user_prefer-decimal_notation,
      lv_default_currency TYPE /ors/user_prefer-default_currency,
      lv_image_display    TYPE /ors/user_prefer-image_display,
      lv_show_history     TYPE /ors/user_prefer-show_history,
      lv_show_detail      TYPE /ors/user_prefer-show_detail,
      lv_show_attachment  TYPE /ors/user_prefer-show_attachment,
      lv_show_refered     TYPE /ors/user_prefer-show_refered, " show pending checkbox
      lv_sid              TYPE /ors/user_prefer-sid, "logical system
      lv_tzone            TYPE /ors/user_prefer-tzone,
      lv_max_recent_list  TYPE /ors/user_prefer-max_recent_list.
*  End of insert VIMI-19275

* Begin of VIMI-21108
DATA: gt_msg_tab TYPE TABLE OF bal_s_msg,
      gs_msg_tab TYPE bal_s_msg.
* End of VIMI-21108

* Begin of VIMI-22104
DATA: gv_changedoc_usermap TYPE c,
      gv_changedoc_applimit TYPE c,
      gv_changedoc_coa TYPE c.
* End of VIMI-22104

DATA : gv_fmodelog TYPE /ptgwfi/z_const-zvalue.             "VIMI-19181


***************************************************************************************************************************************************

<<<<< ZVIM_COA_UPLCFG_REPORTTOP >>>>>>>


*&---------------------------------------------------------------------*
*&  Include           /OPT/COA_UPLCFG_REPORTTOP
*&---------------------------------------------------------------------*
TYPE-POOLS: truxs ,slis.
TABLES : /ors/usermap ,/opt/appr_coa,/opt/appr_limit.
*--------------------------------------------------------------------*
*         Data declaration.
*--------------------------------------------------------------------*
CONSTANTS cv_allowed_filename TYPE filename-fileintern VALUE '/OPT/COA_FILE%'. "VIMI-18205
CONSTANTS cv_allowed_filename_cond TYPE filename-fileintern VALUE '/OPT/COA_FILE*'. "VIMI-18205

* Begin of VIMI-18097
TYPES : BEGIN OF lt_app_coa,
        comp_code type bukrs,
        appr_level type /OPT/A_APPR_LEVEL_DE,
        opt_userid type /ors/umoid,
        END OF lt_app_coa.

DATA : it_appr_coa TYPE TABLE OF lt_app_coa.
DATA : wa_appr_coa TYPE lt_app_coa.

* End of VIMI-18097

DATA : gs_usermap_coa     TYPE /ors/usermap,
*       gt_usermap_coa     TYPE TABLE OF /ors/usermap,  "VIMI-18097/snittala

       gs_usermap2_coa     TYPE /ors/usermap,
       gt_usermap2_coa     TYPE TABLE OF /ors/usermap,

       gs_app_coa     TYPE /opt/appr_coa,
       gt_appr_coa    TYPE TABLE OF /opt/appr_coa,

       gs_app_coa2     TYPE /opt/appr_coa,
       gt_appr_coa2    TYPE TABLE OF /opt/appr_coa,

       gs_coa_upload  TYPE /opt/coa_uplcfg,
       gt_coa_upload  TYPE TABLE OF /opt/coa_uplcfg,

       gs_app_limit   TYPE /opt/appr_limit,
       gt_appr_limit  TYPE TABLE OF /opt/appr_limit,

       gs_app_limit2   TYPE /opt/appr_limit,
       gt_appr_limit2  TYPE TABLE OF /opt/appr_limit,

       gt_usermap1_coa    LIKE gt_usermap_coa,
       gs_usermap1_coa    TYPE /ors/usermap,

       gt_appr_coa1   TYPE TABLE OF /opt/appr_coa,
       gs_appr_coa1   TYPE /opt/appr_coa,

       gt_appr_limit1 TYPE TABLE OF /opt/appr_limit,
       gs_appr_limit1  TYPE /opt/appr_limit,

       dtab           LIKE dfies OCCURS 0 WITH HEADER LINE ,
       i_tab_raw_data TYPE  truxs_t_text_data,

        p_file1      TYPE string ,
        c_fnh_mask   TYPE dxfields-filemask ,
        search_dir   TYPE dxfields-longpath,
        file_path    LIKE dxfields-longpath,
        directory    TYPE string,
        filetable    TYPE filetable,
        line         TYPE LINE OF filetable,
        rc           TYPE i,
        t_newtable   TYPE REF TO data,
        t_newline    TYPE REF TO data,
        t_fldcat1    TYPE lvc_t_fcat,
        wa_it_fldcat TYPE lvc_s_fcat,
        text(80)     TYPE c,
        gv_usrtab    TYPE i,
        gv_coatab    TYPE i,
        gv_leveltab  TYPE i,
        gv_nusr      TYPE i,
        gv_ncoa      TYPE i,
        gv_coa_act   TYPE i,    "VIMI-18139/snittala
        gv_apprlmt_act TYPE i,  "VIMI-18191/snittala
        gv_napl      TYPE i,
        lv_usermap   TYPE ty_usermap_line,
        lv_coa       TYPE /opt/bl_appcoa,
        lv_group     TYPE xuclass,
        lv_actvt     TYPE activ_auth,
        fm_exit      TYPE /opt/ii_value_de,
        g_success    TYPE c,
        lv_failed    TYPE i,
        gv_param_name TYPE /ptgwfi/const,
        gv_subrc      TYPE sy-subrc.

* Begin of insert VIMI-16538
TYPES: BEGIN OF coa_fields,
       mandt TYPE mandt,
       comp_code TYPE bukrs,
       appr_level TYPE /opt/a_appr_level_de,
       opt_userid TYPE /ors/umoid,
       otype TYPE otype,
       actorid TYPE actorid,
       counter TYPE /opt/counter,
       msg TYPE text50,
       END OF coa_fields.
DATA: lt_coa_fields TYPE TABLE OF coa_fields.
DATA: ls_coa_fields LIKE LINE OF lt_coa_fields.
TYPES BEGIN OF anyprotocol.
        INCLUDE STRUCTURE ls_coa_fields.
        INCLUDE STRUCTURE /opt/a_coa_fields_st.
TYPES END OF anyprotocol.
DATA: gt_appr_coa_protocol TYPE TABLE OF anyprotocol.
DATA: gs_appr_coa_protocol LIKE LINE OF gt_appr_coa_protocol.
* End of insert VIMI-16538

* Begin of replace VIMI-16538
* begin of VIMI-16273
*DATA:  gt_appr_coa_del LIKE gt_appr_coa,
*       gt_appr_coa_nodel LIKE gt_appr_coa,
DATA:  gt_appr_coa_del LIKE gt_appr_coa_protocol,
       gt_appr_coa_nodel LIKE gt_appr_coa_protocol,
* End of replace VIMI-16538
       gv_marked_for_deletion TYPE i,
       gv_actually_deleted TYPE i,
       gv_deletion_failed TYPE abap_bool.
* end of VIMI-16273

* Begin of VIMI-16299
DATA: lv_filepath TYPE filename-fileintern.
TYPES: BEGIN OF anyfile,
         filename TYPE localfile,
       END OF anyfile.
DATA: gt_file TYPE TABLE OF anyfile.
DATA: gs_file LIKE LINE OF gt_file.
* End of VIMI-16299

* Begin of replace VIMI-16538
*DATA: gt_appr_coa_conv_error LIKE gt_appr_coa.              "VIMI-16244
*DATA: gt_appr_coa_duplicate LIKE gt_appr_coa.               "VIMI-16327
DATA: gt_appr_coa_conv_error LIKE gt_appr_coa_protocol.     "VIMI-16244
DATA: gt_appr_coa_duplicate LIKE gt_appr_coa_protocol.      "VIMI-16327
DATA: gt_appr_coa_val_error LIKE gt_appr_coa_protocol.      "VIMI-16538
* End of replace VIMI-16538


*--------------------------------------------------------------------*
*                 field symbols
*--------------------------------------------------------------------*
FIELD-SYMBOLS: <t_dyntable> TYPE STANDARD TABLE,
              <fs_dyntable> ,
              <fs_fldval> TYPE ANY.
*--------------------------------------------------------------------*
*                Constants
*--------------------------------------------------------------------*
CONSTANTS : c_usr(3) TYPE c VALUE 'USR',
            c_coa(3) TYPE c VALUE 'COA',
            c_apl(3) TYPE c VALUE 'APL',
            c_space  TYPE c VALUE ' '.

*--------------------------------------------------------------------*
*                Selection Screen
*--------------------------------------------------------------------*
SELECTION-SCREEN BEGIN OF BLOCK f1 WITH FRAME TITLE text-001.
PARAMETERS : p_dmode RADIOBUTTON GROUP  rad1 DEFAULT 'X' MODIF ID aaa,
* Begin of Replace VIMI-16538
*             p_fmode RADIOBUTTON GROUP rad1 MODIF ID aaa.
             p_fmode RADIOBUTTON GROUP rad1 MODIF ID aaa,
*             p_tmode TYPE char1 AS CHECKBOX DEFAULT 'X' MODIF ID aaa. "VIMI-16813
             p_tmode TYPE char1 AS CHECKBOX MODIF ID aaa.              "VIMI-16813
* End of Replace VIMI-16538
SELECTION-SCREEN END OF BLOCK f1.

* Begin of VIMI-16125
SELECTION-SCREEN BEGIN OF BLOCK f2 WITH FRAME TITLE text-002.
PARAMETERS : p_ps RADIOBUTTON GROUP rad2 DEFAULT 'X' USER-COMMAND u,
             p_file TYPE rlgrap-filename,
* Begin of VIMI-16299 Replace
             p_as RADIOBUTTON GROUP rad2,
             p_path TYPE filename-fileintern LOWER CASE.
*             p_as RADIOBUTTON GROUP rad2.
*SELECT-OPTIONS: p_path FOR lv_filepath NO INTERVALS.
* End of VIMI-16299
SELECTION-SCREEN END OF BLOCK f2 .

SELECTION-SCREEN BEGIN OF BLOCK f3 WITH FRAME TITLE text-003.
PARAMETERS : p_upload RADIOBUTTON GROUP rad3 DEFAULT 'X' USER-COMMAND u,
             p_dwload RADIOBUTTON GROUP rad3.
*PARAMETERS:  p_file TYPE rlgrap-filename OBLIGATORY.
SELECTION-SCREEN END OF BLOCK f3.
* End of VIMI-16125

* Begin of VIMI-16224
SELECTION-SCREEN BEGIN OF BLOCK f4 WITH FRAME TITLE text-017.
PARAMETERS : p_dcc TYPE char1 AS CHECKBOX DEFAULT 'X' USER-COMMAND u  MODIF ID ddd.
SELECTION-SCREEN END OF BLOCK f4 .
* End of VIMI-16224

* Begin of VIMI-16244
SELECTION-SCREEN BEGIN OF BLOCK f5 WITH FRAME TITLE text-023.
PARAMETERS : p_conv TYPE char1 AS CHECKBOX DEFAULT 'X' USER-COMMAND u  MODIF ID aaa.
SELECTION-SCREEN END OF BLOCK f5 .
* End of VIMI-16224

** Begin of Insert VIMI-16538
*SELECTION-SCREEN BEGIN OF BLOCK f6 WITH FRAME TITLE text-042.
*PARAMETERS : p_fprot TYPE char1 AS CHECKBOX DEFAULT ''.
*SELECTION-SCREEN END OF BLOCK f6.
** End of Insert VIMI-16538

*----------------------------------------------------------------------*
*      AT SELECTION-SCREEN
*---------------------------------------------------------------------*

AT SELECTION-SCREEN OUTPUT.
  LOOP AT SCREEN.
    IF p_dwload = 'X'.
      IF screen-group1 = 'AAA'.
        screen-input = 0.
        screen-invisible = 1.
        MODIFY SCREEN.
      ENDIF.
      IF screen-group1 = 'BBB'.
        screen-input = 0.
        screen-invisible = 1.
        MODIFY SCREEN.
      ENDIF.
      p_tmode = abap_false.                                 "VIMI-16538
    ELSEIF p_upload = 'X'.
      IF screen-group1 = 'CCC'.
        screen-input = 0.
        screen-invisible = 1.
        MODIFY SCREEN.
      ENDIF.
* Begin of VIMI-16224
      IF screen-group1 = 'DDD'.
        screen-input = 0.
        screen-invisible = 1.
        MODIFY SCREEN.
      ENDIF.
* End of VIMI-16224
* removed in VIMI-16813
*      p_tmode = abap_true.                                  "VIMI-16538
*      p_tmode = abap_false.                                  "VIMI-16768
* end of VIMI-16813
    ENDIF.
  ENDLOOP.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file .
  PERFORM check_file.

* begin of VIMI-18205
AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_path .
  PERFORM check_path.
* end of VIMI-18205

*******************************************************************************************************************


<<<<< ZVIM_BL_APPRBASELINECL1 >>>>>>

*&---------------------------------------------------------------------*
*&  Include           /OPT/BL_APPRBASELINECL1
*&---------------------------------------------------------------------*
*---------------------------------------------------------------------*
*       CLASS LCL_EVENT_GRID DEFINITION
TYPE-POOLS icon.

*---------------------------------------------------------------------*
CLASS lcl_event_grid DEFINITION.
  PUBLIC SECTION.
*    DATA gridname TYPE char10.
    DATA gridname TYPE char15.
    DATA newrows  TYPE char1.
    METHODS:
            handle_toolbar      FOR EVENT toolbar
                                OF cl_gui_alv_grid
                                IMPORTING e_object
                                          e_interactive,
            handle_menu_button  FOR EVENT menu_button
                                OF cl_gui_alv_grid
                                IMPORTING e_object e_ucomm,

            handle_f4           FOR EVENT onf4
                                OF cl_gui_alv_grid
                                IMPORTING e_fieldname
                                          e_fieldvalue
                                          es_row_no
                                          er_event_data
                                          et_bad_cells
                                          e_display,
            handle_user_command FOR EVENT user_command
                                OF cl_gui_alv_grid
                                IMPORTING e_ucomm,
            handle_data_changed FOR EVENT data_changed
                                OF cl_gui_alv_grid
                                IMPORTING er_data_changed
                                          sender
                                          e_onf4,           "VIMI-21473
            data_changed_finished FOR EVENT data_changed_finished
                                OF cl_gui_alv_grid
                                IMPORTING e_modified,
*           begin of VIMI-16480
            handle_after_user_command FOR EVENT after_user_command
                                OF cl_gui_alv_grid
                                IMPORTING e_ucomm e_saved e_not_processed.
*           end of VIMI-16480
ENDCLASS.                    "LCL_EVENT_GRID DEFINITION
*---------------------------------------------------------------------*
*       CLASS LCL_ALV_HELPER DEFINITION
*---------------------------------------------------------------------*
CLASS lcl_alv_helper DEFINITION.
  PUBLIC SECTION.
    DATA g_userid TYPE /ors/usermap-opt_userid.
    METHODS:
            get_fieldcat IMPORTING i_gridname TYPE c
                                   i_newrows  TYPE flag OPTIONAL
                         EXPORTING t_fcat TYPE lvc_t_fcat,
            constructor,
            set_view     IMPORTING i_dynr TYPE d020s-dnum,
            refresh_grid IMPORTING i_grid TYPE REF TO cl_gui_alv_grid.
ENDCLASS.                    "LCL_ALV_HELPER DEFINITION
*---------------------------------------------------------------------*
*       CLASS LCL_EVENT_GRID IMPLEMENTATION
*---------------------------------------------------------------------*
CLASS lcl_event_grid IMPLEMENTATION.
* Set custom toolbar functions
  METHOD handle_toolbar.
    DATA l_button TYPE stb_button.

*   Begin of VIMI-16147/STAMADA
    READ TABLE e_object->mt_toolbar INTO l_button WITH KEY function = '&REFRESH'.
    IF sy-subrc EQ 0.
      l_button-function = 'REFR'.
      MODIFY e_object->mt_toolbar FROM l_button INDEX sy-tabix.
    ENDIF.
*   End of VIMI-16147/STAMADA


    DELETE e_object->mt_toolbar WHERE function EQ '&GRAPH'  OR
                                      function EQ '&INFO'   OR
                                      function EQ '&MB_SUM' OR
                                      function EQ '&CHECK ' OR "5.2 HF1
                                      function EQ '&MB_SUBTOT'.

* Start of VIMI - 9049
    IF sy-repid EQ '/OPT/AR_COA'.
      DELETE e_object->mt_toolbar WHERE function EQ '&MB_VARIANT'.
      DELETE e_object->mt_toolbar WHERE function EQ '&FIND_MORE'.
      DELETE e_object->mt_toolbar WHERE function EQ '&COL0'.
    ENDIF.
* End of VIMI - 9049

    IF g_edit EQ space.
      DELETE e_object->mt_toolbar
             WHERE function EQ '&LOCAL&APPEND'     OR
                   function EQ '&LOCAL&INSERT_ROW' OR
                   function EQ '&LOCAL&DELETE_ROW' OR
                   function EQ '&LOCAL&COPY_ROW'   OR
                   function EQ '&LOCAL&CUT'        OR
                   function EQ '&LOCAL&COPY'       OR
                   function EQ '&LOCAL&PASTE'      OR
                   function EQ '&LOCAL&UNDO'.

      IF me->gridname =  c_fumview .
        l_button-function  = 'SUBS'.
        l_button-icon      = icon_deputy.
        l_button-quickinfo = 'Substitute'(n02).
        l_button-butn_type = 0.
        APPEND l_button TO e_object->mt_toolbar. CLEAR l_button.


        l_button-function  = 'PREF'.
        l_button-icon      = icon_visit.
        l_button-quickinfo = 'User Preferences'(n03).
        l_button-butn_type = 0.
        APPEND l_button TO e_object->mt_toolbar. CLEAR l_button.

* BEGIN of VIM 5.2 SP5 - VIMI-3677 - CNICKLAS
        l_button-function  = 'CHNG_DIS2'.
        l_button-icon      = icon_compare.
        l_button-quickinfo = 'Display changes'(n14).
        l_button-butn_type = 0.
        APPEND l_button TO e_object->mt_toolbar. CLEAR l_button.
* End of VIM 5.2 SP5 - VIMI-3677 - CNICKLAS
      ENDIF.

* BEGIN of VIM 5.2 SP5 - VIMI-3677 - CNICKLAS
* Begin of VIMI-9049
*      IF me->gridname = c_fcoaview.
      IF me->gridname = c_fcoaview OR
         me->gridname = c_fcodcoa  OR
         me->gridname = c_fapprcoa.
* End of VIMI-9049
        l_button-function  = 'CHNG_DIS1'.
        l_button-icon      = icon_compare.
        l_button-quickinfo = 'Display changes'(n14).
        l_button-butn_type = 0.
        APPEND l_button TO e_object->mt_toolbar. CLEAR l_button.
      ENDIF.
* End of VIM 5.2 SP5 - VIMI-3677 - CNICKLAS
* Start of INS VIMI-7380
      IF me->gridname = c_applevel.
        l_button-function  = 'CHNG_DIS3'.
        l_button-icon      = icon_compare.
        l_button-quickinfo = 'Display changes'(n14).
        l_button-butn_type = 0.
        APPEND l_button TO e_object->mt_toolbar. CLEAR l_button.
      ENDIF.
* End of INS VIMI-7380

      EXIT.
    ENDIF.
    l_button-function  = 'MLINE'.
    l_button-icon      = icon_insert_multiple_lines.
    l_button-quickinfo = 'Insert Multiple Rows'(n04).
    l_button-butn_type = 0.
    APPEND l_button TO e_object->mt_toolbar. CLEAR l_button.

* Begin of Naveen
    IF me->gridname =  c_fumview .
      l_button-function  = 'SUBS'.
      l_button-icon      = icon_deputy.
      l_button-quickinfo = 'Substitute'(n02).
      l_button-butn_type = 0.
      APPEND l_button TO e_object->mt_toolbar. CLEAR l_button.


      l_button-function  = 'PREF'.
      l_button-icon      = icon_visit.
      l_button-quickinfo = 'User Preferences'(n03).
      l_button-butn_type = 0.
      APPEND l_button TO e_object->mt_toolbar. CLEAR l_button.

      l_button-function  = 'USER'.
      l_button-icon      = icon_customer.
      l_button-quickinfo = 'Activate/Deactivate'(n05).
      l_button-butn_type = 2.
      l_button-disabled = ' '.
      APPEND l_button TO e_object->mt_toolbar. CLEAR l_button.
    ENDIF.

    CASE me->gridname.
      WHEN c_fumview.
*        OR c_applevel.                                      "VIMI-7380
** Start of VIMI - 9049
*        IF sy-repid EQ '/OPT/AR_COA'.
*          DELETE e_object->mt_toolbar
*                   WHERE function EQ '&LOCAL&APPEND'     OR
*                         function EQ '&LOCAL&COPY_ROW'   OR
*                         function EQ '&LOCAL&CUT'        OR
*                         function EQ '&LOCAL&COPY'       OR
*                         function EQ '&LOCAL&PASTE'      OR
*                         function EQ '&LOCAL&UNDO'.
*        ELSE.
** End of VIMI - 9049
        DELETE e_object->mt_toolbar
                 WHERE function EQ '&LOCAL&APPEND'     OR
                       function EQ '&LOCAL&DELETE_ROW' OR
                       function EQ '&LOCAL&COPY_ROW'   OR
                       function EQ '&LOCAL&CUT'        OR
                       function EQ '&LOCAL&COPY'       OR
                       function EQ '&LOCAL&PASTE'      OR
                       function EQ '&LOCAL&UNDO'.
*        ENDIF.                                              " VIMI-9049

      WHEN c_fcoaview OR c_fcoderview
           OR c_applevel                                    "VIMI-7380
           OR c_fapprcoa
           OR c_fcodcoa.
        IF me->newrows EQ space.
          DELETE e_object->mt_toolbar
                 WHERE function EQ '&LOCAL&APPEND'     OR
*                       function EQ '&LOCAL&INSERT_ROW' OR "VIMI-7380
*                       FUNCTION EQ '&LOCAL&DELETE_ROW' OR
                       function EQ '&LOCAL&COPY_ROW'   OR
                       function EQ '&LOCAL&CUT'        OR
                       function EQ '&LOCAL&COPY'       OR
                       function EQ '&LOCAL&PASTE'      OR
                       function EQ '&LOCAL&UNDO'       OR
                       function EQ 'MLINE'.
* Start of INS VIMI-7380
          IF sy-repid NE '/OPT/AR_COA'.
            DELETE e_object->mt_toolbar
                             WHERE function EQ '&LOCAL&INSERT_ROW'.
* End of INS VIMI-7380
            l_button-function  = 'NEWROW'.
            l_button-icon      = icon_create.
            l_button-quickinfo = 'Create'.                  "#EC NOTEXT
            l_button-butn_type = 0.
            APPEND l_button TO e_object->mt_toolbar. CLEAR l_button.
* Start of INS VIMI-7380
          ELSEIF sy-repid     = '/OPT/AR_COA' AND
                 me->gridname = c_fcoderview.
* Start of INS VIMI-9526
            CLEAR l_button.
            READ TABLE e_object->mt_toolbar INTO l_button WITH KEY function = '&LOCAL&INSERT_ROW'.
            IF sy-subrc = 0.
              l_button-function  = 'NEWROW'.
              MODIFY e_object->mt_toolbar FROM l_button INDEX sy-tabix. CLEAR l_button.
* End of INS VIMI-9526
* Start of DEL VIMI-9526
*              l_button-function  = 'NEWROW'.
*            l_button-icon      = icon_create.
*            l_button-quickinfo = 'Create'.                  "#EC NOTEXT
*              l_button-butn_type = 0.
*              APPEND l_button TO e_object->mt_toolbar. CLEAR l_button.
* End of DEL VIMI-9526
            ENDIF.                                          "VIMI-9526
          ENDIF.
* End of INS VIMI-7380
        ENDIF.
* Begin of VIMI-9049
        IF sy-repid = '/OPT/AR_COA' AND me->gridname = c_fcoderview.
          DELETE e_object->mt_toolbar
                 WHERE function EQ '&LOCAL&APPEND'     OR
                       function EQ '&LOCAL&COPY_ROW'   OR
                       function EQ '&LOCAL&CUT'        OR
                       function EQ '&LOCAL&COPY'       OR
                       function EQ '&LOCAL&PASTE'      OR
                       function EQ '&LOCAL&UNDO'       OR
                       function EQ 'MLINE'.
        ENDIF.
* End of VIMI-9049
*  BEGIN of VIMI-16201
        IF me->gridname = c_fapprcoa OR
           me->gridname = c_fcodcoa.
          IF gv_simple_mode = 'X' AND g_edit = 'X'.
            DELETE e_object->mt_toolbar
                  WHERE function EQ '&LOCAL&DELETE_ROW'.
            l_button-function  = 'DEL_ROW'.
            l_button-icon      = icon_delete_row.
            l_button-quickinfo = 'Delete Row'(n15).
            l_button-butn_type = 0.
            APPEND l_button TO e_object->mt_toolbar. CLEAR l_button.
          ENDIF.

        ENDIF.
*   end of VIMI-16201
*       Begin of VIMI-16264/STAMADA
        IF me->gridname = c_fcoaview AND sy-repid EQ '/OPT/BL_APPRBASELINE'.
          READ TABLE e_object->mt_toolbar INTO l_button WITH KEY function  = '&LOCAL&DELETE_ROW'.
          IF sy-subrc EQ 0.
            l_button-function  = 'DEL_ROW'.
            MODIFY e_object->mt_toolbar FROM l_button INDEX sy-tabix TRANSPORTING function.
          ENDIF.
        ENDIF.
*       End of VIMI-16264/STAMADA
*-- Start VIM 6.0
      WHEN c_freportview.
        IF me->newrows EQ space.
          DELETE e_object->mt_toolbar
                 WHERE function EQ 'SUBS'              OR
                       function EQ '&LOCAL&APPEND'     OR
                       function EQ '&LOCAL&COPY_ROW'   OR
                       function EQ '&LOCAL&CUT'        OR
                       function EQ '&LOCAL&COPY'       OR
                       function EQ '&LOCAL&PASTE'      OR
                       function EQ '&LOCAL&UNDO'       .
        ENDIF.
*-- End VIM 6.0
    ENDCASE.

  ENDMETHOD.                    "HANDLE_TOOLBAR


*-- menu button on the toolbar
  METHOD handle_menu_button.
*   Begin of INS VIMI-24067/szeeshan
    DATA: lv_activate TYPE GUI_TEXT,
          lv_deactivate TYPE GUI_TEXT.
    lv_activate = text-mb1.
    lv_deactivate = text-mb2.
*   End of INS VIMI-24067/szeeshan
    IF e_ucomm = 'USER'.
      CALL METHOD e_object->add_function
        EXPORTING
          fcode = 'UACTIVATE'
          icon  = icon_activate
*          text  = text-mb1. "Activate  "VIMI-24067/szeeshan
          text = lv_activate.           "VIMI-24067/szeeshan
      CALL METHOD e_object->add_function
        EXPORTING
          fcode = 'UDACTIVATE'
          icon  = icon_deactivate
*          text  = text-mb2. "Deactivate  "VIMI-24067/szeeshan
          text = lv_deactivate.           "VIMI-24067/szeeshan
    ENDIF.
  ENDMETHOD.                              "HANDLE_MENU_BUTTON.
* Handle F4
  METHOD handle_f4.
    PERFORM handle_alvf4 USING e_fieldname es_row_no e_display
                         CHANGING er_event_data.            "VIMI-21473
*    CALL METHOD g_helper->refresh_grid( g_grid ).      "VIMI-21473
    er_event_data->m_event_handled = 'X'.
  ENDMETHOD.                                                "HANDLE_F4

* Handle user command on alv grid
  METHOD handle_user_command.
    DATA lt_row TYPE lvc_t_roid.
    DATA l_row  TYPE lvc_s_roid.
    CASE e_ucomm.
      WHEN 'MLINE'.
        PERFORM add_more_lines USING 5.
        CALL METHOD g_helper->refresh_grid( g_grid ).
*      WHEN 'DELETEROW'.
      WHEN 'UDACTIVATE'.
        PERFORM handle_usermap_delete.
        CALL METHOD g_helper->refresh_grid( g_grid ).
      WHEN 'NEWROW'.
* Start of INS VIMI-9526
        IF sy-repid = '/OPT/AR_COA' AND
           NOT g_grid IS INITIAL    AND
           g_evt_grid->gridname = c_fcoderview.
          PERFORM redisp_coder.
        ENDIF.
* End of INS VIMI-9526
        PERFORM handle_new_row .
* Begin Naveen
      WHEN 'SUBS'.
        PERFORM substitute.
      WHEN 'PREF'.
        PERFORM user_preferences.
*      WHEN 'UNDEL'.
      WHEN 'UACTIVATE'.
        PERFORM un_delete_lines.
        CALL METHOD g_helper->refresh_grid( g_grid ).
* BEGIN of VIM 5.2 SP5 - VIMI-3677 - CNICKLAS
      WHEN 'CHNG_DIS1'.
        PERFORM changedoc_display USING e_ucomm.
      WHEN 'CHNG_DIS2'.
        PERFORM changedoc_display USING e_ucomm.
* End of VIM 5.2 SP5 - VIMI-3677 - CNICKLAS
* End naveen.
* Start of INS VIMI-7380.
      WHEN 'CHNG_DIS3'.
        PERFORM changedoc_display USING e_ucomm.
* End of INS VIMI-7380
* Begin of VIMI-16147/STAMADA
      WHEN 'REFR'.   "Refresh
*       PERFORM get_data.            "VIMI-23560/AMANGAPA
        PERFORM get_data_new.        "VIMI-23560/AMANGAPA
        PERFORM get_coder_data.

*       begin of VIMI-16537
        IF g_evt_grid->gridname =  'COACRVIEW'.
          PERFORM add_counter_to_ncoa CHANGING gt_ncoa2[].
        ELSEIF g_evt_grid->gridname = 'COAAPRVIEW'.
          PERFORM add_counter_to_ncoa CHANGING gt_ncoa3[].
        ENDIF.
*       end of VIMI-16537
* begin of VIMI-16557
        CALL FUNCTION 'SAPGUI_SET_FUNCTIONCODE'
          EXPORTING
            functioncode = g_evt_grid->gridname
          EXCEPTIONS
            OTHERS       = 0.
*        CALL METHOD g_helper->refresh_grid( g_grid ).
* end of VIMI-16557

* End of VIMI-16147/STAMADA

* begin of VIMI-16201
      WHEN 'DEL_ROW'.
        PERFORM delete_row_ar_coa.
        CALL METHOD g_helper->refresh_grid( g_grid ).
* end of VIMI-16201
    ENDCASE.
  ENDMETHOD.                    "HANDLE_USER_COMMAND

* Handle data changed on alv grid to update the table when f4 is not
* used or triggered from PAI
  METHOD handle_data_changed.

    PERFORM validate_data USING sender me->newrows
                          CHANGING er_data_changed.
*    CALL METHOD g_helper->refresh_grid( g_grid ).  "D-VIMI-13918 To reduce attempts to Refresh ALV

  ENDMETHOD.                    "HANDLE_DATA_CHANGED

  METHOD data_changed_finished.

    CHECK e_modified NE space.
    PERFORM change_alv_data USING me->newrows.
    IF sy-repid NE '/OPT/AR_COA'.                           " VIMI-9049
      IF me->newrows EQ space.
        CALL METHOD g_helper->refresh_grid( g_grid ).
      ELSE.
        CALL METHOD g_helper->refresh_grid( g_gridnew ).
      ENDIF.
    ENDIF.                                                  " VIMI-9049
    g_changed = 'X'.
* Start of INS VIMI-7380
    IF sy-repid = '/OPT/AR_COA'.
      IF NOT gt_rowid IS INITIAL.
        PERFORM redisp_grid.
      ENDIF.
      PERFORM redisp_ncoa.
    ENDIF.
* End of INS VIMI-7380
  ENDMETHOD.                    "DATA_CHANGED_FINISHED

* begin of VIMI-16480
  METHOD  handle_after_user_command.
*   update line no when sorting
    IF me->gridname = c_fapprcoa AND       ( e_ucomm = cl_gui_alv_grid=>mc_fc_sort_asc OR
                      e_ucomm = cl_gui_alv_grid=>mc_fc_sort_dsc ).
      PERFORM add_counter_to_ncoa USING gt_ncoa3[].
      g_grid->refresh_table_display( ).

    ELSEIF me->gridname = c_fcodcoa  AND
    ( e_ucomm = cl_gui_alv_grid=>mc_fc_sort_asc OR
      e_ucomm = cl_gui_alv_grid=>mc_fc_sort_dsc ).

      PERFORM add_counter_to_ncoa USING gt_ncoa2[].
      g_grid->refresh_table_display( ).
    ENDIF.
* end of VIMI-16480
* begin of VIMI-16582
    IF ( me->gridname = c_fapprcoa OR  me->gridname = c_fcodcoa
      OR me->gridname = c_fumview OR me->gridname = c_applevel ) AND
       ( e_ucomm = cl_gui_alv_grid=>mc_fc_filter OR e_ucomm = cl_gui_alv_grid=>mc_mb_filter ).
      CALL METHOD g_grid->get_filter_criteria
        IMPORTING
          et_filter = gt_filter.
    ENDIF.
* end of VIMI-16582
  ENDMETHOD.                    "handle_after_user_command
*           end of VIMI-16480
ENDCLASS.                    "LCL_EVENT_GRID IMPLEMENTATION

*---------------------------------------------------------------------*
*       CLASS LCL_ALV_HELPER IMPLEMENTATION
*---------------------------------------------------------------------*
CLASS lcl_alv_helper IMPLEMENTATION.
  METHOD constructor.
*    CALL METHOD me->set_view( '0110' ). "D-VIMI-13918

* Begin of I-VIMI-13918
* Load COA View by default for Old COA
    IF sy-repid = '/OPT/BL_APPRBASELINE'.
      CALL METHOD me->set_view( '0120' ).
    ELSE.
      IF gv_simple_mode = 'X'.                              "VIMI-16201
        CALL METHOD me->set_view( '0122' ).                 "V IMI-16201
      ELSE.                                                 "VIMI-16201
        CALL METHOD me->set_view( '0110' ).
      ENDIF.                                                "VIMI-16201
    ENDIF.
* End of I-VIMI-13918

  ENDMETHOD.                    "CONSTRUCTOR
  METHOD get_fieldcat.
    PERFORM build_fieldcat_alv USING i_gridname t_fcat i_newrows.
  ENDMETHOD.                    "LCL_ALV_HELPER
  METHOD set_view.
    DATA l_row TYPE lvc_s_roid.
    IF NOT g_grid IS INITIAL.
      CALL METHOD g_grid->get_current_cell
        IMPORTING
          es_row_no = l_row.
      CASE g_evt_grid->gridname.
        WHEN c_fumview.
          READ TABLE gt_usermap INTO gt_usermap INDEX l_row-row_id.
          me->g_userid = gt_usermap-opt_userid.
        WHEN c_fcoaview.
          READ TABLE gt_coa INTO gt_coa INDEX l_row-row_id.
          me->g_userid = gt_coa-opt_userid.
        WHEN c_fcoderview.
          IF sy-repid <> '/OPT/AR_COA'.                     " VIMI-9049
            READ TABLE gt_coder INTO gt_coder INDEX l_row-row_id.
            me->g_userid = gt_coder-coder_id.
          ENDIF.                                            " VIMI-9049
*-- Start VIM 6.0
        WHEN c_freportview.
          READ TABLE gt_auth INTO gs_auth INDEX l_row-row_id.
          me->g_userid = gs_auth-userid.
*-- End VIM 6.0
      ENDCASE.
    ENDIF.
    PERFORM free_objects.
    g_view-prog = sy-repid.
    g_view-dynr = i_dynr.
  ENDMETHOD.                    "SET_VIEW
  METHOD refresh_grid.
    DATA l_row TYPE lvc_s_row.
    DATA l_col TYPE lvc_s_col.

    CLEAR: gv_rowid.
    IF NOT i_grid IS INITIAL.
      CALL METHOD i_grid->get_current_cell
        IMPORTING
          e_row     = gv_rowid
          es_row_id = l_row
          es_col_id = l_col.

      CALL METHOD i_grid->refresh_table_display( ).
      CALL METHOD i_grid->set_current_cell_via_id
        EXPORTING
          is_row_id    = l_row
          is_column_id = l_col.
    ENDIF.
  ENDMETHOD.                    "REFRESH_GRID
ENDCLASS.                    "LCL_ALV_HELPER IMPLEMENTATION



  *******************************************************************************************************************
  
  <<<<< ZVIM_BL_APPRBASELINEO01 >>>>>>
  
  *&---------------------------------------------------------------------*
*&  Include           /OPT/BL_APPRBASELINEO01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Module  INIT_100  OUTPUT
*&---------------------------------------------------------------------*
MODULE init_100 OUTPUT.
  PERFORM init_100.
ENDMODULE.                 " INIT_100  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  INIT_110  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE init_110 OUTPUT.
  PERFORM init_110.
ENDMODULE.                 " INIT_110  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  INIT_120  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE init_120 OUTPUT.
  PERFORM init_120.
ENDMODULE.                 " INIT_120  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  INIT_130  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE init_130 OUTPUT.
  PERFORM init_130.
ENDMODULE.                 " INIT_130  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  PBO_TABSTRIP  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE pbo_tabstrip OUTPUT.
  PERFORM pbo_tabstrip.
ENDMODULE.                 " PBO_TABSTRIP  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  INIT_140  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE init_140 OUTPUT.
  PERFORM init_140.
  SET PF-STATUS 'DIALOG'.
ENDMODULE.                 " INIT_140  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  STATUS_0200  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0200 OUTPUT.
  IF g_edit EQ space.
    SET PF-STATUS 'T_200' EXCLUDING 'SAVE'.
  ELSE.
    SET PF-STATUS 'T_200'.
  ENDIF.
  SET TITLEBAR 'T_200'.

  CLEAR: /ors/user_prefer.

  IF v_change_200_flag = 1.
    MOVE-CORRESPONDING s_userprefer TO /ors/user_prefer.
* BEGIN OF VIMI-19145:ASUTHARA
    IF lv_default_lang IS NOT INITIAL.
      MOVE lv_default_lang TO /ors/user_prefer-default_language.
    ENDIF.
*  END OF VIMI-19145:ASUTHARA
*   Begin of insert VIMI-19275

*  Begin of insert VIMI-24380
*    MOVE lv_default_coder    TO /ors/user_prefer-default_coder.
*    MOVE lv_inv_per_page     TO /ors/user_prefer-inv_per_page.
*    MOVE lv_date_format      TO /ors/user_prefer-date_format.
    IF NOT lv_default_coder IS INITIAL.
      MOVE lv_default_coder    TO /ors/user_prefer-default_coder.
    ENDIF.
    IF NOT lv_inv_per_page IS INITIAL.
      MOVE lv_inv_per_page     TO /ors/user_prefer-inv_per_page.
    ENDIF.
    IF NOT lv_date_format IS INITIAL.
      MOVE lv_date_format      TO /ors/user_prefer-date_format.
    ENDIF.
* End of insert VIMI-24380

    IF NOT lv_max_recent_list IS INITIAL.
      MOVE lv_max_recent_list  TO /ors/user_prefer-max_recent_list.
    ENDIF.

* Begin of insert VIMI-24380
*    MOVE lv_decimal_notation TO /ors/user_prefer-decimal_notation.
*    MOVE lv_default_currency TO /ors/user_prefer-default_currency.
*    MOVE lv_image_display    TO /ors/user_prefer-image_display.
*    MOVE lv_sid              TO /ors/user_prefer-sid.
*    MOVE lv_tzone            TO /ors/user_prefer-tzone.

    IF NOT lv_decimal_notation IS INITIAL.
      MOVE lv_decimal_notation TO /ors/user_prefer-decimal_notation.
    ENDIF.
    IF NOT lv_default_currency IS INITIAL.
      MOVE lv_default_currency TO /ors/user_prefer-default_currency.
    ENDIF.
    IF NOT lv_image_display IS INITIAL.
      MOVE lv_image_display    TO /ors/user_prefer-image_display.
    ENDIF.
    IF NOT lv_sid IS INITIAL.
      MOVE lv_sid              TO /ors/user_prefer-sid.
    ENDIF.
    IF NOT lv_tzone IS INITIAL.
      MOVE lv_tzone            TO /ors/user_prefer-tzone.
    ENDIF.
* End of insert VIMI-24380

*   End of insert VIMI-19275
  ELSEIF v_create_200_flag = 1.
    MOVE gt_usermap-opt_userid TO /ors/user_prefer-approver.
  ENDIF.
  CLEAR: lv_default_lang. "INSERT VIMI-19145:ASUTHARA
  IF g_edit EQ space.
    LOOP AT SCREEN.
      screen-input = 0.
      MODIFY SCREEN.
    ENDLOOP.
  ENDIF.
  LOOP AT SCREEN.
    IF screen-name = '/ORS/USER_PREFER-APPROVER'.
      screen-input = 0.
    ENDIF.
    MODIFY SCREEN.
  ENDLOOP.
ENDMODULE.                 " STATUS_0200  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  init_150  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE init_150 OUTPUT.
  PERFORM init_150.
ENDMODULE.                 " init_150  OUTPUT
* Start of INS VIMI-7380
*&---------------------------------------------------------------------*
*&      Module  INIT_300  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE init_300 OUTPUT.
  PERFORM init_300.
ENDMODULE.                 " INIT_300  OUTPUT
* End of INS VIMI-7380
*&---------------------------------------------------------------------*
*&      Module  INIT_122  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE init_122 OUTPUT.
  PERFORM init_122.
ENDMODULE.                 " INIT_122  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  PBO_SUB_TABSTRIP  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE pbo_sub_tabstrip OUTPUT.
  PERFORM pbo_sub_tabstrip.
ENDMODULE.                 " PBO_SUB_TABSTRIP  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  INIT_123  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE init_123 OUTPUT.
  PERFORM init_123.
ENDMODULE.                 " INIT_123  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  INIT_124  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE init_124 OUTPUT.
  PERFORM init_124.
ENDMODULE.                 " INIT_124  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  STATUS_9000  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE init_400 OUTPUT.
  PERFORM init_400.
ENDMODULE.                 " init_400  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  DOCTYP_F4  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE doctyp_f4 INPUT.
  PERFORM get_doctype_f4.
ENDMODULE.                 " DOCTYP_F4  INPUT


*******************************************************************************************************************


<<<<<<ZVIM_BL_APPRBASELINEI01 >>


*&---------------------------------------------------------------------*
*&  Include           /OPT/BL_APPRBASELINEI01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Module  EXIT_SCREEN  INPUT
*&---------------------------------------------------------------------*
MODULE exit_screen INPUT.
  DATA: l_refresh TYPE c.
  PERFORM save_okcode.
  CASE sy-dynnr.
    WHEN 100.
      IF g_changed IS INITIAL.
        IF NOT g_grid IS INITIAL.                           " VIMI-9049
          CALL METHOD g_grid->check_changed_data
            CHANGING
              c_refresh = l_refresh.
        ENDIF.                                              " VIMI-9049
      ENDIF.
*      IF g_changed NE space AND g_edit NE space.
      IF g_changed NE space." AND g_edit NE space.
        PERFORM popup_dataloss CHANGING g_answer.
        CHECK g_answer EQ '1'.
      ENDIF.
    WHEN 140.
      REFRESH: gt_codern, gt_coan, gt_authn.
  ENDCASE.
  LEAVE TO SCREEN 0.
ENDMODULE.                 " EXIT_SCREEN  INPUT
*&---------------------------------------------------------------------*
*&      Module  FCODE  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE fcode INPUT.
**Begin of ccheemar/VIMI-6293
  DATA: l_valid TYPE c.
  IF NOT g_grid IS INITIAL.                                 "VIMI-9049
    CALL METHOD g_grid->check_changed_data
      IMPORTING
        e_valid = l_valid.
  ENDIF.                                                    "VIMI-9049
**End of ccheemar/ VIMI-6293
  PERFORM save_okcode.
  PERFORM fcode.
ENDMODULE.                 " FCODE  INPUT
*&---------------------------------------------------------------------*
*&      Module  FCODE_140  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE fcode_140 INPUT.
  PERFORM save_okcode.
  PERFORM fcode_140.
ENDMODULE.                 " FCODE_140  INPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0200 INPUT.
  CLEAR: g_okcode_save.
  g_okcode_save = g_okcode.
  CLEAR: g_okcode. "INSERT VIMI-19145:ASUTHARA
  CASE g_okcode_save.
    WHEN 'SAVE'.
      IF v_create_200_flag = 1.
        CLEAR: v_create_200_flag.
        /ors/user_prefer-mandt = sy-mandt.
        INSERT into /ors/user_prefer client specified
                             values /ors/user_prefer.
        IF sy-subrc <> 0.
          MESSAGE e031.                                     "#EC *
        ENDIF.
        SET SCREEN 0.
        LEAVE SCREEN.

      ELSEIF v_change_200_flag = 1.
        CLEAR: v_change_200_flag.
        /ors/user_prefer-mandt = sy-mandt.
        UPDATE /ors/user_prefer CLIENT SPECIFIED
                           FROM /ors/user_prefer.

        IF sy-subrc <> 0.
          MESSAGE e031.                                     "#EC *
        ENDIF.
        SET SCREEN 0.
        LEAVE SCREEN.
      ENDIF.

    WHEN 'CANC'.
      CLEAR: v_change_200_flag,
             v_create_200_flag.
      SET SCREEN 0.
      LEAVE SCREEN.
*  BEGIN OF VIMI-19145:ASUTHARA
    WHEN OTHERS.
      MOVE /ors/user_prefer-default_language TO lv_default_lang.
*  END OF VIMI-19145:ASUTHARA
*     Begin of VIMI-19275
      MOVE /ors/user_prefer-default_coder TO lv_default_coder.
      MOVE /ors/user_prefer-inv_per_page TO lv_inv_per_page .
      MOVE /ors/user_prefer-date_format TO lv_date_format.
      MOVE /ors/user_prefer-max_recent_list TO lv_max_recent_list.
      MOVE /ors/user_prefer-decimal_notation TO lv_decimal_notation.
      MOVE /ors/user_prefer-default_currency TO lv_default_currency.
      MOVE /ors/user_prefer-image_display TO lv_image_display.
      MOVE /ors/user_prefer-show_history TO lv_show_history.
      MOVE /ors/user_prefer-show_detail TO lv_show_detail.
      MOVE /ors/user_prefer-show_attachment TO lv_show_attachment.
      MOVE /ors/user_prefer-show_refered TO lv_show_refered.
      MOVE /ors/user_prefer-sid TO lv_sid.
      MOVE /ors/user_prefer-tzone TO lv_tzone.
*     End of VIMI-19275
  ENDCASE.

ENDMODULE.                 " USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*&      Module  GET_CODER_DATA  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE get_coder_data INPUT.
*  PERFORM get_coder_data.       "VIMI-11026 - will be called in PBO
ENDMODULE.                 " GET_CODER_DATA  INPUT



*******************************************************************************************************************


<<<<< ZVIM_BL_APPRBASELINEF01 >>>

*&---------------------------------------------------------------------*
*&  Include           /OPT/BL_APPRBASELINEF01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  GET_DATA
*&---------------------------------------------------------------------*
FORM get_data .
* Begin of VIMI-23560/AMANGAPA
** begin VIMI-7280
*  DATA:
*    lv_usermap TYPE ty_usermap_line,
*    lv_coa     TYPE /opt/bl_appcoa,
*    lv_group   TYPE xuclass,
*    lv_actvt   TYPE activ_auth.
** end VIMI-7280
*  DATA: lv_tabix TYPE sy-tabix. "VIMI-16147/STAMADA
*
** Start of INS VIMI-7380
**  IF sy-repid = '/OPT/AR_COA'. "VIMI-5085 - Enable Manager for Escalations
** Start of CHG VIMI-9049
**    SELECT *
**      FROM /opt/appr_coa
**      INTO CORRESPONDING FIELDS OF TABLE gt_ncoa1.      "#EC CI_NOWHERE
** Begin of comments D-VIMI-13918
**  SELECT *
**    FROM /opt/appr_coa
**    INTO CORRESPONDING FIELDS OF TABLE gt_ncoa2
**   WHERE appr_level LE 1.
**  SELECT *
**    FROM /opt/appr_coa
**    INTO CORRESPONDING FIELDS OF TABLE gt_ncoa3
**   WHERE appr_level GE 2.
** End of comments D-VIMI-13918
*
** Begin of I-VIMI-13918
*
** Begin of VIMI-16201: only select authorized company codes
*  DATA: ls_authorized_cc LIKE LINE OF gt_authorized_cc,
*        lr_bukrs TYPE RANGE OF bukrs,
*        lrs_bukrs LIKE LINE OF lr_bukrs.
*
*  PERFORM get_authorized_cc CHANGING gt_authorized_cc.
*
**  IF gv_simple_mode = 'X'.                     "VIMI-22104
*  IF gt_authorized_cc IS NOT INITIAL.
*    LOOP AT gt_authorized_cc INTO ls_authorized_cc.
*      lrs_bukrs-sign = 'I'.
*      lrs_bukrs-option = 'EQ'.
*      lrs_bukrs-low = ls_authorized_cc-bukrs.
*      APPEND lrs_bukrs TO lr_bukrs.
*    ENDLOOP.
*  ENDIF.
*
*  SELECT *
*    FROM /opt/appr_coa
*     INTO CORRESPONDING FIELDS OF TABLE gt_ncoa2
*     WHERE comp_code IN lr_bukrs.
** Begin of VIMI-22104
**  ELSE.
*** End of VIMI-16201
**    SELECT *
**      FROM /opt/appr_coa
**       INTO CORRESPONDING FIELDS OF TABLE gt_ncoa2.
**  ENDIF.                                                    "VIMI-16201
** End of VIMI-22104
*
*  gt_ncoa3[] = gt_ncoa2[].
*
*  DELETE gt_ncoa2 WHERE appr_level GT 1.
*  DELETE gt_ncoa3 WHERE appr_level LE 1.
** End of I-VIMI-13918
*
*  IF gt_ncoa2[] IS INITIAL OR
*     gt_ncoa3[] IS INITIAL.
*    APPEND LINES OF gt_ncoa2 TO gt_ncoa1.
*    APPEND LINES OF gt_ncoa3 TO gt_ncoa1.
*  ENDIF.
*  SELECT *
*    FROM /ors/expense_dec
*    INTO TABLE gt_extype
*   WHERE language = sy-langu.
*  SELECT *
*    FROM /opt/at_levelt
*    INTO TABLE gt_lvltxt
*   WHERE spras = sy-langu.
** End of CHG VIMI-9049
** begin VIMI-9285
**    SORT gt_ncoa BY comp_code appr_level opt_userid counter.
**    SORT gt_ncoa1 BY comp_code appr_level opt_userid counter. " VIMI-8797
*  SORT gt_ncoa BY comp_code appr_level opt_userid otype actorid counter.
*  SORT gt_ncoa1 BY comp_code appr_level opt_userid otype actorid counter.
** end VIMI-9285
**  ELSE. "VIMI-5085 - Enable Manager for Escalations
** End of INS VIMI-7380
*  SELECT * FROM /opt/bl_appcoa   INTO TABLE gt_coa.     "#EC CI_NOWHERE
**  ENDIF.  "VIMI-5085 - Enable Manager for Escalations                                                    "VIMI-7380
*
*
*  SELECT * FROM /opt/bl_ap_coder INTO TABLE gt_coder.   "#EC CI_NOWHERE
*
*  SELECT * FROM /opt/bl_t401     INTO TABLE gt_401.     "#EC CI_NOWHERE
*  SELECT * FROM /opt/bl_t402     INTO TABLE gt_402.     "#EC CI_NOWHERE
*  SELECT * FROM /ors/usermap     INTO TABLE gt_usermap. "#EC CI_NOWHERE
**                                 WHERE DELETED EQ SPACE.
******    "VIMI-16147/STAMADA
*  CLEAR: gt_values_b, gs_values_b, gt_values, gs_values.
*
**-- Domain values for User type
*  CALL FUNCTION 'DDUT_DOMVALUES_GET'
*    EXPORTING
*      name          = '/OPT/USER_TYPE_DO'
*      langu         = sy-langu
*    TABLES
*      dd07v_tab     = gt_values
*    EXCEPTIONS
*      illegal_input = 1
*      OTHERS        = 2.
*  IF sy-subrc <> 0.
** MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
**         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*  ENDIF.
*
**-- Domain values for Bulk approval type
*  CALL FUNCTION 'DDUT_DOMVALUES_GET'
*    EXPORTING
*      name          = '/OPT/ABULK_APPR_TYPE_DO'
*      langu         = sy-langu
*    TABLES
*      dd07v_tab     = gt_values_b
*    EXCEPTIONS
*      illegal_input = 1
*      OTHERS        = 2.
*  IF sy-subrc <> 0.
** MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
**         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*  ENDIF.
**-- End of VIM 6.0 - VIMI-2215
*
**-- Begin of VIM 6.0 - VIMI-2215
*  LOOP AT gt_usermap.
*    lv_tabix = sy-tabix.
*
**-- User type text
*    READ TABLE gt_values INTO gs_values WITH KEY
*          domvalue_l = gt_usermap-user_type.
*    IF sy-subrc EQ 0.
*      IF gt_usermap-user_type = ' '.
*        CONCATENATE 'A' '-' gs_values-ddtext
*                    INTO gt_usermap-utext.
*      ELSE.
*        CONCATENATE gt_usermap-user_type '-'
*                    gs_values-ddtext
*                    INTO gt_usermap-utext.
*      ENDIF.
*    ENDIF.
*
**-- Bulk approval text
*    READ TABLE gt_values_b INTO gs_values_b WITH KEY
*          domvalue_l = gt_usermap-bulkapproval.
*    IF sy-subrc EQ 0.
*      IF gt_usermap-bulkapproval = ' '.
*        CONCATENATE 'N' '-' gs_values_b-ddtext
*                    INTO gt_usermap-btext.
*      ELSE.
*        CONCATENATE gt_usermap-bulkapproval '-'
*                    gs_values_b-ddtext
*                    INTO gt_usermap-btext.
*      ENDIF.
*    ENDIF.
*
*    MODIFY gt_usermap INDEX lv_tabix TRANSPORTING btext.
** Begin of VIMI 17454/STAMADA
** Optuserids are being used for auth determination.It
** shld be sap user id
**    gwa_bname-bname = gt_usermap-opt_userid. "VIMI-19672/snittala
*    gwa_bname-bname = gt_usermap-sap_user_id. "VIMI-19672/snittala
*    APPEND gwa_bname TO git_bname.
*    CLEAR gwa_bname.
** End of VIMI 17454/STAMADA
*
*    CLEAR gt_usermap-utext.
*  ENDLOOP.
** Begin of VIMI 17244/STAMADA
*  IF git_bname IS NOT INITIAL.
*    SORT git_bname.
*    DELETE ADJACENT DUPLICATES FROM git_bname.
*    SELECT bname
*           class
*           FROM  usr02
*           INTO TABLE git_usr02
*           FOR ALL ENTRIES IN git_bname
*           WHERE bname EQ git_bname-bname.
*  ENDIF.
** End of VIMI 17244/STAMADA
*
*
********"VIMI-16147/STAMADA
**-- Start VIM 6.0
*  SELECT * INTO TABLE gt_authn FROM /opt/bl_rpt_auth.   "#EC CI_NOWHERE
**-- End VIM 6.0
** Start of INS VIMI-7380
*  SELECT *
*    FROM /opt/appr_limit
*    INTO CORRESPONDING FIELDS OF TABLE gt_level1.       "#EC CI_NOWHERE
*
*  CALL FUNCTION 'DDUT_DOMVALUES_GET'
*    EXPORTING
*      name          = '/OPT/DO_HEAD_LIMIT_CHK'
*      langu         = sy-langu
*    TABLES
*      dd07v_tab     = gt_values_h
*    EXCEPTIONS
*      illegal_input = 1
*      OTHERS        = 2.
*  IF sy-subrc <> 0.
** MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
**         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*  ENDIF.
*
*  CLEAR gt_level_old.
*  REFRESH gt_level_old.
*
*  LOOP AT gt_level1.
*    g_tabix = sy-tabix.
** Start of INS VIMI-9049
*    READ TABLE gt_extype INTO gs_extype WITH KEY expense_type = gt_level1-expense_type.
*    IF sy-subrc = 0.
*      IF gs_extype-expense_type IS INITIAL.
*        gt_level1-extxt = gs_extype-expense_desc.
*      ELSE.
*        CONCATENATE gs_extype-expense_type
*                    '-'
*                    gs_extype-expense_desc
*               INTO gt_level1-extxt
*          SEPARATED BY space.
*      ENDIF.
*    ENDIF.
*    READ TABLE gt_lvltxt INTO gs_lvltxt WITH KEY appr_level = gt_level1-appr_level.
*    IF sy-subrc = 0.
*      CONCATENATE gs_lvltxt-appr_level
*                  '-'
*                  gs_lvltxt-descr
*             INTO gt_level1-descr
*        SEPARATED BY space.
*    ENDIF.
** End of INS VIMI-9049
*    READ TABLE gt_values_h INTO gs_values_h WITH KEY
*                              domvalue_l = gt_level1-head_limit_chk.
*    IF sy-subrc = 0.
*      CONCATENATE gs_values_h-domvalue_l
*                  '-'
*                  gs_values_h-ddtext
*             INTO gt_level1-btext.
*    ENDIF.
*    MODIFY gt_level1 INDEX g_tabix.
*    MOVE-CORRESPONDING gt_level1 TO gt_level_old.
*    APPEND gt_level_old.
*    CLEAR gt_level_old.
*  ENDLOOP.
*  SORT gt_level1 BY bukrs expense_type appr_level.
** End of INS VIMI-7380
** Start of INS VIMI-9049
*  CLEAR gt_ncoa_old.
*  REFRESH gt_ncoa_old.
*
*  LOOP AT gt_ncoa2.
*    g_tabix = sy-tabix.
*    READ TABLE gt_lvltxt INTO gs_lvltxt WITH KEY appr_level = gt_ncoa2-appr_level.
*    IF sy-subrc = 0.
*      CONCATENATE gs_lvltxt-appr_level
*                  '-'
*                  gs_lvltxt-descr
*             INTO gt_ncoa2-descr
*        SEPARATED BY space.
*    ENDIF.
*    MOVE-CORRESPONDING gt_ncoa2 TO gt_ncoa_old.
*    MODIFY gt_ncoa2 INDEX g_tabix.
*    APPEND gt_ncoa_old.
*    CLEAR gt_ncoa_old.
*    CLEAR gt_ncoa2.
*  ENDLOOP.
*
*  LOOP AT gt_ncoa3.
*    g_tabix = sy-tabix.
*    READ TABLE gt_lvltxt INTO gs_lvltxt WITH KEY appr_level = gt_ncoa3-appr_level.
*    IF sy-subrc = 0.
*      IF gs_lvltxt-appr_level IS INITIAL.
*        gt_ncoa3-descr = gs_lvltxt-descr.
*      ELSE.
*        CONCATENATE gs_lvltxt-appr_level
*                    '-'
*                    gs_lvltxt-descr
*               INTO gt_ncoa3-descr
*          SEPARATED BY space.
*      ENDIF.
*    ENDIF.
*    MOVE-CORRESPONDING gt_ncoa3 TO gt_ncoa_old.
*    MODIFY gt_ncoa3 INDEX g_tabix.
*    APPEND gt_ncoa_old.
*    CLEAR gt_ncoa_old.
*    CLEAR gt_ncoa3.
*  ENDLOOP.
** End of INS VIMI-9049
*
*  SORT gt_coa BY opt_userid.                               "I-VIMI-13918
*  SORT gt_usermap BY opt_userid.                           "I-VIMI-13918
*
** Populate manager id
*  LOOP AT gt_usermap.
*    g_tabix = sy-tabix.
**    READ TABLE gt_coa WITH KEY opt_userid = gt_usermap-opt_userid.               "D-VIMI-13918
*    READ TABLE gt_coa WITH KEY opt_userid = gt_usermap-opt_userid BINARY SEARCH.  "I-VIMI-13918
*    IF sy-subrc EQ 0.
*      gt_usermap-manager_id = gt_coa-manager_id.
*      MODIFY gt_usermap INDEX g_tabix.
*    ENDIF.
*  ENDLOOP.
** begin VIMI-7280
** The parameter is not used anyway, default is display
** and g_edit is initialized
**  IF pdisplay EQ space.
**    g_edit = 'X'.
**    PERFORM lock_tables.
**  ELSE.
**    CLEAR g_edit.
**  ENDIF.
** end VIMI-7280
*
** begin VIMI-7280
*
** Authorization checks
*
*
** Begin of insert VIMI-15934
*  gt_usermap_unfiltered[] = gt_usermap[].
** End of insert VIMI-15934
*
*
*
*  IF NOT /opt/vim_auth_check=>is_active IS INITIAL.
*
*    IF g_edit IS INITIAL.
*      lv_actvt = '03'.
*    ELSE.
*      lv_actvt = '02'.
*    ENDIF.
*
** COA tables will be split into sets of allowed and not allowed
** records according to authorizations.
** The user maps table will be split last, being used for checks
** for other COA tables.
*
*    REFRESH: gt_usermap_filtered[], gt_coa_filtered[],
*             gt_coder_filtered[].
*
** begin VIMI-8064
*
*    IF sy-repid = '/OPT/AR_COA'.
*
*      REFRESH: gt_ncoa_filtered[], gt_level_filtered[].
**               gt_lcoder_filtered[].                        "VIMI-10937
*
**   LIAP COA limits per company code
*
*      LOOP AT gt_level1.
*        CALL METHOD /opt/vim_auth_check=>check_liap_level_limits
*          EXPORTING
*            pi_bukrs = gt_level1-bukrs
*            pi_actvt = lv_actvt
*          EXCEPTIONS
*            failed   = 1.
*        IF sy-subrc <> 0.
*          INSERT gt_level1 INTO TABLE gt_level_filtered.
*          DELETE gt_level1.
*        ENDIF.
*      ENDLOOP.
*
**   LIAP COA approvers per company code
*
*      SORT gt_usermap BY opt_userid.                       "I-VIMI-13918
*
*      LOOP AT gt_ncoa2.
**        READ TABLE gt_usermap WITH KEY opt_userid = gt_ncoa2-opt_userid.               "D-VIMI-13918
*        READ TABLE gt_usermap WITH KEY opt_userid = gt_ncoa2-opt_userid BINARY SEARCH. "I-VIMI-13918
*        IF sy-subrc <> 0.
*          CLEAR lv_group.
*        ELSE.
*          PERFORM get_sap_user_group
*            USING gt_usermap-sap_user_id
*            CHANGING lv_group.
*        ENDIF.
*        CALL METHOD /opt/vim_auth_check=>check_liap_approver
*          EXPORTING
*            pi_group = lv_group
*            pi_bukrs = gt_ncoa2-comp_code
*            pi_actvt = lv_actvt
*          EXCEPTIONS
*            failed   = 1.
*        IF sy-subrc <> 0.
*          INSERT gt_ncoa2 INTO TABLE gt_ncoa_filtered.
*          DELETE gt_ncoa2.
*        ENDIF.
*      ENDLOOP.
*
*      LOOP AT gt_ncoa3.
**       READ TABLE gt_usermap WITH KEY opt_userid = gt_ncoa3-opt_userid.               "D-VIMI-13918
*        READ TABLE gt_usermap WITH KEY opt_userid = gt_ncoa3-opt_userid BINARY SEARCH.  "I-VIMI-13918
*        IF sy-subrc <> 0.
*          CLEAR lv_group.
*        ELSE.
*          PERFORM get_sap_user_group
*            USING gt_usermap-sap_user_id
*            CHANGING lv_group.
*        ENDIF.
*        CALL METHOD /opt/vim_auth_check=>check_liap_approver
*          EXPORTING
*            pi_group = lv_group
*            pi_bukrs = gt_ncoa3-comp_code
*            pi_actvt = lv_actvt
*          EXCEPTIONS
*            failed   = 1.
*        IF sy-subrc <> 0.
*          INSERT gt_ncoa3 INTO TABLE gt_ncoa_filtered.
*          DELETE gt_ncoa3.
*        ENDIF.
*      ENDLOOP.
*
** begin VIMI-9285
**      SORT gt_ncoa_filtered BY comp_code appr_level opt_userid counter.
*      SORT gt_ncoa_filtered BY comp_code appr_level opt_userid otype actorid counter.
** end VIMI-9285
*
*    ELSE.
*
** end VIMI-8064
*
** COA limits
*
*      SORT gt_coa BY opt_userid counter.
*      LOOP AT gt_coa.
*        AT NEW opt_userid.
**          READ TABLE gt_usermap WITH KEY opt_userid = gt_coa-opt_userid.                "D-VIMI-13918
*          READ TABLE gt_usermap WITH KEY opt_userid = gt_coa-opt_userid BINARY SEARCH.  "I-VIMI-13918
*          IF sy-subrc <> 0.
*            CLEAR lv_group.
*          ELSE.
*            PERFORM get_sap_user_group
*              USING gt_usermap-sap_user_id
*              CHANGING lv_group.
*          ENDIF.
*        ENDAT.
*        IF gt_coa-bukrs = '*' OR gt_coa-bukrs IS INITIAL.
*          CALL METHOD /opt/vim_auth_check=>check_appr_limits
*            EXPORTING
*              pi_group = lv_group
*              pi_bukrs = '    '
*              pi_actvt = lv_actvt
*            EXCEPTIONS
*              failed   = 1.
*        ELSE.
*          CALL METHOD /opt/vim_auth_check=>check_appr_limits
*            EXPORTING
*              pi_group = lv_group
*              pi_bukrs = gt_coa-bukrs
*              pi_actvt = lv_actvt
*            EXCEPTIONS
*              failed   = 1.
*        ENDIF.
*        IF sy-subrc <> 0.
*          INSERT gt_coa INTO TABLE gt_coa_filtered.
*          DELETE gt_coa.
*        ENDIF.
*      ENDLOOP.
*
** COA coders
*
*      SORT gt_coder BY coder_id counter.
*      LOOP AT gt_coder.
*        AT NEW coder_id.
**         READ TABLE gt_usermap WITH KEY opt_userid = gt_coder-coder_id. "D-VIMI-13918
*          READ TABLE gt_usermap WITH KEY opt_userid = gt_coder-coder_id BINARY SEARCH. "I-VIMI-13918
*          IF sy-subrc <> 0.
*            CLEAR lv_group.
*          ELSE.
*            PERFORM get_sap_user_group
*              USING gt_usermap-sap_user_id
*              CHANGING lv_group.
*          ENDIF.
*        ENDAT.
*        IF g_constant = 'R' OR          " no company code in coder screens
*           gt_coder-company_code = '*' OR
*           gt_coder-company_code IS INITIAL.
*          CALL METHOD /opt/vim_auth_check=>check_appr_coder
*            EXPORTING
*              pi_group = lv_group
*              pi_bukrs = '    '
*              pi_actvt = lv_actvt
*            EXCEPTIONS
*              failed   = 1.
*        ELSE.
*          CALL METHOD /opt/vim_auth_check=>check_appr_coder
*            EXPORTING
*              pi_group = lv_group
*              pi_bukrs = gt_coder-company_code
*              pi_actvt = lv_actvt
*            EXCEPTIONS
*              failed   = 1.
*        ENDIF.
*        IF sy-subrc <> 0.
*          INSERT gt_coder INTO TABLE gt_coder_filtered.
*          DELETE gt_coder.
*        ENDIF.
*      ENDLOOP.
*
*    ENDIF.                                                  "VIMI-8064
*
** User map
*
*    LOOP AT gt_usermap.
*      PERFORM get_sap_user_group
*        USING gt_usermap-sap_user_id
*        CHANGING lv_group.
*      CALL METHOD /opt/vim_auth_check=>check_appr_usermap
*        EXPORTING
*          pi_group = lv_group
*          pi_actvt = lv_actvt
*        EXCEPTIONS
*          failed   = 1.
*      IF sy-subrc <> 0.
*        INSERT gt_usermap INTO TABLE gt_usermap_filtered.
*        DELETE gt_usermap.
*      ENDIF.
*    ENDLOOP.
*
*    IF ( NOT gt_usermap_filtered[] IS INITIAL ) OR
*       ( NOT gt_coder_filtered[] IS INITIAL ) OR
*       ( NOT gt_ncoa_filtered[] IS INITIAL ) OR             "VIMI-8064
*       ( NOT gt_level_filtered[] IS INITIAL ) OR            "VIMI-8064
*       ( NOT gt_lcoder_filtered[] IS INITIAL ) OR           "VIMI-8064
*       ( NOT gt_coa_filtered[] IS INITIAL ).
*      MESSAGE s076.
*    ENDIF.
*
*  ENDIF.
*
** end VIMI-7280
*
**  PERFORM add_counter_to_ncoa USING gt_ncoa2[].             "VIMI-16148
**  PERFORM add_counter_to_ncoa USING gt_ncoa3[].             "VIMI-16148
*
*  DATA: lv_value TYPE /ptgwfi/value.
*
*  CALL FUNCTION '/OPT/VIM_READ_CONSTANT'
*    EXPORTING
*      prod_code   = '005'
*      param_name  = 'COA_BOBJ_REPORT_TAB'
*    IMPORTING
*      param_value = lv_value
*    EXCEPTIONS
*      not_found   = 1
*      OTHERS      = 2.
*  IF sy-subrc <> 0.
** MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
**         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*  ENDIF.
*
*  MOVE lv_value TO gv_bobj_display.
* End of VIMI-23560/AMANGAPA
ENDFORM.                    " GET_DATA
*&---------------------------------------------------------------------*
*&      Form  INIT_100
*&---------------------------------------------------------------------*
FORM init_100 .
  DATA lt_excl TYPE ui_functions.
  IF g_helper IS INITIAL.
    CREATE OBJECT g_helper.
  ENDIF.
  REFRESH lt_excl.
* Begin of VIMI-3157 - 5.2 HF6 -cnicklas
  DATA: ls_excl TYPE ui_func.

  IF sy-tcode = '/OPT/VIM_7CX1_DIS'.
    MOVE 'DICH' TO ls_excl.
    APPEND ls_excl TO lt_excl.
  ENDIF.
* End of VIMI-3157 - 5.2 HF6 -cnicklas
  IF g_edit EQ space.
    SET TITLEBAR '001' WITH 'Display'(t04).
    APPEND 'SAVE' TO lt_excl.
  ELSE.
    SET TITLEBAR '001' WITH 'Maintain'(t05).
  ENDIF.

  SET PF-STATUS 'DETAILS' EXCLUDING lt_excl..

ENDFORM.                                                    "INIT_100
*&---------------------------------------------------------------------*
*&      Form  SAVE_OKCODE
*&---------------------------------------------------------------------*
FORM save_okcode .
  CHECK g_okcode NE space.
  MOVE g_okcode TO g_okcode_save.
  CLEAR g_okcode.
ENDFORM.                    " SAVE_OKCODE
*&---------------------------------------------------------------------*
*&      Form  BUILD_FIELDCAT_ALV
*&---------------------------------------------------------------------*
FORM build_fieldcat_alv  USING    p_gridname
                                  pt_fcat TYPE lvc_t_fcat
                                  p_newrows.
  DATA l_fieldcat  TYPE lvc_s_fcat.
  DATA l_tabname   TYPE tabname.
  DATA l_fieldname TYPE fieldname.
  DATA lt_dfies    TYPE dfies OCCURS 0 WITH HEADER LINE.
  DATA lt_f4       TYPE STANDARD TABLE OF lvc_s_f4.
  DATA lt_f4_i     TYPE lvc_t_f4.
  DATA l_f4        TYPE lvc_s_f4.
  DATA l_order     TYPE i.

*-- Begin of VIM 6.0 - VIMI-2215
  DATA: ls_dfies    TYPE dfies,
        lt_dropdown TYPE lvc_t_drop,
        ls_dropdown TYPE lvc_s_drop.
*-- End of VIM 6.0 - VIMI-2215
* Start of INS VIMI-9049
  DATA: lv_len   TYPE i,
        lv_tlen  TYPE numc3,
        lv_toflg TYPE char1.
  DATA: lwa_fcat TYPE lvc_s_fcat.
* End of INS VIMI-9049.
  CLEAR lt_f4.
  CASE p_gridname.
    WHEN c_fumview.
      l_fieldcat-fieldname  = 'OPT_USERID'.
      l_fieldcat-key        = 'X'.
      l_fieldcat-col_pos    = 1.
      l_fieldcat-lowercase  = space.
      l_fieldcat-reptext    = 'OpenText User Id'(n07).
      l_fieldcat-f4availabl = space.
*      l_fieldcat-outputlen  = STRLEN( l_fieldcat-reptext ).      "vimi-27028/bsreenat
      l_fieldcat-outputlen  = 45.                                 "vimi-27028/bsreenat
      APPEND l_fieldcat TO pt_fcat. CLEAR l_fieldcat.

      l_fieldcat-fieldname  = 'DELETED'.
      l_fieldcat-reptext    = 'Deleted'(n08).
      l_fieldcat-col_pos    = 2.
      l_fieldcat-outputlen  = strlen( l_fieldcat-reptext ).
      l_fieldcat-key        = 'X'.
      APPEND l_fieldcat TO pt_fcat. CLEAR l_fieldcat.

*      IF sy-repid NE '/OPT/AR_COA'.                         "VIMI-7380 "VIMI-5085
      "VIMI-5085 - For level based approval we also allow to maintain manager ID for Reminder Escalations!
      l_fieldcat-fieldname  = 'MANAGER_ID'.
      l_fieldcat-reptext   = l_fieldcat-scrtext_s =
      l_fieldcat-scrtext_m = l_fieldcat-scrtext_l =
      'Manager Id'(n09).
      l_fieldcat-col_pos    = 3.
      l_fieldcat-outputlen  = 35.
      l_fieldcat-ref_table  = '/ORS/USERMAP'.
      l_fieldcat-ref_field  = 'OPT_USERID'.
* Begin of VIMI-21723
      l_fieldcat-f4availabl = 'X'."space.
      l_fieldcat-edit = g_edit.
* End of VIMI-21723
      APPEND l_fieldcat TO pt_fcat. CLEAR l_fieldcat.
*      ENDIF.                                                "VIMI-7380 "VIMI-5085

      l_fieldcat-fieldname  = 'SAP_USER_ID'.
      l_fieldcat-reptext   = l_fieldcat-scrtext_s =
      l_fieldcat-scrtext_m = l_fieldcat-scrtext_l =
      'SAP User ID'(h01).
      APPEND l_fieldcat TO pt_fcat. CLEAR l_fieldcat.

      l_fieldcat-fieldname  = 'EP6_USER_ID'.
      l_fieldcat-reptext   = l_fieldcat-scrtext_s =
      l_fieldcat-scrtext_m = l_fieldcat-scrtext_l =
      'SAP Portal User ID'(h02).
      APPEND l_fieldcat TO pt_fcat. CLEAR l_fieldcat.

*-- Begin of VIM 6.0 - VIMI-2215
*-- Bulk approval type text
      CALL FUNCTION 'DDIF_FIELDINFO_GET'
        EXPORTING
          tabname        = '/OPT/BL_USERMAP_ST'
          fieldname      = 'BTEXT'
          langu          = sy-langu
          lfieldname     = 'BTEXT'
        IMPORTING
          dfies_wa       = ls_dfies
        EXCEPTIONS
          not_found      = 1
          internal_error = 2
          OTHERS         = 3.
      IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.

      MOVE-CORRESPONDING ls_dfies TO l_fieldcat.
      l_fieldcat-col_pos = '4'.
      l_fieldcat-drdn_hndl = '1'.
      APPEND l_fieldcat TO pt_fcat. CLEAR l_fieldcat.

*-- Drop down for Bulk approval type
      LOOP AT gt_values_b INTO gs_values_b.
        ls_dropdown-handle = 1.
        IF gs_values_b-domvalue_l = ' '.
          CONCATENATE 'N' '-'
                      gs_values_b-ddtext INTO ls_dropdown-value.
        ELSE.
          CONCATENATE gs_values_b-domvalue_l '-'
                      gs_values_b-ddtext INTO ls_dropdown-value.
        ENDIF.
        APPEND ls_dropdown TO lt_dropdown.
      ENDLOOP.

*-- User Type text field
      CLEAR ls_dfies.
      CALL FUNCTION 'DDIF_FIELDINFO_GET'
        EXPORTING
          tabname        = '/OPT/BL_USERMAP_ST'
          fieldname      = 'UTEXT'
          langu          = sy-langu
          lfieldname     = 'UTEXT'
        IMPORTING
          dfies_wa       = ls_dfies
        EXCEPTIONS
          not_found      = 1
          internal_error = 2
          OTHERS         = 3.
      IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.

      MOVE-CORRESPONDING ls_dfies TO l_fieldcat.
      l_fieldcat-col_pos = '5'.
      l_fieldcat-drdn_hndl = '2'.
      APPEND l_fieldcat TO pt_fcat. CLEAR l_fieldcat.

*-- Drop down for User type field
      CLEAR gs_values.
      LOOP AT gt_values INTO gs_values.
        ls_dropdown-handle = 2.
        IF gs_values-domvalue_l = ' '.
          CONCATENATE 'A' '-'
                      gs_values-ddtext INTO ls_dropdown-value.
        ELSE.
          CONCATENATE gs_values-domvalue_l '-'
                      gs_values-ddtext INTO ls_dropdown-value.
        ENDIF.
        APPEND ls_dropdown TO lt_dropdown.
      ENDLOOP.

      CALL METHOD g_grid->set_drop_down_table
        EXPORTING
          it_drop_down = lt_dropdown.
*-- End of VIM 6.0 - VIMI-2215

      CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
        EXPORTING
          i_structure_name = '/ORS/USERMAP_STRUCTURE'
        CHANGING
          ct_fieldcat      = pt_fcat
        EXCEPTIONS
          OTHERS           = 0.

      LOOP AT pt_fcat INTO l_fieldcat.
        g_tabix = sy-tabix.
        CASE l_fieldcat-fieldname.
          WHEN 'OPT_USERID'.
            l_fieldcat-key = 'X'.
          WHEN 'DELETED'.
            l_fieldcat-checkbox = 'X'.
          WHEN 'EMAIL'.
            l_fieldcat-edit    = g_edit.
            l_fieldcat-reptext = 'Email Address'(n10).
          WHEN 'MANAGER_ID'.
            l_fieldcat-edit    = g_edit.
*-- Start of VIM 6.0 - VIMI-2215
          WHEN 'BULKAPPROVAL'.
            l_fieldcat-no_out = 'X'.
          WHEN 'BTEXT'.
            l_fieldcat-edit    = g_edit.
            l_fieldcat-outputlen = 25.
          WHEN 'USER_TYPE'.
            l_fieldcat-no_out = 'X'.
          WHEN 'UTEXT'.
            l_fieldcat-edit    = g_edit.
            IF gv_bobj_display IS INITIAL.
              l_fieldcat-no_out = 'X'.
            ENDIF.
*-- End of VIM 6.0 - VIMI-2215
          WHEN OTHERS.
            READ TABLE gt_402 WITH KEY fieldname = l_fieldcat-fieldname.
            IF sy-subrc NE 0.
              DELETE pt_fcat INDEX g_tabix.
              CONTINUE.
            ENDIF.
            l_fieldcat-edit = g_edit.
            IF gt_402-title NE space.
              l_fieldcat-reptext   = l_fieldcat-scrtext_s =
              l_fieldcat-scrtext_m = l_fieldcat-scrtext_l =
              gt_402-title.
            ENDIF.
        ENDCASE.
        MODIFY pt_fcat FROM l_fieldcat INDEX g_tabix.
      ENDLOOP.
* Begin of VIMI-21723
      IF sy-repid = '/OPT/AR_COA'.
        l_f4-fieldname  = 'MANAGER_ID'.
        l_f4-register   = 'X'.
        l_f4-getbefore  = space.
        l_f4-chngeafter = space.
        APPEND l_f4 TO lt_f4.
        CLEAR l_f4.
      ENDIF.
* End of VIMI-21723
    WHEN c_fcoaview.
* Start of INS VIMI-7380
      IF sy-repid = '/OPT/AR_COA'.
        CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
          EXPORTING
            i_structure_name = '/OPT/APPR_COA'
          CHANGING
            ct_fieldcat      = pt_fcat
          EXCEPTIONS
            OTHERS           = 0.
        LOOP AT pt_fcat INTO l_fieldcat.
          g_tabix = sy-tabix.
          CLEAR: lv_toflg,
                 lv_len.
          CASE l_fieldcat-fieldname.
            WHEN 'COMP_CODE'.
              l_fieldcat-edit = g_edit.
            WHEN 'APPR_LEVEL'.
              l_fieldcat-no_out = 'X'.
            WHEN 'OPT_USERID'.
              l_fieldcat-edit = g_edit.
            WHEN 'COUNTER'.
*              l_fieldcat-edit = g_edit.
            WHEN 'DEFAULT_FLAG'.
* Start of INS VIMI-9049
              IF sy-repid = '/OPT/AR_COA'.
                l_fieldcat-no_out = 'X'.
              ELSE.
* End of INS VIMI-9049
                l_fieldcat-checkbox = 'X'.
                l_fieldcat-edit = g_edit.
              ENDIF.                                        "VIMI-9049
* begin VIMI-9285
            WHEN 'OTYPE' OR 'ACTORID'.
              IF /opt/vim_iap_orgunits=>is_active( ) IS INITIAL.
                l_fieldcat-no_out = 'X'.
              ENDIF.
* Begin of VIMI-21723
*            WHEN  'EXPENSE_TYPE' OR 'EXPENSE_TYPE2'.       "VIMI_23109
*              l_fieldcat-edit = g_edit.                    "VIMI_23109
* End of VIMI-21723
* end VIMI-9285
            WHEN OTHERS.
              READ TABLE gt_401 WITH KEY fieldname = l_fieldcat-fieldname.
              IF sy-subrc NE 0.
* Start of INS VIMI-9049
                IF sy-repid = '/OPT/AR_COA'.
                  lv_len = strlen( l_fieldcat-fieldname ).
                  lv_len = lv_len - 1.
                  READ TABLE gt_401 WITH KEY fieldname = l_fieldcat-fieldname(lv_len).
                  IF sy-subrc = 0 AND
                     gt_401-ranges = 'X'.
                    lv_toflg = 'X'.
                    IF ( l_fieldcat-fieldname = 'BUKRS' OR
                         l_fieldcat-fieldname = 'EXPENSE_TYPE' OR
                         l_fieldcat-fieldname = 'BUKRS2' OR "VIMI-9527
                         l_fieldcat-fieldname = 'EXPENSE_TYPE2'). "VIMI-9527
                      DELETE pt_fcat INDEX g_tabix.
                      CONTINUE.
                    ENDIF.
                    l_fieldcat-edit = g_edit.
                    IF NOT gt_401-seq_id IS INITIAL.
                      l_fieldcat-col_pos = ( 6 + gt_401-seq_id ).
                    ENDIF.
                  ELSE.
                    DELETE pt_fcat INDEX g_tabix.
                    CONTINUE.
                  ENDIF.
                ELSE.
* End of INS VIMI-9049
                  DELETE pt_fcat INDEX g_tabix.
                  CONTINUE.
                ENDIF.                                      "VIMI-9049
              ELSE.
* begin VIMI-11431
*                IF ( l_fieldcat-fieldname = 'BUKRS' OR
*                   l_fieldcat-fieldname = 'EXPENSE_TYPE' ).
                IF ( l_fieldcat-fieldname = 'BUKRS' OR
                     ( l_fieldcat-fieldname = 'EXPENSE_TYPE' AND  sy-repid <> '/OPT/AR_COA' ) ).
* end VIMI-11431
                  DELETE pt_fcat INDEX g_tabix.
                  CONTINUE.
                ENDIF.
                l_fieldcat-edit = g_edit.
                IF NOT gt_401-seq_id IS INITIAL.
                  l_fieldcat-col_pos = ( 6 + gt_401-seq_id ).
                ENDIF.
              ENDIF.
              IF gt_401-title NE space.
                l_fieldcat-reptext   = l_fieldcat-scrtext_s =
                l_fieldcat-scrtext_m = l_fieldcat-scrtext_l =
                gt_401-title.
              ENDIF.
* Start of INS VIMI-9049
*              IF gt_401-ranges = 'X'.                                                  "VIMI-25938/bsreenat
              IF gt_401-ranges = 'X' AND l_fieldcat-fieldname NE 'EXPENSE_TYPE'.        "VIMI-25938/bsreenat
                IF lv_toflg = 'X'.
                  PERFORM change_text USING TEXT-t20
                                   CHANGING l_fieldcat-reptext.
                  PERFORM change_text USING TEXT-t20
                                   CHANGING l_fieldcat-scrtext_s.
                  PERFORM change_text USING TEXT-t20
                                   CHANGING l_fieldcat-scrtext_m.
                  PERFORM change_text USING TEXT-t20
                                   CHANGING l_fieldcat-scrtext_l.
                ELSE.
                  PERFORM change_text USING TEXT-t19
                                   CHANGING l_fieldcat-reptext.
                  PERFORM change_text USING TEXT-t19
                                   CHANGING l_fieldcat-scrtext_s.
                  PERFORM change_text USING TEXT-t19
                                   CHANGING l_fieldcat-scrtext_m.
                  PERFORM change_text USING TEXT-t19
                                   CHANGING l_fieldcat-scrtext_l.
                ENDIF.
              ENDIF.
* End of INS VIMI-9049
              IF NOT gt_401-shlpname IS INITIAL.
                l_fieldcat-f4availabl = 'X'.
                l_f4-fieldname  = l_fieldcat-fieldname.
                l_f4-register   = 'X'.
                l_f4-getbefore  = 'X'.
                l_f4-chngeafter = 'X'.
                APPEND l_f4 TO lt_f4. CLEAR l_f4.
              ENDIF.
          ENDCASE.
          lv_tlen = strlen( l_fieldcat-scrtext_m ).         " VIMI-9049
          l_fieldcat-outputlen = lv_tlen.                   " VIMI-9049
          MODIFY pt_fcat FROM l_fieldcat INDEX g_tabix.
          CLEAR l_fieldcat.
        ENDLOOP.
* Start of INS VIMI-9049.
        CLEAR: ls_dfies,
               lwa_fcat,
               l_fieldcat.
        CALL FUNCTION 'DDIF_FIELDINFO_GET'
          EXPORTING
            tabname        = '/OPT/AT_LEVELT'
            fieldname      = 'DESCR'
            langu          = sy-langu
            lfieldname     = 'DESCR'
          IMPORTING
            dfies_wa       = ls_dfies
          EXCEPTIONS
            not_found      = 1
            internal_error = 2
            OTHERS         = 3.
        IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
        ENDIF.

        MOVE-CORRESPONDING ls_dfies TO l_fieldcat.
        READ TABLE pt_fcat INTO lwa_fcat WITH KEY  fieldname = 'APPR_LEVEL'.
        IF sy-subrc = 0.
          l_fieldcat-scrtext_s = lwa_fcat-scrtext_s.
          l_fieldcat-scrtext_m = lwa_fcat-scrtext_m.
          l_fieldcat-scrtext_l = lwa_fcat-scrtext_l.
          l_fieldcat-reptext   = lwa_fcat-reptext.
        ENDIF.

        l_fieldcat-edit      = g_edit.
        l_fieldcat-col_pos   = '2'.
        l_fieldcat-drdn_hndl = '1'.
        l_fieldcat-outputlen = '30'.
        APPEND l_fieldcat TO pt_fcat.
        CLEAR l_fieldcat.
*   VIMI-16148
        l_fieldcat-row_pos = '0'.
        l_fieldcat-col_pos   = '1'.
        l_fieldcat-fieldname = 'LINE_NO'.
        l_fieldcat-tabname = '1'.
        l_fieldcat-key = 'X'.
        l_fieldcat-datatype = 'INT4'.
        l_fieldcat-inttype = '1'.
        l_fieldcat-reptext = 'No'.
        l_fieldcat-edit      = abap_false.
        l_fieldcat-outputlen = '6'.
        APPEND l_fieldcat TO pt_fcat.
        CLEAR l_fieldcat.
* end of VIMI-16148

        LOOP AT gt_lvltxt INTO gs_lvltxt.
          IF sy-dynnr = '0124' AND
             gs_lvltxt-appr_level LE 1.
            CONTINUE.
          ELSEIF sy-dynnr = '0123' AND
             gs_lvltxt-appr_level GT 1.
            CONTINUE.
          ENDIF.
          ls_dropdown-handle = 1.
          CONCATENATE gs_lvltxt-appr_level
                      '-'
                      gs_lvltxt-descr
                 INTO ls_dropdown-value
            SEPARATED BY space.
          APPEND ls_dropdown TO lt_dropdown.
          CLEAR ls_dropdown.
        ENDLOOP.

        CALL METHOD g_grid->set_drop_down_table
          EXPORTING
            it_drop_down = lt_dropdown.
* End of INS VIMI-9049.
        DELETE ADJACENT DUPLICATES FROM pt_fcat COMPARING fieldname.
        l_f4-fieldname  = 'OPT_USERID'.
        l_f4-register   = 'X'.
* Begin of VIMI-21473
*        l_f4-getbefore  = 'X'.
*        l_f4-chngeafter = 'X'.
        l_f4-getbefore  = space.
        l_f4-chngeafter = space.
*End of VIMI-21473
        APPEND l_f4 TO lt_f4. CLEAR l_f4.
* Begin of VIMI-21723
        l_f4-fieldname  = 'EXPENSE_TYPE'.
        l_f4-register   = 'X'.
        l_f4-getbefore  = space.
        l_f4-chngeafter = space.
        APPEND l_f4 TO lt_f4. CLEAR l_f4.
        l_f4-fieldname  = 'EXPENSE_TYPE2'.
        l_f4-register   = 'X'.
        l_f4-getbefore  = space.
        l_f4-chngeafter = space.
        APPEND l_f4 TO lt_f4. CLEAR l_f4.
*End of VIMI-21723
      ELSE.
* End of INS VIMI-7380
        CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
          EXPORTING
            i_structure_name = '/OPT/BL_APPCOA'
          CHANGING
            ct_fieldcat      = pt_fcat
          EXCEPTIONS
            OTHERS           = 0.
        LOOP AT pt_fcat INTO l_fieldcat.
          g_tabix = sy-tabix.
          CASE l_fieldcat-fieldname.
            WHEN 'OPT_USERID'.
              IF p_newrows NE space.
                l_fieldcat-edit = g_edit.
              ENDIF.
* Begin of VIMI-8175
              IF p_newrows IS INITIAL.
                CLEAR: l_fieldcat-ref_table ,
                       l_fieldcat-domname.
              ENDIF.
* End of VIMI-8175
              l_fieldcat-key        = 'X'.
              l_fieldcat-lowercase  = space.
            WHEN 'COUNTER'.
              IF p_newrows EQ space.
                l_fieldcat-key    = 'X'.
              ELSE.
                l_fieldcat-no_out = 'X'.
              ENDIF.
            WHEN 'CURRENCY'.
              l_fieldcat-ref_table  = 'TCURC'.
              l_fieldcat-ref_field  = 'WAERS'.
              l_fieldcat-edit = g_edit.
            WHEN 'APPROVAL_LIMIT'.
              l_fieldcat-edit = g_edit.
            WHEN OTHERS.
              READ TABLE gt_401 WITH KEY fieldname = l_fieldcat-fieldname.
              IF sy-subrc NE 0.
                DELETE pt_fcat INDEX g_tabix.
                CONTINUE.
              ELSE.
                l_fieldcat-edit = g_edit.
*-- Start for SP1
*-- Column position
                IF NOT gt_401-seq_id IS INITIAL.
                  l_fieldcat-col_pos = ( 4 + gt_401-seq_id ).
                ENDIF.
*-- End for SP1
                IF gt_401-title NE space.
                  l_fieldcat-reptext   = l_fieldcat-scrtext_s =
                  l_fieldcat-scrtext_m = l_fieldcat-scrtext_l =
                  gt_401-title.
                ENDIF.
*-- start VIMI-5094
                IF NOT gt_401-shlpname IS INITIAL.
                  l_fieldcat-f4availabl = 'X'.
                  l_f4-fieldname  = l_fieldcat-fieldname.
                  l_f4-register   = 'X'.
                  l_f4-getbefore  = 'X'.
                  l_f4-chngeafter = 'X'.
                  APPEND l_f4 TO lt_f4. CLEAR l_f4.
                ENDIF.
*-- end VIMI-5094
              ENDIF.
          ENDCASE.
          MODIFY pt_fcat FROM l_fieldcat INDEX g_tabix.
          CLEAR l_fieldcat.
        ENDLOOP.
        l_f4-fieldname  = 'OPT_USERID'.
        l_f4-register   = 'X'.
        l_f4-getbefore  = 'X'.
        l_f4-chngeafter = 'X'.
        APPEND l_f4 TO lt_f4. CLEAR l_f4.
      ENDIF.                                                "VIMI-7380
    WHEN c_fcoderview.
* Begin of VIMI-9049
      IF sy-repid EQ '/OPT/AR_COA'
         AND p_newrows IS INITIAL.
        CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
          EXPORTING
            i_structure_name = '/OPT/AFS_CODER'
          CHANGING
            ct_fieldcat      = pt_fcat
          EXCEPTIONS
            OTHERS           = 0.
        DELETE pt_fcat WHERE fieldname = 'AFS_ID'.
      ELSE.
* End of VIMI-9049
        CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
          EXPORTING
            i_structure_name = '/OPT/BL_AP_CODER'
          CHANGING
            ct_fieldcat      = pt_fcat
          EXCEPTIONS
            OTHERS           = 0.
      ENDIF.                                                "VIMI-9049
      LOOP AT pt_fcat INTO l_fieldcat.
        g_tabix = sy-tabix.
        CASE l_fieldcat-fieldname.
          WHEN 'CODER_ID'.
            IF p_newrows NE space.
              l_fieldcat-edit = g_edit.
            ENDIF.
            IF sy-repid = '/OPT/AR_COA'.                    "VIMI-9049
              l_fieldcat-edit = g_edit.                     "VIMI-9049
            ENDIF.                                          "VIMI-9049
* Begin of VIMI-8175
            IF p_newrows IS INITIAL.
              CLEAR: l_fieldcat-ref_table ,
                     l_fieldcat-domname.
            ENDIF.
* End of VIMI-8175
            l_fieldcat-key        = 'X'.
            l_fieldcat-lowercase  = space.
            IF sy-repid EQ '/OPT/AR_COA'.
*               AND p_newrows IS INITIAL.
              l_fieldcat-outputlen = 15.                    " VIMI-9049
              l_fieldcat-col_pos = '5'.                     " VIMI-9049
            ENDIF.
          WHEN 'COUNTER'.
            IF p_newrows EQ space.
              l_fieldcat-key    = 'X'.
            ELSE.
              l_fieldcat-no_out = 'X'.
            ENDIF.
            IF sy-repid EQ '/OPT/AR_COA'
               AND p_newrows IS INITIAL.
              l_fieldcat-outputlen = 10.                    " VIMI-9049
              l_fieldcat-col_pos = '4'.                     " VIMI-9049
            ENDIF.
          WHEN 'DEFAULT_FLAG'.
            l_fieldcat-checkbox = 'X'.
            l_fieldcat-edit = g_edit.
            IF sy-repid EQ '/OPT/AR_COA'
               AND p_newrows IS INITIAL.
              l_fieldcat-outputlen = 10.                    " VIMI-9049
              l_fieldcat-col_pos = '3'.                     " VIMI-9049
            ENDIF.
* begin VIMI-9285
          WHEN 'CODER_OTYPE' OR 'CODER_ACTORID' OR
               'REQ_OTYPE'   OR 'REQ_ACTORID'.
            IF /opt/vim_iap_orgunits=>is_active( ) IS INITIAL.
              l_fieldcat-no_out = 'X'.
            ENDIF.
* end VIMI-9285
* BEGIN of VIMI-9049
          WHEN 'REQUESTOR_ID'.
            IF sy-repid = '/OPT/AR_COA' AND
               NOT p_newrows IS INITIAL.
              l_fieldcat-col_pos = '1'.
              l_fieldcat-edit = g_edit.
            ELSE.
              l_fieldcat-edit = g_edit.
            ENDIF.
            IF p_newrows NE space.
              l_fieldcat-edit = g_edit.
            ENDIF.
          WHEN 'REQUESTER_ID'.
*            IF p_newrows NE space.
            IF sy-repid NE '/OPT/AR_COA'.                   "VIMI-9049
              l_fieldcat-edit = g_edit.
            ENDIF.                                          "VIMI-9049
*            ENDIF.
            l_fieldcat-scrtext_s   = l_fieldcat-reptext = l_fieldcat-scrtext_m
            = l_fieldcat-scrtext_l =  l_fieldcat-tooltip = TEXT-t21.
            l_fieldcat-outputlen = 15.
            l_fieldcat-col_pos = '1'.
            IF p_newrows NE space.
              l_fieldcat-edit = g_edit.
            ENDIF.
          WHEN 'COMPANY_CODE'.
            IF sy-repid EQ '/OPT/AR_COA'.
              l_fieldcat-outputlen = 10.
              l_fieldcat-col_pos = '2'.
*              l_fieldcat-edit = g_edit.
            ENDIF.
            IF p_newrows NE space.
              l_fieldcat-edit = g_edit.
            ENDIF.
* End of VIMI-9049
          WHEN OTHERS.
            l_fieldcat-edit = g_edit.
        ENDCASE.
        MODIFY pt_fcat FROM l_fieldcat INDEX g_tabix.
      ENDLOOP.
*-- Based on the config in constant table for constant
*-- CODER_DETERMING and prodcode 'IAP', fields Company code &
*-- Requestor are available for maintenance
      IF g_constant = 'R'. " no company code
        DELETE pt_fcat WHERE fieldname = 'COMPANY_CODE'.
      ELSEIF g_constant = 'C'. "no requestor
* Begin of VIMI-9049
        IF sy-repid EQ '/OPT/AR_COA'
           AND p_newrows IS INITIAL.
          DELETE pt_fcat WHERE fieldname = 'REQUESTER_ID'.
        ELSE.
* End of VIMI-9049
          DELETE pt_fcat WHERE fieldname = 'REQUESTOR_ID'.
        ENDIF.
      ENDIF.

      l_f4-fieldname  = 'CODER_ID'.
      l_f4-register   = 'X'.
      l_f4-getbefore  = 'X'.
      l_f4-chngeafter = 'X'.
      APPEND l_f4 TO lt_f4. CLEAR l_f4.
** Start of INS VIMI-9049
*      IF sy-repid EQ '/OPT/AR_COA'
*            AND g_constant = 'R'.
*        l_f4-fieldname  = 'REQUESTER_ID'.
*        l_f4-register   = 'X'.
*        l_f4-getbefore  = 'X'.
*        l_f4-chngeafter = 'X'.
*        APPEND l_f4 TO lt_f4. CLEAR l_f4.
*      ENDIF.
** End of INS VIMI-9049
*-- Start VIM 6.0
    WHEN c_freportview.

      CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
        EXPORTING
          i_structure_name = '/OPT/BL_RPT_AUTH'
        CHANGING
          ct_fieldcat      = pt_fcat
        EXCEPTIONS
          OTHERS           = 0.

      LOOP AT pt_fcat INTO l_fieldcat.
        g_tabix = sy-tabix.
        CASE l_fieldcat-fieldname.
          WHEN 'USERID'.
            l_fieldcat-edit = g_edit.
            l_fieldcat-key        = 'X'.
            l_fieldcat-lowercase  = space.
          WHEN 'COUNTER'.
*            IF p_newrows EQ space.
            l_fieldcat-key    = 'X'.
*            ELSE.
            l_fieldcat-no_out = 'X'.
*            ENDIF.
          WHEN OTHERS.
            l_fieldcat-edit = g_edit.
        ENDCASE.
        MODIFY pt_fcat FROM l_fieldcat INDEX g_tabix.
      ENDLOOP.
*-- End VIM 6.0
* Start of INS VIMI-7380
    WHEN c_applevel.
*-- Header based Limit check
      DATA: lv_text TYPE as4text.

      CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
        EXPORTING
          i_structure_name = '/OPT/APPR_LIMIT'
        CHANGING
          ct_fieldcat      = pt_fcat
        EXCEPTIONS
          OTHERS           = 0.

      LOOP AT pt_fcat INTO l_fieldcat.
        g_tabix = sy-tabix.
        l_fieldcat-edit = g_edit.
*        CLEAR l_fieldcat-key.
*        IF l_fieldcat-fieldname = 'EXPENSE_TYPE'.
*          READ TABLE gt_401 WITH KEY fieldname = l_fieldcat-fieldname.
*          IF sy-subrc = 0.
*            IF NOT gt_401-shlpname IS INITIAL.
*              l_fieldcat-f4availabl = 'X'.
*              l_f4-fieldname  = l_fieldcat-fieldname.
*              l_f4-register   = 'X'.
*              l_f4-getbefore  = 'X'.
*              l_f4-chngeafter = 'X'.
*              APPEND l_f4 TO lt_f4. CLEAR l_f4.
*            ENDIF.
*          ENDIF.
*        ENDIF.
* Start of INS VIMI-9049
        IF l_fieldcat-fieldname = 'EXPENSE_TYPE'.
          l_fieldcat-no_out = 'X'.
        ENDIF.
* End of INS VIMI-9049
        IF l_fieldcat-col_pos GE '7'.
          l_fieldcat-col_pos = l_fieldcat-col_pos + 1.
        ENDIF.
        IF l_fieldcat-fieldname = 'HEAD_LIMIT_CHK'.
          l_fieldcat-no_out = 'X'.
        ENDIF.

        CLEAR lv_text.
        IF l_fieldcat-fieldname = 'APPROVAL_LIMIT'.
          SELECT SINGLE ddtext
                   FROM dd04t
                   INTO lv_text
                  WHERE rollname = 'GRZBTR'
                    AND ddlanguage = sy-langu
                    AND as4local   = 'A'
                    AND as4vers    = '0000'.
          IF sy-subrc = 0.
*            l_fieldcat-scrtext_s = lv_text. VIMI-9049
            l_fieldcat-scrtext_s = l_fieldcat-reptext = l_fieldcat-scrtext_m
            = l_fieldcat-scrtext_l =  l_fieldcat-tooltip = lv_text. " VIMI-9049
          ENDIF.
          l_fieldcat-outputlen = 13.                        " VIMI-9049
        ENDIF.

        CLEAR lv_text.
        IF l_fieldcat-fieldname = 'ADD_PACK_LIMIT'.
          SELECT SINGLE ddtext
                   FROM dd04t
                   INTO lv_text
                  WHERE rollname = 'BSIADAMONT'
                    AND ddlanguage = sy-langu
                    AND as4local   = 'A'
                    AND as4vers    = '0000'.
          IF sy-subrc = 0.
            l_fieldcat-scrtext_s = lv_text.
          ENDIF.
          l_fieldcat-outputlen = 16.                        " VIMI-9049
        ENDIF.
* Begin of VIMI-9049
        IF l_fieldcat-fieldname = 'DETAILS'.
          l_fieldcat-scrtext_s   = l_fieldcat-reptext = l_fieldcat-scrtext_m
          = l_fieldcat-scrtext_l =  l_fieldcat-tooltip = l_fieldcat-scrtext_l.
          l_fieldcat-outputlen = 12.
        ENDIF.
        CLEAR lv_text.
        IF l_fieldcat-fieldname = 'BUKRS'.
          l_fieldcat-outputlen = 10.
        ENDIF.

        IF l_fieldcat-fieldname = 'APPR_LEVEL'.
          l_fieldcat-no_out = 'X'.
        ENDIF.
* End of INS VIMI-9049
        MODIFY pt_fcat FROM l_fieldcat INDEX g_tabix.
        CLEAR l_fieldcat.
      ENDLOOP.

      CLEAR ls_dfies.

      LOOP AT gt_values_h INTO gs_values_h.
        ls_dropdown-handle = 1.
        CONCATENATE gs_values_h-domvalue_l '-'
                    gs_values_h-ddtext
               INTO ls_dropdown-value.
        APPEND ls_dropdown TO lt_dropdown.
        CLEAR ls_dropdown.
      ENDLOOP.

      LOOP AT gt_extype INTO gs_extype.
        ls_dropdown-handle = 2.
        IF gs_extype-expense_type IS INITIAL.
          ls_dropdown-value = gs_extype-expense_desc.
        ELSE.
          CONCATENATE gs_extype-expense_type
                      '-'
                      gs_extype-expense_desc
                 INTO ls_dropdown-value
            SEPARATED BY space.
        ENDIF.
        APPEND ls_dropdown TO lt_dropdown.
        CLEAR ls_dropdown.
      ENDLOOP.

      LOOP AT gt_lvltxt INTO gs_lvltxt.
        ls_dropdown-handle = 3.
        CONCATENATE gs_lvltxt-appr_level
                    '-'
                    gs_lvltxt-descr
               INTO ls_dropdown-value
          SEPARATED BY space.
        APPEND ls_dropdown TO lt_dropdown.
        CLEAR ls_dropdown.
      ENDLOOP.

      CALL METHOD g_grid->set_drop_down_table
        EXPORTING
          it_drop_down = lt_dropdown.

      CALL FUNCTION 'DDIF_FIELDINFO_GET'
        EXPORTING
          tabname        = '/OPT/BL_USERMAP_ST'
          fieldname      = 'BTEXT'
          langu          = sy-langu
          lfieldname     = 'BTEXT'
        IMPORTING
          dfies_wa       = ls_dfies
        EXCEPTIONS
          not_found      = 1
          internal_error = 2
          OTHERS         = 3.
      IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.

      MOVE-CORRESPONDING ls_dfies TO l_fieldcat.
      l_fieldcat-scrtext_s = l_fieldcat-scrtext_m
                           = l_fieldcat-scrtext_l
                           = l_fieldcat-reptext
                           = TEXT-t16.

      l_fieldcat-edit = g_edit.
      l_fieldcat-col_pos = '6'.
      l_fieldcat-drdn_hndl = '1'.
      l_fieldcat-outputlen = '15'.
      APPEND l_fieldcat TO pt_fcat.
      CLEAR l_fieldcat.

      CLEAR: ls_dfies,
             lwa_fcat.
      CALL FUNCTION 'DDIF_FIELDINFO_GET'
        EXPORTING
          tabname        = '/ORS/EXPENSE_DEC'
          fieldname      = 'EXPENSE_DESC'
          langu          = sy-langu
          lfieldname     = 'EXPENSE_DESC'
        IMPORTING
          dfies_wa       = ls_dfies
        EXCEPTIONS
          not_found      = 1
          internal_error = 2
          OTHERS         = 3.
      IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.

      MOVE-CORRESPONDING ls_dfies TO l_fieldcat.
      READ TABLE pt_fcat INTO lwa_fcat WITH KEY  fieldname = 'EXPENSE_TYPE'.
      IF sy-subrc = 0.
        l_fieldcat-scrtext_s = lwa_fcat-scrtext_s.
        l_fieldcat-scrtext_m = lwa_fcat-scrtext_m.
        l_fieldcat-scrtext_l = lwa_fcat-scrtext_l.
        l_fieldcat-reptext   = lwa_fcat-reptext.
      ENDIF.

      l_fieldcat-fieldname = 'EXTXT'.
      l_fieldcat-edit      = g_edit.
      l_fieldcat-col_pos   = '2'.
      l_fieldcat-drdn_hndl = '2'.
      l_fieldcat-outputlen = '30'.
      APPEND l_fieldcat TO pt_fcat.
      CLEAR l_fieldcat.

      CLEAR: ls_dfies,
             lwa_fcat.
      CALL FUNCTION 'DDIF_FIELDINFO_GET'
        EXPORTING
          tabname        = '/OPT/AT_LEVELT'
          fieldname      = 'DESCR'
          langu          = sy-langu
          lfieldname     = 'DESCR'
        IMPORTING
          dfies_wa       = ls_dfies
        EXCEPTIONS
          not_found      = 1
          internal_error = 2
          OTHERS         = 3.
      IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.

      MOVE-CORRESPONDING ls_dfies TO l_fieldcat.
      READ TABLE pt_fcat INTO lwa_fcat WITH KEY  fieldname = 'APPR_LEVEL'.
      IF sy-subrc = 0.
        l_fieldcat-scrtext_s = lwa_fcat-scrtext_s.
        l_fieldcat-scrtext_m = lwa_fcat-scrtext_m.
        l_fieldcat-scrtext_l = lwa_fcat-scrtext_l.
        l_fieldcat-reptext   = lwa_fcat-reptext.
      ENDIF.

      l_fieldcat-edit      = g_edit.
      l_fieldcat-col_pos   = '3'.
      l_fieldcat-drdn_hndl = '3'.
      l_fieldcat-outputlen = '30'.
      APPEND l_fieldcat TO pt_fcat.
      CLEAR l_fieldcat.

      l_f4-fieldname  = 'BTEXT'.
      l_f4-register   = 'X'.
      l_f4-getbefore  = 'X'.
      l_f4-chngeafter = 'X'.
      APPEND l_f4 TO lt_f4. CLEAR l_f4.

*      l_f4-fieldname  = 'EXPENSE_TYPE'.
*      l_f4-register   = 'X'.
*      l_f4-getbefore  = 'X'.
*      l_f4-chngeafter = 'X'.
*      APPEND l_f4 TO lt_f4. CLEAR l_f4.

* End of INS VIMI-7380
    WHEN OTHERS.
  ENDCASE.

  IF NOT lt_f4[] IS INITIAL.
    CLEAR lt_f4_i.
    SORT lt_f4.
    APPEND LINES OF lt_f4 TO lt_f4_i.
    CALL METHOD g_grid->register_f4_for_fields
      EXPORTING
        it_f4 = lt_f4_i.
  ENDIF.
* Start of INS VIMI-7380
  IF sy-repid = '/OPT/AR_COA'.
    CLEAR gt_fcat.
    gt_fcat = pt_fcat.
  ENDIF.
* End of INS VIMI-7380
ENDFORM.                    " BUILD_FIELDCAT_ALV
*&--------------------------------------------------------------------*
*&      Form  FREE_OBJECTS
*&--------------------------------------------------------------------*
FORM free_objects.
  IF NOT g_grid IS INITIAL.
    CALL METHOD g_grid->free( ).
    CLEAR g_grid.
  ENDIF.
  IF NOT g_cgrid IS INITIAL.
    CALL METHOD g_cgrid->free( ).
    CLEAR g_cgrid.
  ENDIF.
  CLEAR g_evt_grid.
  IF NOT g_gridnew IS INITIAL.
    CALL METHOD g_gridnew->free( ).
    CLEAR g_gridnew.
  ENDIF.
  IF NOT g_cgridnew IS INITIAL.
    CALL METHOD g_cgridnew->free( ).
    CLEAR g_cgridnew.
  ENDIF.
  CLEAR g_evt_new.

  CALL METHOD cl_gui_cfw=>flush( ).
ENDFORM.                    "FREE_OBJECTS
*&---------------------------------------------------------------------*
*&      Form  INIT_110
*&---------------------------------------------------------------------*
FORM init_110 .
  DATA lt_fieldcat TYPE lvc_t_fcat.
  DATA ls_layout   TYPE lvc_s_layo.
  DATA lt_sort     TYPE lvc_t_sort WITH HEADER LINE.
  DATA l_row       TYPE lvc_s_roid.
  DATA l_length    TYPE i.
* Begin of VIMI-2650 - 5.2 HF6 -cnicklas
  DATA ls_variant  TYPE disvariant.
* Begin of VIMI-2650 - 5.2 HF6 -cnicklas

  DATA: lv_tabix TYPE sy-tabix. " 6.0 - VIMI-2215

  CHECK g_cgrid IS INITIAL.

  DESCRIBE TABLE gt_usermap LINES l_length.
  IF l_length LT 15.
    l_length = 15.
  ENDIF.

  PERFORM initialize_grid USING l_length.

  g_evt_grid->gridname = c_fumview.

*-- Begin of VIM 6.0 - VIMI-2215
  CLEAR: gt_values_b, gs_values_b, gt_values, gs_values.

*-- Domain values for User type
  CALL FUNCTION 'DDUT_DOMVALUES_GET'
    EXPORTING
      name          = '/OPT/USER_TYPE_DO'
      langu         = sy-langu
    TABLES
      dd07v_tab     = gt_values
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

*-- Domain values for Bulk approval type
  CALL FUNCTION 'DDUT_DOMVALUES_GET'
    EXPORTING
      name          = '/OPT/ABULK_APPR_TYPE_DO'
      langu         = sy-langu
    TABLES
      dd07v_tab     = gt_values_b
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.
*-- End of VIM 6.0 - VIMI-2215

  CALL METHOD g_helper->get_fieldcat
    EXPORTING
      i_gridname = c_fumview
    IMPORTING
      t_fcat     = lt_fieldcat.

  ls_layout-grid_title = TEXT-t01.
  ls_layout-cwidth_opt = 'X'.

*Begin of D-VIMI-13918
*  lt_sort-fieldname = 'OPT_USERID'.
*  lt_sort-up        = 'X'.
*  APPEND lt_sort.
*End of D-VIMI-13918

*-- Begin of VIM 6.0 - VIMI-2215
  LOOP AT gt_usermap.
    lv_tabix = sy-tabix.

*-- User type text
    READ TABLE gt_values INTO gs_values WITH KEY
          domvalue_l = gt_usermap-user_type.
    IF sy-subrc EQ 0.
      IF gt_usermap-user_type = ' '.
        CONCATENATE 'A' '-' gs_values-ddtext
                    INTO gt_usermap-utext.
      ELSE.
        CONCATENATE gt_usermap-user_type '-'
                    gs_values-ddtext
                    INTO gt_usermap-utext.
      ENDIF.
    ENDIF.

*-- Bulk approval text
    READ TABLE gt_values_b INTO gs_values_b WITH KEY
          domvalue_l = gt_usermap-bulkapproval.
    IF sy-subrc EQ 0.
      IF gt_usermap-bulkapproval = ' '.
        CONCATENATE 'N' '-' gs_values_b-ddtext
                    INTO gt_usermap-btext.
      ELSE.
        CONCATENATE gt_usermap-bulkapproval '-'
                    gs_values_b-ddtext
                    INTO gt_usermap-btext.
      ENDIF.
    ENDIF.

    MODIFY gt_usermap INDEX lv_tabix TRANSPORTING btext.
    CLEAR gt_usermap-utext.
  ENDLOOP.
*-- End of VIM 6.0 - VIMI-2215

* Begin of VIMI-2650 - 5.2 HF6 -cnicklas
  ls_variant-report = sy-repid.
  ls_variant-handle = sy-dynnr.
* Begin of VIMI-2650 - 5.2 HF6 -cnicklas
  CALL METHOD g_grid->set_table_for_first_display
    EXPORTING
      i_save          = 'A'
      is_variant      = ls_variant "VIMI-2650 - 5.2 HF6 -cnicklas
      is_layout       = ls_layout
    CHANGING
      it_fieldcatalog = lt_fieldcat
      it_outtab       = gt_usermap[]
      it_sort         = lt_sort[]
      it_filter       = gt_filter[].                        "VIMI-16582.
  READ TABLE gt_usermap WITH KEY opt_userid = g_helper->g_userid.
  IF sy-subrc EQ 0.
    l_row-row_id = sy-tabix.
    CALL METHOD g_grid->set_current_cell_via_id
      EXPORTING
        is_row_no = l_row.
  ENDIF.
* begin VIMI-13155
  CALL METHOD cl_gui_cfw=>flush
    EXCEPTIONS
      OTHERS = 1.
* end VIMI-13155
  CALL METHOD g_grid->set_ready_for_input
    EXPORTING
      i_ready_for_input = '1'.

ENDFORM.                                                    " INIT_110
*&---------------------------------------------------------------------*
*&      Form  INIT_120
*&---------------------------------------------------------------------*
FORM init_120 .
  DATA lt_fieldcat TYPE lvc_t_fcat.
  DATA ls_layout   TYPE lvc_s_layo.
  DATA lt_sort     TYPE lvc_t_sort WITH HEADER LINE.
  DATA l_row       TYPE lvc_s_roid.
  DATA l_length    TYPE i.
* Start of INS VIMI-7380
  DATA: lt_celltab TYPE lvc_t_styl,
        lv_index   TYPE sy-tabix.
* End of INS VIMI-7380
* Begin of VIMI-2650 - 5.2 HF6 -cnicklas
  DATA ls_variant  TYPE disvariant.
* Begin of VIMI-2650 - 5.2 HF6 -cnicklas
  CHECK g_cgrid IS INITIAL.

  DESCRIBE TABLE gt_coa LINES l_length.
  IF l_length LT 15.
    l_length = 15.
  ENDIF.
  PERFORM initialize_grid USING l_length.

  g_evt_grid->gridname = c_fcoaview.

  CALL METHOD g_helper->get_fieldcat
    EXPORTING
      i_gridname = c_fcoaview
    IMPORTING
      t_fcat     = lt_fieldcat.

  ls_layout-grid_title = TEXT-t02.
  ls_layout-cwidth_opt = 'X'.
  IF sy-repid NE '/OPT/AR_COA'.                             "VIMI-7380
    lt_sort-spos      = 1.
    lt_sort-fieldname = 'OPT_USERID'.
    lt_sort-up        = 'X'.
    APPEND lt_sort.
    lt_sort-spos      = 2.
    lt_sort-fieldname = 'COUNTER'.
    lt_sort-up        = 'X'.
    APPEND lt_sort.
  ENDIF.                                                    "VIMI-7380
* Begin of VIMI-2650 - 5.2 HF6 -cnicklas
  ls_variant-report = sy-repid.
  ls_variant-handle = sy-dynnr.
* Begin of VIMI-2650 - 5.2 HF6 -cnicklas
  IF sy-repid NE '/OPT/AR_COA'.                             "VIMI-7380
    CALL METHOD g_grid->set_table_for_first_display
      EXPORTING
        i_save          = 'A'
        is_variant      = ls_variant "VIMI-2650 - 5.2 HF6 -cnicklas
        is_layout       = ls_layout
      CHANGING
        it_fieldcatalog = lt_fieldcat
        it_sort         = lt_sort[]
        it_outtab       = gt_coa[].
* Start of INS VIMI-7380
  ELSE.
    ls_layout-stylefname = 'CELLTAB'.

    LOOP AT gt_ncoa1.
      lv_index = sy-tabix.
      CLEAR: lt_celltab,
             gt_ncoa1-celltab.
      REFRESH: lt_celltab,
               gt_ncoa1-celltab.

      IF NOT gt_ncoa1-comp_code IS INITIAL.
        PERFORM fill_celltab USING 'H'
                                   'COMP_CODE'
                          CHANGING lt_celltab.
      ENDIF.

      IF NOT gt_ncoa1-appr_level IS INITIAL.
        PERFORM fill_celltab USING 'H'
                                   'APPR_LEVEL'
                          CHANGING lt_celltab.
      ENDIF.

      IF NOT gt_ncoa1-opt_userid IS INITIAL.
        PERFORM fill_celltab USING 'H'
                                   'OPT_USERID'
                          CHANGING lt_celltab.
      ENDIF.

      INSERT LINES OF lt_celltab INTO TABLE gt_ncoa1-celltab.
      MODIFY gt_ncoa1 INDEX lv_index.

    ENDLOOP.

    CALL METHOD g_grid->set_table_for_first_display
      EXPORTING
        i_save          = 'A'
        is_variant      = ls_variant "VIMI-2650 - 5.2 HF6 -cnicklas
        is_layout       = ls_layout
      CHANGING
        it_fieldcatalog = lt_fieldcat
        it_sort         = lt_sort[]
        it_outtab       = gt_ncoa1[].
  ENDIF.
* End of INS VIMI-7380
  IF sy-repid NE '/OPT/AR_COA'.                             "VIMI-7380
    READ TABLE gt_coa WITH KEY opt_userid = g_helper->g_userid.
    IF sy-subrc EQ 0.
      l_row-row_id = sy-tabix.
      CALL METHOD g_grid->set_current_cell_via_id
        EXPORTING
          is_row_no = l_row.
    ENDIF.
* Start of INS VIMI-7380
  ELSE.
    READ TABLE gt_ncoa WITH KEY opt_userid = g_helper->g_userid.
    IF sy-subrc EQ 0.
      l_row-row_id = sy-tabix.
      CALL METHOD g_grid->set_current_cell_via_id
        EXPORTING
          is_row_no = l_row.
    ENDIF.
  ENDIF.
* End of INS VIMI-7380

* begin VIMI-13155
  CALL METHOD cl_gui_cfw=>flush
    EXCEPTIONS
      OTHERS = 1.
* end VIMI-13155
  CALL METHOD g_grid->set_ready_for_input
    EXPORTING
      i_ready_for_input = '1'.
ENDFORM.                                                    " INIT_120
*&---------------------------------------------------------------------*
*&      Form  INIT_130
*&---------------------------------------------------------------------*
FORM init_130 .
  DATA lt_fieldcat TYPE lvc_t_fcat.
  DATA ls_layout   TYPE lvc_s_layo.
  DATA lt_sort     TYPE lvc_t_sort WITH HEADER LINE.
  DATA l_length    TYPE i.
* Begin of VIMI-2650 - 5.2 HF6 -cnicklas
  DATA ls_variant  TYPE disvariant.
* Begin of VIMI-2650 - 5.2 HF6 -cnicklas
  CHECK g_cgrid IS INITIAL.

  DESCRIBE TABLE gt_coder LINES l_length.

  IF l_length LT 15.
    l_length = 15.
  ENDIF.

  PERFORM initialize_grid USING l_length.

  g_evt_grid->gridname = c_fcoderview.

  CALL METHOD g_helper->get_fieldcat
    EXPORTING
      i_gridname = c_fcoderview
    IMPORTING
      t_fcat     = lt_fieldcat.


  ls_layout-grid_title = TEXT-t03.
  ls_layout-cwidth_opt = 'X'.

  lt_sort-spos      = 1.
  lt_sort-fieldname = 'CODER_ID'.
  lt_sort-up        = 'X'.
  APPEND lt_sort.
  lt_sort-spos      = 2.
  lt_sort-fieldname = 'COUNTER'.
  lt_sort-up        = 'X'.
  APPEND lt_sort.

* Begin of VIMI-2650 - 5.2 HF6 -cnicklas
  ls_variant-report = sy-repid.
  ls_variant-handle = sy-dynnr.
* Begin of VIMI-2650 - 5.2 HF6 -cnicklas
  CALL METHOD g_grid->set_table_for_first_display
    EXPORTING
      i_save          = 'A'
      is_variant      = ls_variant "VIMI-2650 - 5.2 HF6 -cnicklas
      is_layout       = ls_layout
    CHANGING
      it_fieldcatalog = lt_fieldcat
      it_sort         = lt_sort[]
      it_outtab       = gt_coder[].

* begin VIMI-13155
  CALL METHOD cl_gui_cfw=>flush
    EXCEPTIONS
      OTHERS = 1.
* end VIMI-13155
  CALL METHOD g_grid->set_ready_for_input
    EXPORTING
      i_ready_for_input = '1'.
ENDFORM.                                                    " INIT_130
*&--------------------------------------------------------------------*
*&      Form  INITIALIZE_GRID
*&--------------------------------------------------------------------*
FORM initialize_grid USING plength.
  CREATE OBJECT g_cgrid
    EXPORTING
      container_name = 'GRID_CONTAINER'
    EXCEPTIONS
      OTHERS         = 1.

* create a list tree control
  CREATE OBJECT g_grid
    EXPORTING
      i_parent = g_cgrid
    EXCEPTIONS
      OTHERS   = 1.

  IF sy-subrc <> 0.
    MESSAGE a899(s1) WITH 'Control Error'(n12).
  ENDIF.

  CALL METHOD g_cgrid->set_height( height = plength ).

  CREATE OBJECT g_evt_grid.

  SET HANDLER: g_evt_grid->handle_f4             FOR g_grid,
               g_evt_grid->handle_toolbar        FOR g_grid,
               g_evt_grid->handle_menu_button    FOR g_grid,
               g_evt_grid->handle_user_command   FOR g_grid,
               g_evt_grid->handle_data_changed   FOR g_grid,
               g_evt_grid->data_changed_finished FOR g_grid,
               g_evt_grid->handle_after_user_command FOR g_grid. "VIMI-16480
  CALL METHOD g_grid->register_edit_event
    EXPORTING
      i_event_id = cl_gui_alv_grid=>mc_evt_enter.

*  CALL METHOD G_GRID->REGISTER_EDIT_EVENT
*    EXPORTING
*      I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED.

  CALL METHOD g_grid->set_height( height = plength ).

ENDFORM.                    "INITIALIZE_GRID
*&---------------------------------------------------------------------*
*&      Form  FCODE
*&---------------------------------------------------------------------*
FORM fcode .
  DATA: l_refresh TYPE c.                                   "VIMI-7380
  DATA: lv_lock_error TYPE c.  " VIMI-16201
  DATA: lv_filter_no_delete TYPE abap_bool.                 "VIMI-16582

* Begin of VIMI-9049.
  IF  ( g_okcode_save EQ c_fcodcoa ) OR
      ( g_okcode_save EQ c_fapprcoa ).
    g_okcode_save = c_fcoaview.
    lv_filter_no_delete = abap_true.                        "VIMI-16582
  ENDIF.
* End of VIMI-9049

* begin of VIMI-16229 --> Validity checks negative --> skip
  IF gv_line_validity = 'N' AND sy-repid = '/OPT/AR_COA'.
    CLEAR gv_line_validity.
    MESSAGE s007(/opt/vim_bl_approve).
*   Could not save data. Please correct entered values.
    RETURN.
  ENDIF.
* end of VIMI-16229


  CASE g_okcode_save.
    WHEN c_fumview.
      CLEAR gt_filter.                                      "VIMI-16582
      CALL METHOD g_helper->set_view( '0110' ).
    WHEN c_fcoaview.
      IF lv_filter_no_delete = abap_false.                  "VIMI-16582
        CLEAR gt_filter.                                    "VIMI-16582
      ENDIF.                                                "VIMI-16582
      IF ( sy-repid = '/OPT/BL_APPRBASELINE' ) OR
         ( sy-repid = '/OPT/BL_APPROVAL_COA' ) .            " VIMI-9049
        CALL METHOD g_helper->set_view( '0120' ).
      ELSE.                                                 " VIMI-9049
* Begin of VIMI-16201
        IF  g_edit = 'X' AND gv_simple_mode = 'X'.
          PERFORM unlock_table USING: '/OPT/BL_APPCOA'.
          PERFORM lock_company_code_data CHANGING lv_lock_error.
          IF lv_lock_error = 'X'.
            CLEAR g_edit.
          ENDIF.
        ENDIF.
* End of VIMI-16201
        CALL METHOD g_helper->set_view( '0122' ). " VIMI-9049
      ENDIF.                                                " VIMI-9049
* Start of INS VIMI-7380
    WHEN c_applevel.
      CLEAR gt_filter.                                      "VIMI-16582
      CALL METHOD g_helper->set_view( '0300' ).
* End of INS VIMI-7380
    WHEN c_fcoderview.
      CLEAR gt_filter.                                      "VIMI-16582
*-- Check whether the screen should be displayed or not, based
*-- on config in constant table.
      IF ( sy-repid = '/OPT/BL_APPRBASELINE' ).             " VIMI-9049
        IF g_constant = 'S'.
          MESSAGE i000 WITH TEXT-i01 g_constant.
          EXIT.
        ENDIF.
        CALL METHOD g_helper->set_view( '0130' ).
* Begin of  VIMI-9049
      ELSEIF sy-repid = '/OPT/AR_COA'.
        IF g_changed NE space.
          PERFORM popup_dataloss CHANGING g_answer.
          IF g_answer EQ '1'.
            IF g_evt_grid->gridname = c_fumview.
              CALL METHOD g_helper->set_view( '0110' ).
            ELSEIF g_evt_grid->gridname = c_fcoaview.
              IF ( sy-repid = '/OPT/BL_APPRBASELINE' ) OR
                 ( sy-repid = '/OPT/BL_APPROVAL_COA' ) .
                CALL METHOD g_helper->set_view( '0120' ).
              ELSE.
                CALL METHOD g_helper->set_view( '0122' ).
              ENDIF.
            ELSEIF g_evt_grid->gridname = c_applevel.
              CALL METHOD g_helper->set_view( '0300' ).
            ENDIF.
            CLEAR g_changed.
* begin VIMI-11026
          ELSE.
            /opt/afs_coder-afs_id = gv_afs_id_save.
* end VIMI-11026
          ENDIF.
          CLEAR: g_okcode_save.
*                 g_changed.                      "VIMI-11026
          CHECK g_answer EQ '1'.
        ENDIF.
        CALL METHOD g_helper->set_view( '0400' ) .
      ENDIF.
* End of VIMI -9049
*-- Start VIM 6.0
    WHEN c_freportview.
      CALL METHOD g_helper->set_view( '0150' ).
*-- End VIM 6.0
    WHEN c_fsave.
      PERFORM check_changed_data.
      PERFORM save_data.

* Begin of I-VIMI-15846
      IF sy-repid = '/OPT/AR_COA' AND g_subrc NE 0.
* Refresh in case of invalid input data
        CALL METHOD g_helper->refresh_grid( g_grid ).
      ENDIF.
* End of I-VIMI-15846

*     CALL METHOD G_HELPER->REFRESH_GRID( G_GRID ).        "D-VIMI-13918 Avoiding several ALV Refresh...
* Start of INS VIMI-7380
      IF ( sy-repid = '/OPT/AR_COA' ) AND ( g_subrc EQ 0 ).
        PERFORM redisp_300_grid.
      ENDIF.
* End of INS VIMI-7380
    WHEN c_fdich.
      IF g_edit EQ space.
        g_edit = 'X'.                                       "VIMI-7280
*        PERFORM get_data.                                  "VIMI-6039  "COMMENTED VIMI-16394:ASUTHARA
*        g_edit = 'X'.                                      "VIMI-7280
*     begin of VIMI-16201
        IF sy-repid = '/OPT/AR_COA' AND ts_umdata-activetab = 'COAVIEW' AND gv_simple_mode = 'X'. " VIMI-16201


          PERFORM lock_company_code_data CHANGING lv_lock_error.  " VIMI-16201
          IF lv_lock_error = 'X'.
            CLEAR g_edit .
          ENDIF.
        ELSE. " end of VIMI-16201
            PERFORM lock_tables.
        ENDIF. "end of VIMI-16201
* Begin of VIMI-23560/AMANGAPA
*        PERFORM get_data.   "INSERT VIMI-16394:ASUTHARA
        IF gt_usermap[] IS INITIAL OR
           gt_level1[]  IS INITIAL OR
           ( gt_ncoa2[] IS INITIAL AND gt_ncoa3[] IS INITIAL ).
          PERFORM get_data_new.
        ENDIF.
* End of VIMI-23560/AMANGAPA
      ELSE.
* Start of INS VIMI-7380
        IF sy-repid = '/OPT/AR_COA'.
          IF g_changed IS INITIAL.
            IF NOT g_grid IS INITIAL.                       "VIMI-9049
              CALL METHOD g_grid->check_changed_data
                CHANGING
                  c_refresh = l_refresh.
            ENDIF.                                          "VIMI-9049
          ENDIF.
          IF g_changed NE space.
            PERFORM popup_dataloss CHANGING g_answer.
            CHECK g_answer EQ '1'.
          ENDIF.
        ENDIF.
* End of INS VIMI-7380
        g_edit = space.                                     "VIMI-7280
* Begin of VIMI-23560/AMANGAPA
*        PERFORM get_data.                                   "VIMI-7280
        IF gt_usermap[] IS INITIAL OR
           gt_level1[]  IS INITIAL OR
          ( gt_ncoa2[]  IS INITIAL AND gt_ncoa3[] IS INITIAL ).
          PERFORM get_data_new.
        ENDIF.
* End of VIMI-23560/AMANGAPA
          PERFORM unlock_tables.
*        g_edit = space.                                    "VIMI-7280
* begin of VIMI-16201
        IF gv_simple_mode = 'X'.
          PERFORM unlock_company_code_data.                 "VIMI-16201
        ENDIF.
* end of VIMI-16201
      ENDIF.

      PERFORM free_objects.
      CLEAR g_okcode_save.
* BEGIN of VIM 5.2 SP5 - VIMI-3677 - CNICKLAS
    WHEN c_faend.
* Start of INS VIMI-9619
      DATA: lv_level TYPE char1.
      FREE MEMORY ID 'LBCOA'.
      IF sy-repid = '/OPT/AR_COA'.
        lv_level = 'X'.
        EXPORT lv_level = lv_level TO MEMORY ID 'LBCOA'.
      ENDIF.
* End of INS VIMI-9619
      SUBMIT /opt/vim_bl_chng_dis_appcoa
              VIA SELECTION-SCREEN AND RETURN.
* END of VIM 5.2 SP5 - VIMI-3677 - CNICKLAS
    WHEN OTHERS.
  ENDCASE.
** Start of INS VIMI-7380
*  IF NOT g_evt_grid IS INITIAL.
*    IF g_evt_grid->gridname = 'APRLIMIT' AND
*       g_changed   = 'X'.
*      PERFORM free_objects.
*      CLEAR g_okcode_save.
*    ENDIF.
*  ENDIF.
** End of INS VIMI-7380


ENDFORM.                    " FCODE
*&--------------------------------------------------------------------*
*&      Form  check_changed_data
*&--------------------------------------------------------------------*
*       text
*---------------------------------------------------------------------*
FORM check_changed_data.
  DATA l_refresh TYPE char01.
  IF NOT g_grid IS INITIAL.
* Check to refresh data first.
    CALL METHOD g_grid->check_changed_data
      CHANGING
        c_refresh = l_refresh.
  ENDIF.
  IF NOT g_gridnew IS INITIAL.
* Check to refresh data first.
    CALL METHOD g_gridnew->check_changed_data
      CHANGING
        c_refresh = l_refresh.
  ENDIF.
ENDFORM.                    "check_changed_data
*&---------------------------------------------------------------------*
*&      Form  CHANGE_ALV_DATA
*&---------------------------------------------------------------------*
FORM change_alv_data USING p_newrows.
  DATA l_counter TYPE numc5.
* Begin of VIMI-18588/snittala
  DATA l_counter1(6) TYPE n.
  DATA l_errflg TYPE c.
* End of VIMI-18588/snittala
  DATA l_tabix   TYPE sytabix.
  DATA l_optuser TYPE /ors/umoid.
  DATA lv_save_optuser TYPE /ors/umoid.                     "VIMI-7280
  DATA lw_coa_fcnt    TYPE /opt/bl_appcoa.                  "VIMI-10215
  DATA lw_coder_fcnt  TYPE /opt/bl_ap_coder. " VIMI-10215
  DATA lw_coder_fcnt1 TYPE /opt/afs_coder. " VIMI-10215

* Begin of VIM 6.0 - VIMI-2215
  DATA: lv_btype    TYPE /opt/abulk_appr_type_de,
        lv_utype    TYPE /opt/user_type_de,
        lv_assigned TYPE c,                                 "VIMI-7280
        lv_uid      TYPE /ors/umoid,                        "VIMI-7280
        lv_otype    TYPE otype,                             "VIMI-9285
        lv_actorid  TYPE actorid.                           "VIMI-9285
* End of VIM 6.0 - VIMI-2215

*  FIELD-SYMBOLS: <ls_usermap> TYPE ty_usermap_line.         "VIMI-7280 "VIMI-23560/AMANGAPA

  CASE g_evt_grid->gridname.
    WHEN c_fumview.
      LOOP AT gt_usermap.
        g_tabix = sy-tabix.
        IF gt_usermap-opt_userid IS INITIAL.
          PERFORM get_temp_userid.
          gt_usermap-opt_userid = g_tempumid.
          MODIFY gt_usermap INDEX g_tabix.
        ELSE.

* BEGIN OF VIMI-15810: ASUTHARA
*when trying to insert duplicate record in COA,at this stage gt_usermap-opt_userid always blank
* in this case,no need to check for duplicate opt_userid in below loop

** Check copied entries. for this,read from the current line forward
** to see if there is any duplicate usermap id.

*          ADD 1 TO g_tabix.
*          lv_save_optuser = gt_usermap-opt_userid.          "VIMI-7280
*          LOOP AT gt_usermap FROM g_tabix
*                  WHERE opt_userid EQ gt_usermap-opt_userid.
*            l_tabix = sy-tabix.
*            PERFORM get_temp_userid.
*            gt_usermap-opt_userid = g_tempumid.
*            MODIFY gt_usermap FROM gt_usermap INDEX l_tabix.
*          ENDLOOP.


** begin VIMI-7280
*          LOOP AT gt_usermap_filtered ASSIGNING <ls_usermap>
*                  WHERE opt_userid EQ lv_save_optuser.
*            l_tabix = sy-tabix.
*            PERFORM get_temp_userid.
*            <ls_usermap>-opt_userid = g_tempumid.
*          ENDLOOP.
** end VIMI-7280


**-- Begin of VIM 6.0 - VIMI-2215
*          SUBTRACT 1 FROM g_tabix.                          "vim60
**-- End of VIM 6.0 - VIMI-2215
*  END OF VIMI-15810: ASUTHARA

        ENDIF.
*-- Begin of VIM 6.0 - VIMI-2215
*-- User Type
        lv_utype = gt_usermap-utext+0(1).
        IF lv_utype = 'A'.
          MOVE ' ' TO gt_usermap-user_type.
        ELSE.
          MOVE lv_utype TO gt_usermap-user_type.
        ENDIF.

        lv_btype = gt_usermap-btext+0(1).
        IF lv_btype = 'N'.
          MOVE ' ' TO gt_usermap-bulkapproval.
        ELSE.
          MOVE lv_btype TO gt_usermap-bulkapproval.
        ENDIF.

        MODIFY gt_usermap INDEX g_tabix TRANSPORTING bulkapproval.
*-- End of VIM 6.0 - VIMI-2215
      ENDLOOP.
    WHEN c_fcoaview.
      IF p_newrows IS INITIAL.
* Begin of VIMI-10215 - Gaddepal.
*        CLEAR: gt_coa-counter.
*        MODIFY gt_coa TRANSPORTING counter WHERE counter GT 0.
        gt_coa-mandt = sy-mandt.
        MODIFY gt_coa TRANSPORTING mandt   WHERE mandt IS INITIAL.
* Start of CHG VIMI-11726
        gt_coa-counter = 99999.
        MODIFY gt_coa TRANSPORTING counter WHERE counter IS INITIAL.
*        SORT gt_coa BY opt_userid.
*        SORT gt_coa_filtered BY opt_userid.
        SORT gt_coa BY opt_userid counter.
        SORT gt_coa_filtered BY opt_userid counter.
* End of CHG VIMI-11726

* End of VIMI-10215 - Gaddepal.
        CLEAR l_errflg.            "VIMI-18588/snittala
        LOOP AT gt_coa.
          g_tabix = sy-tabix.
          CHECK gt_coa-opt_userid NE space.
* Begin of VIMI-10215 - Gaddepal
*          IF gt_coa-counter EQ 0.
*            CLEAR l_counter.
** begin VIMI-7280
** re-numbering logic changed to accomodate two internal tables
** resulting from the split through the authorization check
**            LOOP AT gt_coa WHERE opt_userid EQ gt_coa-opt_userid
**                           AND   counter    GT 0.
**              IF gt_coa-counter GT l_counter.
**                l_counter = gt_coa-counter.
**              ENDIF.
**            ENDLOOP.
**            IF sy-subrc EQ 0.
**              gt_coa-counter = l_counter + 1.
**            ELSE.
**              gt_coa-counter = 1.
**            ENDIF.
*            CLEAR lv_assigned.
*            lv_uid = gt_coa-opt_userid.
*            WHILE lv_assigned IS INITIAL.
*              l_counter = l_counter + 1.
*              READ TABLE gt_coa
*                WITH KEY opt_userid = lv_uid counter = l_counter
*                TRANSPORTING NO FIELDS.
*              IF sy-subrc <> 0.
*                READ TABLE gt_coa_filtered
*                  WITH KEY opt_userid = lv_uid counter = l_counter
*                  TRANSPORTING NO FIELDS.
*                IF sy-subrc <> 0.
*                  lv_assigned = 'X'.
*                  gt_coa-counter = l_counter.
*                ENDIF.
*              ENDIF.
*            ENDWHILE.
** end VIMI-7280
*            MODIFY gt_coa INDEX g_tabix TRANSPORTING counter.
*          ENDIF.
          AT NEW opt_userid.
            CLEAR l_counter.
            CLEAR l_counter1.                "VIMI-18588/snittala
          ENDAT.
* Begin of VIMI-18588/snittala
          l_counter1 = l_counter + 1.
*          IF l_counter1 > 10.   VIMI-18588-1
          IF l_counter1 > 99999.   "VIMI-18588-1
            l_errflg = 'X'.
            DELETE gt_coa INDEX g_tabix.
            CONTINUE.
          ENDIF.
* End of VIMI-18588/snittala
          l_counter = l_counter + 1.
          gt_coa-counter = l_counter.
          MODIFY gt_coa INDEX g_tabix TRANSPORTING counter.
          AT END OF opt_userid.
            IF NOT gt_coa_filtered IS INITIAL.
              READ TABLE gt_coa_filtered INTO lw_coa_fcnt WITH KEY opt_userid = gt_coa-opt_userid
              BINARY SEARCH TRANSPORTING NO FIELDS.
              IF sy-subrc EQ 0.
                l_tabix = sy-tabix.
                LOOP AT gt_coa_filtered INTO lw_coa_fcnt FROM l_tabix.
                  IF lw_coa_fcnt-opt_userid <> gt_coa-opt_userid.
                    EXIT.
                  ENDIF.
                  l_counter = l_counter + 1.
                  lw_coa_fcnt-counter = l_counter.
                  MODIFY  gt_coa_filtered FROM lw_coa_fcnt TRANSPORTING counter.
                ENDLOOP.
              ENDIF.
            ENDIF.
          ENDAT.
* End of VIMI-10215 - Gaddepal.
        ENDLOOP.
      ENDIF.
* Begin of VIMI-18588/snittala
      IF l_errflg = 'X'.
        MESSAGE i000 WITH TEXT-i02.
      ENDIF.
* End of VIMI-18588/snittala
    WHEN c_fcoderview.
      IF p_newrows IS INITIAL.
* Start of INS VIMI-9049
* Begin of VIMI-10215 - Gaddepal.
*        CLEAR gt_coder_lba-counter.
*        MODIFY gt_coder_lba TRANSPORTING counter WHERE counter GT 0.
        IF sy-repid = '/OPT/AR_COA'.
          gt_coder_lba-mandt = sy-mandt.
          gt_coder_lba-afs_id = /opt/afs_coder-afs_id.                                 "I-VIMI-15035
          MODIFY gt_coder_lba TRANSPORTING mandt afs_id  WHERE mandt IS INITIAL.       "I-VIMI-15035
*          MODIFY GT_CODER_LBA TRANSPORTING MANDT WHERE MANDT IS INITIAL.              "D-VIMI-15035
          SORT gt_coder_lba BY afs_id coder_id coder_otype coder_actorid.
          SORT gt_lcoder_filtered BY afs_id coder_id coder_otype coder_actorid.
          LOOP AT gt_coder_lba.
            g_tabix = sy-tabix.
* begin VIMI-9285
*            CHECK gt_coder_lba-coder_id NE space.
            CHECK gt_coder_lba-coder_id NE space OR
                  ( gt_coder_lba-coder_otype NE space AND
                    gt_coder_lba-coder_actorid NE space ).
* end VIMI-9285
* Begin of VIMI-10215 - Gaddepal
*            IF gt_coder_lba-counter EQ 0.
*              CLEAR l_counter.
*              CLEAR lv_assigned.
*              lv_uid = gt_coder_lba-coder_id.
*              lv_otype = gt_coder_lba-coder_otype.          "VIMI-9285
*              lv_actorid = gt_coder_lba-coder_actorid.      "VIMI-9285
*              WHILE lv_assigned IS INITIAL.
*                l_counter = l_counter + 1.
*                READ TABLE gt_coder_lba
** begin VIMI-9285
**                  WITH KEY coder_id = lv_uid counter = l_counter
*                  WITH KEY coder_id = lv_uid  coder_otype = lv_otype
*                           coder_actorid = lv_actorid counter = l_counter
** end VIMI-9285
*                  TRANSPORTING NO FIELDS.
*                IF sy-subrc <> 0.
** begin VIMI-9285
**                  READ TABLE gt_coder_filtered
**                    WITH KEY coder_id = lv_uid counter = l_counter
*                  READ TABLE gt_lcoder_filtered
*                    WITH KEY coder_id = lv_uid  coder_otype = lv_otype
*                             coder_actorid = lv_actorid counter = l_counter
** end VIMI-9285
*                    TRANSPORTING NO FIELDS.
*                  IF sy-subrc <> 0.
*                    lv_assigned = 'X'.
*                    gt_coder_lba-counter = l_counter.
*                  ENDIF.
*                ENDIF.
*              ENDWHILE.
*              MODIFY gt_coder_lba INDEX g_tabix TRANSPORTING counter.
*            ENDIF.
            AT NEW coder_actorid.
              CLEAR l_counter.
            ENDAT.
            l_counter = l_counter + 1.
            gt_coder_lba-counter = l_counter.
            MODIFY gt_coder_lba INDEX g_tabix TRANSPORTING counter.
            AT END OF coder_actorid.
              IF NOT gt_lcoder_filtered IS INITIAL.
                READ TABLE gt_lcoder_filtered INTO lw_coder_fcnt1 WITH KEY
                                              afs_id   = gt_coder_lba-afs_id
                                              coder_id = gt_coder_lba-coder_id
                                              coder_otype = gt_coder_lba-coder_otype
                                              coder_actorid = gt_coder_lba-coder_actorid
                BINARY SEARCH TRANSPORTING NO FIELDS.
                IF sy-subrc EQ 0.
                  l_tabix = sy-tabix.
                  LOOP AT gt_lcoder_filtered INTO lw_coder_fcnt1 FROM l_tabix.
                    IF lw_coder_fcnt1-afs_id   <>  gt_coder_lba-afs_id OR
                       lw_coder_fcnt1-coder_id <> gt_coder_lba-coder_id OR
                       lw_coder_fcnt1-coder_otype   <> gt_coder_lba-coder_otype OR
                       lw_coder_fcnt1-coder_actorid <> gt_coder_lba-coder_actorid.
                      EXIT.
                    ENDIF.
                    l_counter = l_counter + 1.
                    lw_coder_fcnt1-counter = l_counter.
                    MODIFY  gt_lcoder_filtered FROM lw_coder_fcnt1 TRANSPORTING counter.
                  ENDLOOP.
                ENDIF.
              ENDIF.
            ENDAT.
* End of VIMI_10215 - Gaddepal.
          ENDLOOP.
        ELSE.
* End of INS VIMI-9049
* Begin of VIMI-10215 - Gaddepal.
*        CLEAR gt_coder-counter.
*        MODIFY gt_coder TRANSPORTING counter WHERE counter GT 0.
          gt_coder-mandt = sy-mandt.
          MODIFY gt_coder TRANSPORTING mandt   WHERE mandt IS INITIAL.
          SORT gt_coder BY coder_id.
          SORT gt_coder_filtered BY coder_id.
* End of VIMI-10215 - Gaddepal.
          LOOP AT gt_coder.
            g_tabix = sy-tabix.
            CHECK gt_coder-coder_id NE space.
* Begin of VIMI-10215 - Gaddepal.
*          IF gt_coder-counter EQ 0.
*            CLEAR l_counter.
** begin VIMI-7280
** re-numbering logic changed to accomodate two internal tables
** resulting from the split through the authorization check
**            LOOP AT gt_coder WHERE coder_id EQ gt_coder-coder_id
**                             AND   counter    GT 0.
**              IF gt_coder-counter GT l_counter.
**                l_counter = gt_coder-counter.
**              ENDIF.
**            ENDLOOP.
**            IF sy-subrc EQ 0.
**              gt_coder-counter = l_counter + 1.
**            ELSE.
**              gt_coder-counter = 1.
**            ENDIF.
*            CLEAR lv_assigned.
*            lv_uid = gt_coder-coder_id.
*            WHILE lv_assigned IS INITIAL.
*              l_counter = l_counter + 1.
*              READ TABLE gt_coder
*                WITH KEY coder_id = lv_uid counter = l_counter
*                TRANSPORTING NO FIELDS.
*              IF sy-subrc <> 0.
*                READ TABLE gt_coder_filtered
*                  WITH KEY coder_id = lv_uid counter = l_counter
*                  TRANSPORTING NO FIELDS.
*                IF sy-subrc <> 0.
*                  lv_assigned = 'X'.
*                  gt_coder-counter = l_counter.
*                ENDIF.
*              ENDIF.
*            ENDWHILE.
** end VIMI-7280
*            MODIFY gt_coder INDEX g_tabix TRANSPORTING counter.
*          ENDIF.
            AT NEW coder_id.
              CLEAR l_counter.
            ENDAT.
            l_counter = l_counter + 1.
            gt_coder-counter = l_counter.
            MODIFY gt_coder INDEX g_tabix TRANSPORTING counter.
            AT END OF coder_id.
              IF NOT gt_coder_filtered IS INITIAL.
                READ TABLE gt_coder_filtered INTO lw_coder_fcnt WITH KEY coder_id = gt_coder-coder_id
                BINARY SEARCH TRANSPORTING NO FIELDS.
                IF sy-subrc EQ 0.
                  l_tabix = sy-tabix.
                  LOOP AT gt_coder_filtered INTO lw_coder_fcnt FROM l_tabix.
                    IF lw_coder_fcnt-coder_id <> gt_coder-coder_id.
                      EXIT.
                    ENDIF.
                    l_counter = l_counter + 1.
                    lw_coder_fcnt-counter = l_counter.
                    MODIFY  gt_coder_filtered FROM lw_coder_fcnt TRANSPORTING counter.
                  ENDLOOP.
                ENDIF.
              ENDIF.
            ENDAT.
* End of VIMI-10215 - Gaddepal.
          ENDLOOP.
        ENDIF.
      ENDIF.                                                "VIMI-9049
*-- Start VIM 6.0
    WHEN c_freportview.
      DATA: gs_auth1 LIKE gs_auth.
      CLEAR: gt_authn[], gs_authn.
      IF p_newrows IS INITIAL.
        CLEAR gs_auth-counter.
        MODIFY gt_auth FROM gs_auth TRANSPORTING counter
                      WHERE counter GT 0.
        LOOP AT gt_auth INTO gs_auth.
          g_tabix = sy-tabix.
          CHECK gs_auth-userid NE space.
          IF gs_auth-counter EQ 0.
            CLEAR l_counter.
            LOOP AT gt_auth INTO gs_auth1
                   WHERE userid EQ gs_auth-userid
                     AND counter    GT 0.
              IF gs_auth1-counter GT l_counter.
                l_counter = gs_auth1-counter.
              ENDIF.
            ENDLOOP.
            IF sy-subrc EQ 0.
              gs_auth-counter = l_counter + 1.
            ELSE.
              gs_auth-counter = 1.
            ENDIF.
            MODIFY gt_auth FROM gs_auth INDEX g_tabix
                                    TRANSPORTING counter.

            MOVE-CORRESPONDING gs_auth TO gs_authn.
            READ TABLE gt_authn INTO gs_authn WITH KEY
                          userid     = gs_auth-userid
                          counter    = gs_auth-counter
                          TRANSPORTING NO FIELDS.
            IF sy-subrc EQ 0.
              MODIFY gt_authn FROM gs_authn INDEX sy-tabix.
            ELSE.
              APPEND gs_authn TO gt_authn.
            ENDIF.
          ENDIF.
        ENDLOOP.
        gv_datachanged_a = 'Y'.
      ENDIF.
*-- end vim 6.0
* Start of INS VIMI-7380.
    WHEN c_applevel.
*      PERFORM edit_cells .
* End of INS VIMI-7380.

  ENDCASE.
ENDFORM.                    " CHANGE_ALV_DATA
*&---------------------------------------------------------------------*
*&      Form  ADD_MORE_LINES
*&---------------------------------------------------------------------*
FORM add_more_lines USING p_lines.
  CASE g_evt_grid->gridname.
    WHEN c_fumview.
      CLEAR gt_usermap.
      DO p_lines TIMES.
        PERFORM get_temp_userid.
        gt_usermap-opt_userid = g_tempumid.
        APPEND gt_usermap.
      ENDDO.
      g_changed = 'X'.                                      "VIMI-9049
*-- Start VIM 6.0
    WHEN c_freportview.
      CLEAR gs_auth.
      DO p_lines TIMES.
        APPEND gs_auth TO gt_auth.
      ENDDO.
      g_changed = 'X'.                                      "VIMI-9049
*-- End VIM 6.0
    WHEN c_fcoaview.
      CLEAR gt_coa.
      DO p_lines TIMES.
        APPEND gt_coa.
      ENDDO.
      g_changed = 'X'.                                      "VIMI-9049
    WHEN c_fcoaview.                                        "#EC *
      CLEAR gt_coder.
      DO p_lines TIMES.
        APPEND gt_coder.
      ENDDO.
      g_changed = 'X'.                                      "VIMI-9049
* Start of INS VIMI-9049
    WHEN c_fapprcoa.
      CLEAR gt_ncoa3.
      DO p_lines TIMES.
        APPEND gt_ncoa3.
      ENDDO.
      g_changed = 'X'.
    WHEN c_fcodcoa.
      CLEAR gt_ncoa2.
      DO p_lines TIMES.
        APPEND gt_ncoa2.
      ENDDO.
      g_changed = 'X'.                                      "VIMI-9049
* End of INS VIMI-9049
  ENDCASE.
ENDFORM.                    " ADD_MORE_LINES
*&--------------------------------------------------------------------*
*&      Form  GET_TEMP_USERID
*&--------------------------------------------------------------------*
FORM get_temp_userid.
  FIELD-SYMBOLS <f>.
  ASSIGN g_tempumid+1(*) TO <f>.
  ADD 1 TO <f>.
  CONDENSE g_tempumid NO-GAPS.
ENDFORM.                    "GET_TEMP_USERID
*&---------------------------------------------------------------------*
*&      Form  HANDLE_ALVF4
*&---------------------------------------------------------------------*
FORM handle_alvf4  USING    p_fieldname
                            p_row_no    TYPE lvc_s_roid
                            p_display
                   CHANGING pr_event_data TYPE REF TO cl_alv_event_data. "VIMI-21473

  DATA l_value TYPE text255.
  DATA l_display TYPE flag.

*-- Start VIMI-5094
  DATA: ls_401    TYPE /opt/bl_t401,
        lt_return TYPE TABLE OF ddshretval INITIAL SIZE 0,
        ls_return TYPE ddshretval,
        ls_coa    LIKE LINE OF gt_coa,
        ls_ncoa   LIKE LINE OF gt_ncoa,                       "VIMI-7380
        ls_level  TYPE ty_level.                             "VIMI-7380

  FIELD-SYMBOLS: <f_field> TYPE any.

* Begin of VIMI-21473
  DATA : ls_modi TYPE lvc_s_modi.
  FIELD-SYMBOLS: <itab> TYPE lvc_t_modi.
* End of VIMI-21473

*-- end VIMI-5094
*
* Begin of D-VIMI-15846
* Start of INS VIMI-9049
*  IF SY-REPID = '/OPT/AR_COA' AND
*     NOT GV_ROWID IS INITIAL.
*    P_ROW_NO-ROW_ID = GV_ROWID.
*  ENDIF.
* End of INS VIMI-9049
* End of D-VIMI-15846

  ls_modi-row_id =  p_row_no-row_id.                        "VIMI-21473

* Begin of I-VIMI-15846
  IF sy-repid = '/OPT/AR_COA'.
    IF NOT g_grid IS INITIAL.
      CALL METHOD g_grid->get_current_cell
        IMPORTING
          e_row = gv_rowid.
      p_row_no-row_id = gv_rowid.
    ENDIF.
  ENDIF.
* End of I-VIMI-15846

  CASE g_evt_grid->gridname.
    WHEN c_fumview.
* Begin of VIMI-21723
      IF p_fieldname EQ 'MANAGER_ID'.
        IF g_edit EQ space.
          l_display = 'X'.
        ELSE.
          l_display = space.
        ENDIF.

        PERFORM f4_usermapid USING l_display
                             CHANGING l_value.
        IF NOT l_value IS INITIAL.
          ASSIGN pr_event_data->m_data->* TO <itab>.
          ls_modi-fieldname = 'MANAGER_ID'.
          ls_modi-value     = l_value.
          APPEND ls_modi TO <itab>.
          CLEAR ls_modi.
        ENDIF.
      ENDIF.
* End of VIMI-21723

    WHEN c_fcoaview.
      CASE p_fieldname.
        WHEN 'OPT_USERID'.
          IF g_edit EQ space.
            l_display = 'X'.
          ELSE.
            l_display = space.
          ENDIF.
          PERFORM f4_usermapid USING l_display
                               CHANGING l_value.
          IF NOT l_value IS INITIAL.                        "VIMI-4989
            IF sy-repid NE '/OPT/AR_COA'.                   "VIMI-7380
              gt_coa-opt_userid = l_value.
              MODIFY gt_coa INDEX p_row_no-row_id TRANSPORTING opt_userid.
* Start of INS VIMI-7380
            ELSE.
              gt_ncoa1-opt_userid = l_value.
              IF p_row_no-row_id IS INITIAL.
                p_row_no-row_id = 1.
              ENDIF.
              MODIFY gt_ncoa1 INDEX p_row_no-row_id TRANSPORTING opt_userid.
            ENDIF.
* End fo INS VIMI-7380
          ENDIF.                                            "VIMI-4989
*-- Start VIMI-5094
        WHEN 'COUNTER' OR 'CURRENCY' OR 'APPROVAL_LIMIT'.

*-- no search help
        WHEN OTHERS.
*-- Search help based one the config in table /OPT/BL_T401
          READ TABLE gt_401 INTO ls_401 WITH KEY
                        fieldname = p_fieldname.
          IF sy-subrc EQ 0 AND NOT ls_401-shlpname IS INITIAL.
            CALL FUNCTION 'F4IF_FIELD_VALUE_REQUEST'
              EXPORTING
                tabname           = ' '
                fieldname         = ' '
                searchhelp        = ls_401-shlpname
                display           = p_display
              TABLES
                return_tab        = lt_return
              EXCEPTIONS
                field_not_found   = 1
                no_help_for_field = 2
                inconsistent_help = 3
                no_values_found   = 4
                OTHERS            = 5.
            IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
            ENDIF.
*-- read the selected search help returned value
            READ TABLE lt_return INTO ls_return INDEX 1.
            CHECK sy-subrc EQ 0.
            IF sy-repid NE '/OPT/AR_COA'.                   "VIMI-7380
              CLEAR ls_coa.
              READ TABLE gt_coa INTO ls_coa INDEX p_row_no-row_id.

              ASSIGN COMPONENT p_fieldname OF STRUCTURE ls_coa
                        TO <f_field>.
              IF sy-subrc EQ 0.
                MOVE ls_return-fieldval TO <f_field>.
                MODIFY gt_coa FROM ls_coa INDEX p_row_no-row_id.
              ENDIF.
* Start of INS VIMI-7380
            ELSE.
              CLEAR ls_ncoa.
              READ TABLE gt_ncoa INTO ls_ncoa INDEX p_row_no-row_id.

              ASSIGN COMPONENT p_fieldname OF STRUCTURE ls_ncoa
                        TO <f_field>.
              IF sy-subrc EQ 0.
                MOVE ls_return-fieldval TO <f_field>.
                MODIFY gt_ncoa FROM ls_ncoa INDEX p_row_no-row_id.
              ENDIF.
            ENDIF.
* End of INS VIMI-7380
          ENDIF.
*-- End VIMI-5094
      ENDCASE.
    WHEN c_fcoderview.
      CASE p_fieldname.
        WHEN 'CODER_ID'.
          IF g_edit EQ space.
            l_display = 'X'.
          ELSE.
            l_display = space.
          ENDIF.
          PERFORM f4_usermapid USING l_display
                               CHANGING l_value.
          IF NOT l_value IS INITIAL.                        "VIMI-4989
            gt_coder-coder_id = l_value.
            MODIFY gt_coder INDEX p_row_no-row_id TRANSPORTING coder_id.
          ENDIF.                                            "VIMI-4989
      ENDCASE.
* Start of INS VIMI-7380
    WHEN c_applevel.
      IF p_fieldname =  'EXPENSE_TYPE'.
        IF g_edit EQ space.
          l_display = 'X'.
        ELSE.
          l_display = space.
        ENDIF.

        IF p_row_no-row_id IS INITIAL.
          p_row_no-row_id = 1.
        ENDIF.

        CALL FUNCTION 'F4IF_FIELD_VALUE_REQUEST'
          EXPORTING
            tabname           = ' '
            fieldname         = ' '
            searchhelp        = '/OPT/ORS_EXPENSE'
            display           = p_display
          TABLES
            return_tab        = lt_return
          EXCEPTIONS
            field_not_found   = 1
            no_help_for_field = 2
            inconsistent_help = 3
            no_values_found   = 4
            OTHERS            = 5.
        IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
        ENDIF.
*-- read the selected search help returned value
        READ TABLE lt_return INTO ls_return INDEX 1.
        CHECK sy-subrc EQ 0.
        READ TABLE gt_level1 INTO ls_level INDEX p_row_no-row_id.

        ASSIGN COMPONENT p_fieldname OF STRUCTURE ls_level
                  TO <f_field>.
        IF sy-subrc EQ 0.
          MOVE ls_return-fieldval TO <f_field>.
          MODIFY gt_level1 FROM ls_level INDEX p_row_no-row_id.
        ENDIF.
* Start of INS VIMI-9049
      ELSEIF p_fieldname = 'APPR_LEVEL'.
        IF g_edit EQ space.
          l_display = 'X'.
        ELSE.
          l_display = space.
        ENDIF.

        IF p_row_no-row_id IS INITIAL.
          p_row_no-row_id = 1.
        ENDIF.

        CALL FUNCTION 'F4IF_FIELD_VALUE_REQUEST'
          EXPORTING
            tabname           = ' '
            fieldname         = ' '
            searchhelp        = '/OPT/AH_LEVEL'
            display           = p_display
          TABLES
            return_tab        = lt_return
          EXCEPTIONS
            field_not_found   = 1
            no_help_for_field = 2
            inconsistent_help = 3
            no_values_found   = 4
            OTHERS            = 5.
        IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
        ENDIF.
*-- read the selected search help returned value
        READ TABLE lt_return INTO ls_return INDEX 1.
        CHECK sy-subrc EQ 0.
        READ TABLE gt_level1 INTO ls_level INDEX p_row_no-row_id.

        ASSIGN COMPONENT p_fieldname OF STRUCTURE ls_level
                  TO <f_field>.
        IF sy-subrc EQ 0.
          MOVE ls_return-fieldval TO <f_field>.
          MODIFY gt_level1 FROM ls_level INDEX p_row_no-row_id.
        ENDIF.
* End of INS VIMI-9049
      ENDIF.
* End of INS VIMI-7380
    WHEN c_fapprcoa.
* Start of INS VIMI-9049
      IF p_fieldname = 'APPR_LEVEL'.
        IF g_edit EQ space.
          l_display = 'X'.
        ELSE.
          l_display = space.
        ENDIF.

        IF p_row_no-row_id IS INITIAL.
          p_row_no-row_id = 1.
        ENDIF.

        CALL FUNCTION 'F4IF_FIELD_VALUE_REQUEST'
          EXPORTING
            tabname           = ' '
            fieldname         = ' '
            searchhelp        = '/OPT/AH_LEVEL'
            display           = p_display
          TABLES
            return_tab        = lt_return
          EXCEPTIONS
            field_not_found   = 1
            no_help_for_field = 2
            inconsistent_help = 3
            no_values_found   = 4
            OTHERS            = 5.
        IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
        ENDIF.
*-- read the selected search help returned value
        READ TABLE lt_return INTO ls_return INDEX 1.
        CHECK sy-subrc EQ 0.
        READ TABLE gt_ncoa3 INDEX p_row_no-row_id.

        ASSIGN COMPONENT p_fieldname OF STRUCTURE gt_ncoa3
                  TO <f_field>.
        IF sy-subrc EQ 0.
          MOVE ls_return-fieldval TO <f_field>.
          MODIFY gt_ncoa3 INDEX p_row_no-row_id.
        ENDIF.
      ELSEIF p_fieldname = 'OPT_USERID'.
        IF g_edit EQ space.
          l_display = 'X'.
        ELSE.
          l_display = space.
        ENDIF.

        PERFORM f4_usermapid USING l_display
                             CHANGING l_value.
        IF NOT l_value IS INITIAL.                          "VIMI-4989
* Begin of VIMI-16816
          READ TABLE gt_ncoa3 INDEX ls_modi-row_id.
          IF sy-subrc IS NOT INITIAL.
* End of VIMI-16816
* Begin of VIMI-21473
*          IF sy-repid NE '/OPT/AR_COA'.                     "VIMI-7380
*            gt_ncoa3-opt_userid = l_value.
*            MODIFY gt_ncoa3 INDEX p_row_no-row_id TRANSPORTING opt_userid.
** Start of INS VIMI-7380
*          ELSE.

*            gt_ncoa3-opt_userid = l_value.
*            IF p_row_no-row_id IS INITIAL.
*              p_row_no-row_id = 1.
*            ENDIF.
*          MODIFY gt_ncoa3 INDEX p_row_no-row_id TRANSPORTING opt_userid.
*          ENDIF.
** End fo INS VIMI-7380
            ASSIGN pr_event_data->m_data->* TO <itab>.
            ls_modi-fieldname = 'OPT_USERID'.
            ls_modi-value     = l_value.
            APPEND ls_modi TO <itab>.
            CLEAR ls_modi.
* End of VIMI-21473
          ENDIF.                                            "VIMI-16816
        ENDIF.                                              "VIMI-4989
* Begin of VIMI-21723
      ELSEIF  p_fieldname = 'EXPENSE_TYPE' OR p_fieldname = 'EXPENSE_TYPE2'.
        IF g_edit EQ space.
          l_display = 'X'.
        ELSE.
          l_display = space.
        ENDIF.
        PERFORM f4_field USING '/ORS/EXPENSE_TYPE_HELP' l_display
                              CHANGING l_value.
        IF NOT l_value IS INITIAL.
          ASSIGN pr_event_data->m_data->* TO <itab>.
          ls_modi-fieldname = p_fieldname.
          ls_modi-value     = l_value.
          APPEND ls_modi TO <itab>.
          CLEAR ls_modi.
        ENDIF.
* End of VIMI-21723
      ENDIF.
    WHEN c_fcodcoa.
      IF p_fieldname = 'APPR_LEVEL'.
        IF g_edit EQ space.
          l_display = 'X'.
        ELSE.
          l_display = space.
        ENDIF.

        IF p_row_no-row_id IS INITIAL.
          p_row_no-row_id = 1.
        ENDIF.

        CALL FUNCTION 'F4IF_FIELD_VALUE_REQUEST'
          EXPORTING
            tabname           = ' '
            fieldname         = ' '
            searchhelp        = '/OPT/AH_LEVEL'
            display           = p_display
          TABLES
            return_tab        = lt_return
          EXCEPTIONS
            field_not_found   = 1
            no_help_for_field = 2
            inconsistent_help = 3
            no_values_found   = 4
            OTHERS            = 5.
        IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
        ENDIF.
*-- read the selected search help returned value
        READ TABLE lt_return INTO ls_return INDEX 1.
        CHECK sy-subrc EQ 0.
        READ TABLE gt_ncoa2 INDEX p_row_no-row_id.

        ASSIGN COMPONENT p_fieldname OF STRUCTURE gt_ncoa2
                  TO <f_field>.
        IF sy-subrc EQ 0.
          MOVE ls_return-fieldval TO <f_field>.
          MODIFY gt_ncoa2 INDEX p_row_no-row_id.
        ENDIF.
      ELSEIF p_fieldname = 'OPT_USERID'.
        IF g_edit EQ space.
          l_display = 'X'.
        ELSE.
          l_display = space.
        ENDIF.
        PERFORM f4_usermapid USING l_display
                             CHANGING l_value.
        IF NOT l_value IS INITIAL.                          "VIMI-4989
* Begin of VIMI-16816
          READ TABLE gt_ncoa2 INDEX ls_modi-row_id.
          IF sy-subrc IS NOT INITIAL.
* End of VIMI-16816
* Begin of VIMI-21473
*          IF sy-repid NE '/OPT/AR_COA'.                     "VIMI-7380
*            gt_ncoa2-opt_userid = l_value.
*            MODIFY gt_ncoa2 INDEX p_row_no-row_id TRANSPORTING opt_userid.
** Start of INS VIMI-7380
*          ELSE.
*            gt_ncoa2-opt_userid = l_value.
*            IF p_row_no-row_id IS INITIAL.
*              p_row_no-row_id = 1.
*            ENDIF.
*            MODIFY gt_ncoa2 INDEX p_row_no-row_id TRANSPORTING opt_userid.
*          ENDIF.
** End fo INS VIMI-7380
            ASSIGN pr_event_data->m_data->* TO <itab>.
            ls_modi-fieldname = 'OPT_USERID'.
            ls_modi-value     = l_value.
            APPEND ls_modi TO <itab>.
            CLEAR ls_modi.
* End of VIMI-21473
          ENDIF.                                            "VIMI-16816
        ENDIF.                                              "VIMI-4989
* Begin of VIMI-21723
      ELSEIF  p_fieldname = 'EXPENSE_TYPE' OR p_fieldname = 'EXPENSE_TYPE2'.
        IF g_edit EQ space.
          l_display = 'X'.
        ELSE.
          l_display = space.
        ENDIF.
        PERFORM f4_field USING '/ORS/EXPENSE_TYPE_HELP' l_display
                              CHANGING l_value.
        IF NOT l_value IS INITIAL.
          ASSIGN pr_event_data->m_data->* TO <itab>.
          ls_modi-fieldname = p_fieldname.
          ls_modi-value     = l_value.
          APPEND ls_modi TO <itab>.
          CLEAR ls_modi.
        ENDIF.
* End of VIMI-21723
      ENDIF.
* End of INS VIMI-9049

  ENDCASE.
  CHECK g_edit NE space.
  g_changed = 'X'.
ENDFORM.                    " HANDLE_ALVF4
*&--------------------------------------------------------------------*
*&      Form  F4_USERMAPID
*&--------------------------------------------------------------------*
FORM f4_usermapid USING p_display
                  CHANGING l_value.
  DATA lt_return TYPE STANDARD TABLE OF ddshretval WITH HEADER LINE.
  CALL FUNCTION 'F4IF_FIELD_VALUE_REQUEST'
    EXPORTING
      tabname    = space
      fieldname  = space
      searchhelp = '/ORS/000007_OPT_ID'
      display    = p_display
    TABLES
      return_tab = lt_return
    EXCEPTIONS
      OTHERS     = 1.
  CHECK sy-subrc EQ 0.
  CHECK NOT lt_return[] IS INITIAL.
  READ TABLE lt_return INDEX 1.
  l_value = lt_return-fieldval.

ENDFORM.                    "F4_USERMAPID
*&--------------------------------------------------------------------*
*&      Form  f4_field
*&--------------------------------------------------------------------*
FORM f4_field USING p_shlpname p_display
              CHANGING l_value.
  DATA lt_return TYPE STANDARD TABLE OF ddshretval WITH HEADER LINE.
  CALL FUNCTION 'F4IF_FIELD_VALUE_REQUEST'
    EXPORTING
      tabname    = space
      fieldname  = space
      searchhelp = p_shlpname
      display    = p_display
    TABLES
      return_tab = lt_return
    EXCEPTIONS
      OTHERS     = 1.
  CHECK sy-subrc EQ 0.
  CHECK NOT lt_return[] IS INITIAL.
  READ TABLE lt_return INDEX 1.
  l_value = lt_return-fieldval.
ENDFORM.                                                    "f4_field
*&--------------------------------------------------------------------*
*&      Form  validate_data
*&--------------------------------------------------------------------*
FORM validate_data USING sender TYPE REF TO cl_gui_alv_grid
                         p_newrows
                CHANGING pcl_changed
                         TYPE REF TO cl_alv_changed_data_protocol.
  DATA l_mcell       TYPE lvc_s_modi.
  DATA l_msg         TYPE lvc_s_msg1.
  DATA l_deleted_row TYPE lvc_s_moce.

  DATA: l_waers     TYPE waers_curc,
        l_valid     TYPE c,
        lv_msgno    TYPE sy-msgno,                             "VIM60
        lv_msgv1    TYPE sy-msgv1,                             "VIM60
        lv_tabix    TYPE sy-tabix,                             "VIMI-8587
        lv_cnt      TYPE sy-tabix,                               "VIMI-8587
* begin VIMI-7280
        lv_sap_user TYPE xubname,
        lv_bukrs    TYPE bukrs,
        lv_group    TYPE xuclass,
        lv_actvt    TYPE activ_auth VALUE '02',
        lv_usermap  TYPE ty_usermap_line.
* end VIMI-7280
  DATA l_row TYPE lvc_s_roid.                               "I-VIMI-13918
  DATA l_col TYPE lvc_s_col.                                "I-VIMI-13918


  DATA: lv_validate TYPE c. " VIMI-16229
  DATA: lv_protocoll_added TYPE c.                          "VIMI-16148
  DATA: l_valid_collected LIKE l_valid.                     "VIMI-16480

  DATA ls_usermap  TYPE /ors/usermap.                 "VIMI-24393/AMANGAPA
  DATA lcl_usermap TYPE REF TO /ors/usermapping.      "VIMI-24393/AMANGAPA
  constants lv_validate_coderview type c length 12 value '/OPT/AR_COA'."VIMI-26213/MSAMPATH

*  CHECK sy-ucomm NE c_fokay.                               "D-VIMI-13918
  CLEAR gv_line_validity.                                   "VIMI-16480
  READ TABLE pcl_changed->mt_mod_cells INTO l_mcell INDEX 1.

  CASE g_evt_grid->gridname.
    WHEN c_fumview.
*-- Start VIM60
      CLEAR pcl_changed->mt_protocol.
      CASE l_mcell-fieldname.
        WHEN 'MANAGER_ID'.
*   Manager must be of approval user type
          CHECK l_mcell-value NE space.
          TRANSLATE l_mcell-value TO UPPER CASE.          "#EC SYNTCHAR
          READ TABLE gt_usermap WITH KEY opt_userid = l_mcell-value.
          IF sy-subrc NE 0.
            l_valid = 'N'.
          ELSE.
            IF gt_usermap-user_type EQ ' '  OR
               gt_usermap-user_type EQ 'B'.
            ELSE.
              l_valid = 'N'.
            ENDIF.
          ENDIF.
        WHEN 'UTEXT'.
*   User type can't be changed if there is dependent data
*          TRANSLATE l_mcell-value TO UPPER CASE.
          READ TABLE gt_usermap INDEX l_mcell-row_id.
          IF sy-subrc EQ 0.
            IF ( ( gt_usermap-user_type NE l_mcell-value+0(1) ) AND
                 ( ( gt_usermap-user_type EQ ' '  OR
                   gt_usermap-user_type EQ 'B' ) AND
                    l_mcell-value+0(1) = 'R' ) ).
              READ TABLE gt_coa WITH KEY
                  opt_userid = gt_usermap-opt_userid.
              IF sy-subrc EQ 0.
                l_valid = 'A'.
              ENDIF.
            ELSEIF ( ( gt_usermap-user_type NE l_mcell-value+0(1) ) AND
                     ( ( gt_usermap-user_type EQ 'R'  OR
                         gt_usermap-user_type EQ 'B' ) AND
                         l_mcell-value+0(1) = 'A' ) ).
              IF NOT gt_auth IS INITIAL.
                READ TABLE gt_auth INTO gs_auth WITH KEY
             userid = gt_usermap-opt_userid
             TRANSPORTING NO FIELDS.
                IF sy-subrc EQ 0.
                  l_valid = 'R'.
                ENDIF.
              ELSE.
                READ TABLE gt_authn INTO gs_authn WITH KEY
                           userid = gt_usermap-opt_userid
                           TRANSPORTING NO FIELDS.
                IF sy-subrc EQ 0.
                  l_valid = 'R'.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.
* begin VIMI-7280
        WHEN 'SAP_USER_ID'.   "if SAP user ID is changed, check auth.
          TRANSLATE l_mcell-value TO UPPER CASE.
          lv_sap_user = l_mcell-value.
          PERFORM get_sap_user_group
            USING lv_sap_user
            CHANGING lv_group.
          CALL METHOD /opt/vim_auth_check=>check_appr_usermap
            EXPORTING
              pi_group = lv_group
              pi_actvt = lv_actvt
            EXCEPTIONS
              failed   = 1.
          IF sy-subrc <> 0.
            CALL METHOD pcl_changed->add_protocol_entry
              EXPORTING
                i_msgid     = '/OPT/VIM_701'
                i_msgty     = 'E'
                i_msgno     = '074'
                i_msgv1     = lv_group
                i_fieldname = l_mcell-fieldname.
            l_valid = 'N'.
          ENDIF.
* end VIMI-7280
      ENDCASE.
*-- End VIM60
* Begin of VIMI-22104
      IF pcl_changed->mt_mod_cells[] IS NOT INITIAL OR
         pcl_changed->mt_deleted_rows[] IS NOT INITIAL.
        gv_changedoc_usermap = 'X'.
      ENDIF.
* End of VIMI-22104

    WHEN c_fcoaview.
      CLEAR pcl_changed->mt_protocol.
*Begin of VIMI-8587/ccheemar
      DESCRIBE TABLE pcl_changed->mt_mod_cells LINES lv_tabix.
      lv_cnt  = '1'.
      DO lv_tabix TIMES.
        READ TABLE pcl_changed->mt_mod_cells INTO l_mcell INDEX lv_cnt.
*end of VIMI-8587/ccheemar
        lv_cnt = lv_cnt + '1'.                            "I-VIMI-13918
        CASE l_mcell-fieldname.
          WHEN 'OPT_USERID'.
            CHECK l_mcell-value NE space.
            TRANSLATE l_mcell-value TO UPPER CASE.        "#EC SYNTCHAR
            READ TABLE gt_usermap WITH KEY opt_userid = l_mcell-value.
* begin VIMI-7280
            IF sy-subrc <> 0.
              READ TABLE gt_usermap_filtered INTO gt_usermap
                WITH KEY opt_userid = l_mcell-value.
            ENDIF.
* end VIMI-7280
            IF sy-subrc NE 0.
              l_valid = 'N'.
              EXIT."VIMI-8587-added/ccheemar
            ELSE.
*-- Start VIM60
              IF gt_usermap-user_type EQ ' '  OR
                 gt_usermap-user_type EQ 'B'.
              ELSE.
                l_valid = 'N'.
                EXIT."VIMI-8587-added/ccheemar
              ENDIF.
            ENDIF.
*-- End VIM60
          WHEN 'CURRENCY'.
            CHECK l_mcell-value NE space.
            TRANSLATE l_mcell-value TO UPPER CASE.        "#EC SYNTCHAR
            SELECT SINGLE waers INTO l_waers FROM tcurc
              WHERE waers = l_mcell-value.
            IF sy-subrc NE 0.
              l_valid = 'N'.
              EXIT."VIMI-8587-added/ccheemar
            ENDIF.
*-- Start for SP1
          WHEN 'EXPENSE_TYPE'.
            CHECK l_mcell-value NE space.
            PERFORM validate_fields USING l_mcell '/ORS/EXPENSE_TYP'
                                                  'EXPENSE_TYPE'
                                    CHANGING l_valid.
            IF l_valid = 'N'.              "vimi-8587-added/ccheemar
              EXIT.                        "vimi-8587-added/ccheemar
            ENDIF.                       "vimi-8587-added/ccheemar
*-- End for sp1
          WHEN 'BUKRS'.
            CHECK l_mcell-value NE space.
            PERFORM validate_fields USING l_mcell 'T001' 'BUKRS'
                                    CHANGING l_valid.
* begin VIMI-7280
            IF p_newrows IS INITIAL.
              lv_bukrs = l_mcell-value.
              TRANSLATE lv_bukrs TO UPPER CASE.
              READ TABLE gt_coa INDEX l_mcell-row_id.
              IF sy-subrc = 0.
                READ TABLE gt_usermap INTO lv_usermap
                  WITH KEY opt_userid = gt_coa-opt_userid.
                IF sy-subrc <> 0.
                  READ TABLE gt_usermap_filtered INTO lv_usermap
                    WITH KEY opt_userid = gt_coa-opt_userid.
                ENDIF.
                IF sy-subrc = 0.
                  PERFORM get_sap_user_group
                    USING lv_usermap-sap_user_id
                    CHANGING lv_group.
                  IF lv_bukrs = '*' OR lv_bukrs IS INITIAL.
                    CALL METHOD /opt/vim_auth_check=>check_appr_limits
                      EXPORTING
                        pi_group = lv_group
                        pi_bukrs = '    '
                        pi_actvt = lv_actvt
                      EXCEPTIONS
                        failed   = 1.
                  ELSE.
                    CALL METHOD /opt/vim_auth_check=>check_appr_limits
                      EXPORTING
                        pi_group = lv_group
                        pi_bukrs = lv_bukrs
                        pi_actvt = lv_actvt
                      EXCEPTIONS
                        failed   = 1.
                  ENDIF.
                  IF sy-subrc <> 0.
                    CALL METHOD pcl_changed->add_protocol_entry
                      EXPORTING
                        i_msgid     = '/OPT/VIM_701'
                        i_msgty     = 'E'
                        i_msgno     = '078'
                        i_msgv1     = lv_usermap-sap_user_id
                        i_msgv2     = lv_bukrs
                        i_fieldname = l_mcell-fieldname.
                    l_valid = 'N'.
                  ENDIF.
                ENDIF.
              ENDIF.
            ENDIF.
            IF l_valid = 'N'.              "vimi-8587-added/ccheemar
              EXIT.                        "vimi-8587-added/ccheemar
            ENDIF.                       "vimi-8587-added/ccheemar
* end VIMI-7280
          WHEN 'KOSTL'.
            CHECK l_mcell-value NE space.
            PERFORM validate_fields USING l_mcell 'CSKS' 'KOSTL'
                                    CHANGING l_valid.
            IF l_valid = 'N'.              "vimi-8587-added/ccheemar
              EXIT.                        "vimi-8587-added/ccheemar
            ENDIF.                       "vimi-8587-added/ccheemar
          WHEN 'WBS_ELEMENT'.
*          CHECK L_MCELL-VALUE NE SPACE.
*          PERFORM VALIDATE_FIELDS USING L_MCELL 'T001' 'BUKRS'
*                                  CHANGING L_VALID.
          WHEN 'INTERNAL_ORDER'.
            CHECK l_mcell-value NE space.
            PERFORM validate_fields USING l_mcell 'AUFK' 'AUFNR'
                                    CHANGING l_valid.
            IF l_valid = 'N'.              "vimi-8587-added/ccheemar
              EXIT.                        "vimi-8587-added/ccheemar
            ENDIF.                       "vimi-8587-added/ccheemar
          WHEN 'PROJK'.
            CHECK l_mcell-value NE space.
            PERFORM validate_fields USING l_mcell 'PRPS' 'PSPNR'
                                    CHANGING l_valid.
            IF l_valid = 'N'.              "vimi-8587-added/ccheemar
              EXIT.                        "vimi-8587-added/ccheemar
            ENDIF.                         "vimi-8587-added/ccheemar
          WHEN 'GL_ACCT'.
            CHECK l_mcell-value NE space.
            PERFORM validate_fields USING l_mcell 'SKA1' 'SAKNR'
                                    CHANGING l_valid.
            IF l_valid = 'N'.              "vimi-8587-added/ccheemar
              EXIT.                        "vimi-8587-added/ccheemar
            ENDIF.                       "vimi-8587-added/ccheemar
          WHEN 'ACTIVITY_TYPE'.
            CHECK l_mcell-value NE space.
            PERFORM validate_fields USING l_mcell 'CSLA' 'LSTAR'
                                    CHANGING l_valid.
            IF l_valid = 'N'.              "vimi-8587-added/ccheemar
              EXIT.                        "vimi-8587-added/ccheemar
            ENDIF.                         "vimi-8587-added/ccheemar
          WHEN 'NETWORK_NO'.
*          CHECK L_MCELL-VALUE NE SPACE.
*          PERFORM VALIDATE_FIELDS USING L_MCELL 'CSLA' 'LSTAR'
*                                  CHANGING L_VALID.
          WHEN 'PROFIT_CENTER'.
            CHECK l_mcell-value NE space.
            PERFORM validate_fields USING l_mcell 'CEPC' 'PRCTR'
                                    CHANGING l_valid.
            IF l_valid = 'N'.              "vimi-8587-added/ccheemar
              EXIT.                        "vimi-8587-added/ccheemar
            ENDIF.                       "vimi-8587-added/ccheemar
          WHEN 'PROJECT_NO'.
*          CHECK L_MCELL-VALUE NE SPACE.
*          PERFORM VALIDATE_FIELDS USING L_MCELL 'CSLA' 'LSTAR'
*                                  CHANGING L_VALID.
          WHEN 'REAL_ESTATE_CON'.
*          CHECK L_MCELL-VALUE NE SPACE.
*          PERFORM VALIDATE_FIELDS USING L_MCELL 'CSLA' 'LSTAR'
*                                  CHANGING L_VALID.
          WHEN 'PLANT'.
            CHECK l_mcell-value NE space.
            PERFORM validate_fields USING l_mcell 'T001W' 'WERKS'
                                    CHANGING l_valid.
            IF l_valid = 'N'.              "vimi-8587-added/ccheemar
              EXIT.                        "vimi-8587-added/ccheemar
            ENDIF.                       "vimi-8587-added/ccheemar
          WHEN 'ASSIGNMENT'.
*          CHECK L_MCELL-VALUE NE SPACE.
*          PERFORM VALIDATE_FIELDS USING L_MCELL 'CSLA' 'LSTAR'
*                                  CHANGING L_VALID.
          WHEN 'EARMARKED_FUND'.
            CHECK l_mcell-value NE space.
            PERFORM validate_fields USING l_mcell 'KBLK' 'BELNR'
                                    CHANGING l_valid.
            IF l_valid = 'N'.              "vimi-8587-added/ccheemar
              EXIT.                        "vimi-8587-added/ccheemar
            ENDIF.                       "vimi-8587-added/ccheemar
          WHEN 'COST_OBJECT'.
            CHECK l_mcell-value NE space.
            PERFORM validate_fields USING l_mcell 'CKPH' 'KSTRG'
                                    CHANGING l_valid.
            IF l_valid = 'N'.              "vimi-8587-added/ccheemar
              EXIT.                        "vimi-8587-added/ccheemar
            ENDIF.                       "vimi-8587-added/ccheemar
          WHEN 'FUND_CENTER'.
            CHECK l_mcell-value NE space.
            PERFORM validate_fields USING l_mcell 'FMFCTR' 'FICTR'
                                    CHANGING l_valid.
            IF l_valid = 'N'.              "vimi-8587-added/ccheemar
              EXIT.                        "vimi-8587-added/ccheemar
            ENDIF.                       "vimi-8587-added/ccheemar
          WHEN 'BUSINESS_AREA'.
            CHECK l_mcell-value NE space.
            PERFORM validate_fields USING l_mcell 'TGSB' 'GSBER'
                                    CHANGING l_valid.
            IF l_valid = 'N'.              "vimi-8587-added/ccheemar
              EXIT.                        "vimi-8587-added/ccheemar
            ENDIF.                       "vimi-8587-added/ccheemar
          WHEN OTHERS.
        ENDCASE.
*        lv_cnt = lv_cnt + '1'."VIMI-8587-added/ccheemar        " D-VIMI-13918
      ENDDO."VIMI-8587-added/ccheemar

    WHEN c_fcoderview.
      CLEAR pcl_changed->mt_protocol.
        CASE l_mcell-fieldname.
          WHEN 'DEFAULT_FLAG'.
           IF sy-repid NE lv_validate_coderview.     "Insert of VIMI-26213/MSAMPATH
            CHECK l_mcell-value NE space.
            IF p_newrows IS INITIAL.
              READ TABLE gt_coder INDEX l_mcell-row_id.
* For a combination of requester id or/and company code, only one
* default coder is allowed
              IF g_constant EQ 'R'.
                LOOP AT gt_coder WHERE coder_id     NE gt_coder-coder_id
                              AND   requestor_id EQ gt_coder-requestor_id
                              AND   default_flag EQ 'X'.
                  EXIT.
                ENDLOOP.
* begin VIMI-7280
                IF sy-subrc <> 0.   "not found - try the filtered table
                  LOOP AT gt_coder_filtered  TRANSPORTING NO FIELDS
                        WHERE coder_id NE gt_coder-coder_id
                              AND   requestor_id EQ gt_coder-requestor_id
                              AND   default_flag EQ 'X'.
                    EXIT.
                  ENDLOOP.
                ENDIF.
* end VIMI-7280
              ELSEIF g_constant EQ 'C'.
                LOOP AT gt_coder WHERE coder_id     NE gt_coder-coder_id
                              AND   company_code EQ gt_coder-company_code
                              AND   default_flag EQ 'X'.
                  EXIT.
                ENDLOOP.
* begin VIMI-7280
                IF sy-subrc <> 0.   "not found - try the filtered table
                  LOOP AT gt_coder_filtered TRANSPORTING NO FIELDS
                        WHERE coder_id NE gt_coder-coder_id
                              AND   company_code EQ gt_coder-company_code
                              AND   default_flag EQ 'X'.           .
                    EXIT.
                  ENDLOOP.
                ENDIF.
* end VIMI-7280
              ELSEIF g_constant EQ 'B'.
                LOOP AT gt_coder WHERE coder_id     NE gt_coder-coder_id
                              AND   requestor_id EQ gt_coder-requestor_id
                              AND   company_code EQ gt_coder-company_code
                              AND   default_flag EQ 'X'.
                  EXIT.
                ENDLOOP.
* begin VIMI-7280
                IF sy-subrc <> 0.   "not found - try the filtered table
                  LOOP AT gt_coder_filtered TRANSPORTING NO FIELDS
                        WHERE coder_id NE gt_coder-coder_id
                             AND   requestor_id EQ gt_coder-requestor_id
                             AND   company_code EQ gt_coder-company_code
                             AND   default_flag EQ 'X'.
                    EXIT.
                  ENDLOOP.
                ENDIF.
* end VIMI-7280
              ENDIF.
              CHECK sy-subrc EQ 0.
              CLEAR: pcl_changed->mt_good_cells.
              CALL METHOD pcl_changed->add_protocol_entry
                EXPORTING
                  i_msgid     = '/OPT/VIM_701'
                  i_msgty     = 'E'
                  i_msgno     = '010'
                  i_fieldname = l_mcell-fieldname.
              CALL METHOD pcl_changed->display_protocol( ).
              CALL METHOD g_helper->refresh_grid( g_grid ).
            ELSE.
              READ TABLE gt_codern INDEX l_mcell-row_id.
* For a combination of requester id and company code, only one default
* coder is allowed
              LOOP AT gt_codern WHERE coder_id     NE gt_codern-coder_id
                             AND   requestor_id EQ gt_codern-requestor_id
                             AND   company_code EQ gt_codern-company_code.
                EXIT.
              ENDLOOP.
              CHECK sy-subrc EQ 0.
              CLEAR: pcl_changed->mt_good_cells.
              CALL METHOD pcl_changed->add_protocol_entry
                EXPORTING
                  i_msgid     = '/OPT/VIM_701'
                  i_msgty     = 'E'
                  i_msgno     = '010'
                  i_fieldname = l_mcell-fieldname.
              CALL METHOD pcl_changed->display_protocol( ).
              CALL METHOD g_helper->refresh_grid( g_gridnew ).
            ENDIF.
           ENDIF.                  "Insert of VIMI-26213/MSAMPATH
          WHEN 'CODER_ID'.
            CHECK l_mcell-value NE space.
            TRANSLATE l_mcell-value TO UPPER CASE.        "#EC SYNTCHAR
            READ TABLE gt_usermap WITH KEY opt_userid = l_mcell-value.
* begin VIMI-7280
            IF sy-subrc <> 0.
              READ TABLE gt_usermap_filtered INTO gt_usermap
                WITH KEY opt_userid = l_mcell-value.
            ENDIF.
* end VIMI-7280
            IF sy-subrc NE 0.
              l_valid = 'N'.
            ELSE.
*-- Start VIM60
              IF gt_usermap-user_type EQ ' '  OR
                 gt_usermap-user_type EQ 'B'.
              ELSE.
                l_valid = 'N'.
              ENDIF.
            ENDIF.
*-- End VIM60
          WHEN 'REQUESTOR_ID'.
            IF g_constant = 'R' OR g_constant = 'B'.
              IF l_mcell-value NE space.
                TRANSLATE l_mcell-value TO UPPER CASE.    "#EC SYNTCHAR
*Begin of VIMI-5625 - cnicklas - 5.2 SP7
                IF l_mcell-value = '*'.
*No further check
                ELSE.
*End of VIMI-5625 - cnicklas - 5.2 SP7
                  READ TABLE gt_usermap WITH KEY
                              opt_userid = l_mcell-value.
* begin VIMI-7280
                  IF sy-subrc <> 0.
                    READ TABLE gt_usermap_filtered INTO gt_usermap
                      WITH KEY opt_userid = l_mcell-value.
                  ENDIF.
* end VIMI-7280
                ENDIF.                                        "VIMI-5625
              ENDIF.
              IF sy-subrc NE 0.
                l_valid = 'N'.
              ELSE.
*-- Start VIM60
                IF gt_usermap-user_type EQ ' '  OR
                   gt_usermap-user_type EQ 'B'.
                ELSE.
                  l_valid = 'N'.
                ENDIF.
              ENDIF.
*-- End VIM60
            ENDIF.
          WHEN 'COMPANY_CODE'.
*-- Only '*' or valid value is allowed
            IF g_constant = 'C' OR g_constant = 'B'.
              CHECK l_mcell-value NE space.
              PERFORM validate_fields USING l_mcell 'T001' 'BUKRS'
                                     CHANGING l_valid.
            ENDIF.
* begin VIMI-7280
            IF p_newrows IS INITIAL.
              lv_bukrs = l_mcell-value.
              READ TABLE gt_coder INDEX l_mcell-row_id.
              IF sy-subrc = 0.
                READ TABLE gt_usermap INTO lv_usermap
                  WITH KEY opt_userid = gt_coder-coder_id.
                IF sy-subrc <> 0.
                  READ TABLE gt_usermap_filtered INTO lv_usermap
                    WITH KEY opt_userid = gt_coder-coder_id.
                ENDIF.
                IF sy-subrc = 0.
                  IF lv_bukrs = '*' OR lv_bukrs IS INITIAL.
                    PERFORM get_sap_user_group
                      USING lv_usermap-sap_user_id
                      CHANGING lv_group.
                    CALL METHOD /opt/vim_auth_check=>check_appr_coder
                      EXPORTING
                        pi_group = lv_group
                        pi_bukrs = '    '
                        pi_actvt = lv_actvt
                      EXCEPTIONS
                        failed   = 1.
                  ELSE.
                    PERFORM get_sap_user_group
                      USING gt_usermap-sap_user_id
                      CHANGING lv_group.
                    CALL METHOD /opt/vim_auth_check=>check_appr_coder
                      EXPORTING
                        pi_group = lv_group
                        pi_bukrs = lv_bukrs
                        pi_actvt = lv_actvt
                      EXCEPTIONS
                        failed   = 1.
                  ENDIF.
                  IF sy-subrc <> 0.
                    CALL METHOD pcl_changed->add_protocol_entry
                      EXPORTING
                        i_msgid     = '/OPT/VIM_701'
                        i_msgty     = 'E'
                        i_msgno     = '078'
                        i_msgv1     = lv_usermap-sap_user_id
                        i_msgv2     = lv_bukrs
                        i_fieldname = l_mcell-fieldname.
                    l_valid = 'N'.
                  ENDIF.
                ENDIF.
              ENDIF.
            ENDIF.
* end VIMI-7280
        ENDCASE.
* Begin of VIMI-23560/AMANGAPA
      IF pcl_changed->mt_mod_cells[] IS NOT INITIAL OR
         pcl_changed->mt_deleted_rows[] IS NOT INITIAL.
        gv_changedoc_coder = 'X'.
      ENDIF.
* End of VIMI-23560/AMANGAPA

*-- Start VIM 6.0
    WHEN c_freportview.
      CLEAR pcl_changed->mt_protocol.
      CASE l_mcell-fieldname.
        WHEN 'USERID'.
          CHECK l_mcell-value NE space.
          TRANSLATE l_mcell-value TO UPPER CASE.          "#EC SYNTCHAR
          READ TABLE gt_usermap WITH KEY opt_userid = l_mcell-value.
          IF sy-subrc NE 0.
            l_valid = 'N'.
          ELSE.
            IF gt_usermap-user_type EQ 'R'  OR
               gt_usermap-user_type EQ 'B'.
            ELSE.
              l_valid = 'N'.
            ENDIF.
          ENDIF.
        WHEN 'BUKRS'.
*   Only '*' or valid value is allowed
          CHECK l_mcell-value NE space.
          PERFORM validate_fields USING l_mcell 'T001' 'BUKRS'
                                 CHANGING l_valid.
        WHEN 'LOGSYS'.
*   Only '*' or valid value is allowed
          CHECK l_mcell-value NE space.
          PERFORM validate_fields USING l_mcell 'TBDLS' 'LOGSYS'
                                 CHANGING l_valid.
        WHEN 'CHANNEL'.
*   Only '*' or valid value is allowed
          CHECK l_mcell-value NE space.
          PERFORM validate_fields USING l_mcell '/OPT/VIM_CHNL'
                                        'CHANNEL_ID'
                                 CHANGING l_valid.
      ENDCASE.
*-- End VIM 6.0
* Start of INS VIMI-7380.
    WHEN c_applevel.

      LOOP AT pcl_changed->mt_mod_cells INTO l_mcell.
        IF l_mcell-fieldname = 'BTEXT'.
          APPEND l_mcell TO gt_rowid.
        ENDIF.
      ENDLOOP.
* End of INS VIMI-7380

* Begin of VIMI-22104
      IF pcl_changed->mt_mod_cells[] IS NOT INITIAL OR
         pcl_changed->mt_deleted_rows[] IS NOT INITIAL.
        gv_changedoc_applimit = 'X'.
      ENDIF.
* End of VIMI-22104

* begin of VIMI-16229
    WHEN 'COAAPRVIEW' OR 'COACRVIEW'.
* Z-KONST to be inserted
      CLEAR l_valid_collected.
      CALL FUNCTION '/OPT/VIM_READ_CONSTANT'
        EXPORTING
          prod_code   = 'IAP'
          param_name  = 'COA_VAL_INPUT_FLDS'
        IMPORTING
          param_value = lv_validate
        EXCEPTIONS
          OTHERS      = 0.
      IF sy-subrc <> 0.
        lv_validate = abap_false.
      ENDIF.
      IF lv_validate = abap_true.
        LOOP AT pcl_changed->mt_mod_cells INTO l_mcell.
          CASE l_mcell-fieldname.
* begin of VIMI-16148

            WHEN 'OPT_USERID'.
              CHECK l_mcell-value NE space.
              TRANSLATE l_mcell-value TO UPPER CASE.      "#EC SYNTCHAR
              READ TABLE gt_usermap BINARY SEARCH WITH KEY opt_userid = l_mcell-value .
              IF sy-subrc <> 0.
                READ TABLE gt_usermap_filtered INTO gt_usermap BINARY SEARCH
                  WITH KEY opt_userid = l_mcell-value.
              ENDIF.
              IF sy-subrc <> 0.
                l_valid = 'N'.
* Begin of VIMI-24393/AMANGAPA
                REFRESH gt_usermap_new.
                PERFORM get_usermap_object CHANGING lcl_usermap.
                LOOP AT gt_usermap WHERE opt_userid+0(1) = '&'.
                  ls_usermap = gt_usermap.
                  CALL METHOD lcl_usermap->addnewmapping
                    CHANGING
                      one_user           = ls_usermap
                    EXCEPTIONS
                      cannot_create_user = 1
                      OTHERS             = 2.
                  IF ls_usermap-opt_userid EQ l_mcell-value.
                    APPEND ls_usermap TO gt_usermap_new.
                    CLEAR:l_valid,ls_usermap.
                  ELSE.
                    CONTINUE.
                  ENDIF.
                ENDLOOP.
* End of VIMI-24393/AMANGAPA
              ELSE.
                IF gt_usermap-user_type EQ ' '  OR
                   gt_usermap-user_type EQ 'B'.
                ELSE.
                  l_valid = 'N'.
                ENDIF.
              ENDIF.
              IF  l_valid = 'N'.
                CALL METHOD pcl_changed->add_protocol_entry
                  EXPORTING
                    i_msgid     = '/OPT/VIM_701'
                    i_msgty     = 'E'
                    i_msgno     = '088'
                    i_msgv1     = l_mcell-value
                    i_fieldname = l_mcell-fieldname.
                lv_protocoll_added = 'X'.
*                EXIT.
              ENDIF.
* end of VIMI-16148
            WHEN 'EXPENSE_TYPE' OR 'EXPENSE_TYPE2'.
              CHECK l_mcell-value NE space.
              PERFORM validate_fields USING l_mcell '/ORS/EXPENSE_TYP'
                                                    'EXPENSE_TYPE'
                                      CHANGING l_valid.
            WHEN 'BUKRS' OR 'BUKRS2' OR 'COMP_CODE'.
*   Only '*' or valid value is allowed
              CHECK l_mcell-value NE space.
              PERFORM validate_fields USING l_mcell 'T001' 'BUKRS'
                                     CHANGING l_valid.

            WHEN 'KOSTL' OR 'KOSTL2'.
              CHECK l_mcell-value NE space.
              PERFORM validate_fields USING l_mcell 'CSKS' 'KOSTL'
                                      CHANGING l_valid.

            WHEN 'WBS_ELEMENT' OR 'WBS_ELEMENT2'.
              CHECK l_mcell-value NE space.
              PERFORM validate_wbs_element USING l_mcell-value
                                      CHANGING l_valid.
            WHEN 'INTERNAL_ORDER' OR 'INTERNAL_ORDER2' OR
                 'NETWORK_NO'     OR 'NETWORK_NO2'.
              CHECK l_mcell-value NE space.
              PERFORM validate_fields USING l_mcell 'AUFK' 'AUFNR'
                                      CHANGING l_valid.

            WHEN 'GL_ACCT' OR 'GL_ACCT2'.
              CHECK l_mcell-value NE space.
              PERFORM validate_fields USING l_mcell 'SKA1' 'SAKNR'
                                      CHANGING l_valid.

            WHEN 'PROFIT_CENTER' OR 'PROFIT_CENTER2'.
              CHECK l_mcell-value NE space.
              PERFORM validate_fields USING l_mcell 'CEPC' 'PRCTR'
                                      CHANGING l_valid.

            WHEN 'PLANT' OR 'PLANT2'.
              CHECK l_mcell-value NE space.
              PERFORM validate_fields USING l_mcell 'T001W' 'WERKS'
                                      CHANGING l_valid.

            WHEN 'EARMARKED_FUND' OR 'EARMARKED_FUND2'.
              CHECK l_mcell-value NE space.
              PERFORM validate_fields USING l_mcell 'KBLK' 'BELNR'
                                      CHANGING l_valid.

            WHEN 'COST_OBJECT' OR 'COST_OBJECT2'.
              CHECK l_mcell-value NE space.
              PERFORM validate_fields USING l_mcell 'CKPH' 'KSTRG'
                                      CHANGING l_valid.

            WHEN 'FUND_CENTER' OR 'FUND_CENTER2'.
              CHECK l_mcell-value NE space.
              PERFORM validate_fields USING l_mcell 'FMFCTR' 'FICTR'
                                      CHANGING l_valid.

            WHEN 'BUSINESS_AREA' OR 'BUSINESS_AREA2'.
              CHECK l_mcell-value NE space.
              PERFORM validate_fields USING l_mcell 'TGSB' 'GSBER'
                                      CHANGING l_valid.

            WHEN 'ACTIVITY_TYPE' OR 'ACTIVITY_TYPE2'.
              CHECK l_mcell-value NE space.
              PERFORM validate_fields USING l_mcell 'CSLA' 'LSTAR'
                                      CHANGING l_valid.

          ENDCASE.
          IF l_valid = 'N'.
            CLEAR l_valid.
            l_valid_collected = 'N'.
            lv_msgno = '054'.
            lv_msgv1 = l_mcell-value.
            CALL METHOD pcl_changed->add_protocol_entry
              EXPORTING
                i_msgid     = '/OPT/VIM_701'
                i_msgty     = 'E'
*               i_msgno     = '054'
                i_msgno     = lv_msgno
*               i_msgv1     = l_mcell-value
                i_msgv1     = lv_msgv1
                i_fieldname = l_mcell-fieldname
                i_row_id    = l_mcell-row_id.
            lv_protocoll_added = 'X'.
          ENDIF.
        ENDLOOP.
      ENDIF.

* end of VIMI-16299
* Begin of VIMI-22104
      IF pcl_changed->mt_mod_cells[] IS NOT INITIAL.
        gv_changedoc_coa = 'X'.
      ENDIF.
      IF pcl_changed->mt_deleted_rows[] IS NOT INITIAL.
        gv_changedoc_coa = 'X'.
        IF g_evt_grid->gridname EQ 'COACRVIEW'.
          LOOP AT pcl_changed->mt_deleted_rows INTO l_deleted_row.
            READ TABLE gt_ncoa2 INDEX l_deleted_row-row_id.
            IF sy-subrc EQ 0.
              MOVE-CORRESPONDING gt_ncoa2 TO gt_ncoa_del_rec.
              APPEND gt_ncoa_del_rec.
            ENDIF.
            CLEAR:l_deleted_row.
          ENDLOOP.
        ELSE.
          LOOP AT pcl_changed->mt_deleted_rows INTO l_deleted_row.
            READ TABLE gt_ncoa3 INDEX l_deleted_row-row_id.
            IF sy-subrc EQ 0.
              MOVE-CORRESPONDING gt_ncoa3 TO gt_ncoa_del_rec.
              APPEND gt_ncoa_del_rec.
            ENDIF.
            CLEAR: l_deleted_row.
          ENDLOOP.
        ENDIF.
      ENDIF.
* End of VIMI-22104
  ENDCASE.

* begin of VIMI-16480
  IF l_valid_collected IS NOT INITIAL.
    l_valid = l_valid_collected.
  ENDIF.
* end of VIMI-16480

*-- Start VIM 6.0
*  IF l_valid = 'N'.

  IF NOT l_valid IS INITIAL.

    IF l_valid = 'N'.
      lv_msgno = '054'.
      lv_msgv1 = l_mcell-value.
    ELSEIF l_valid = 'A'.
      lv_msgno = '070'.
      lv_msgv1 = 'COA'.
    ELSEIF l_valid = 'R'.
      lv_msgno = '070'.
      lv_msgv1 = 'Reporting'.                               "#EC NOTEXT
    ENDIF.
*-- End VIM 6.0

    IF sy-repid NE '/OPT/AR_COA'.                           "VIMI-16229
      CLEAR: pcl_changed->mt_good_cells.
    ELSE.                                                   "VIMI-16229
      gv_line_validity = l_valid.                           "VIMI-16229
    ENDIF.                                                  "VIMI-16229
    IF lv_protocoll_added <> 'X'. " VIMI-16148
      CALL METHOD pcl_changed->add_protocol_entry
        EXPORTING
          i_msgid     = '/OPT/VIM_701'
          i_msgty     = 'E'
*         i_msgno     = '054'
          i_msgno     = lv_msgno
*         i_msgv1     = l_mcell-value
          i_msgv1     = lv_msgv1
          i_fieldname = l_mcell-fieldname
          i_row_id    = l_mcell-row_id.                     "VIMI-16229
    ENDIF.                                                  "VIMI-16148
    CALL METHOD pcl_changed->display_protocol( ).
* Begin of D-VIMI-13918
*    IF p_newrows IS INITIAL.
*      CALL METHOD g_helper->refresh_grid( g_grid ).
*    ELSE.
*      CALL METHOD g_helper->refresh_grid( g_gridnew ).
*    ENDIF.
* End of D-VIMI-13918

* Begin of I-VIMI-13918
    l_row-row_id = l_mcell-row_id.
    l_col-fieldname = l_mcell-fieldname.
* Set cursor on a cell with Invalid Input
    IF p_newrows IS INITIAL.
      CALL METHOD g_grid->set_current_cell_via_id
        EXPORTING
          is_row_no    = l_row
          is_column_id = l_col.
    ELSE.
      CALL METHOD g_gridnew->set_current_cell_via_id
        EXPORTING
          is_row_no    = l_row
          is_column_id = l_col.
    ENDIF.
* End of I-VIMI-13918
  ENDIF.
ENDFORM.                    "validate_data
*&---------------------------------------------------------------------*
*&      Form  PBO_TABSTRIP
*&---------------------------------------------------------------------*
FORM pbo_tabstrip .
  IF ( NOT g_evt_grid IS INITIAL )          AND
     ( g_evt_grid->gridname NE c_fcodcoa  ) AND             " VIMI-9049
     ( g_evt_grid->gridname NE c_fapprcoa ).
    ts_umdata-activetab = g_evt_grid->gridname.
* begin of VIMI-9049
  ELSEIF NOT g_evt_grid IS INITIAL.
    ts_umdata-activetab = c_fcoaview.
  ENDIF.                                                    " VIMI-9049

  IF g_evt_grid IS INITIAL OR g_okcode_save = c_fcoderview AND
     sy-repid = '/OPT/AR_COA'.
    ts_umdata-activetab = c_fcoderview.
  ENDIF.
* End of VIMI-9049

  LOOP AT SCREEN.
    IF screen-name = 'C_FREPORTVIEW'.
      IF gv_bobj_display IS INITIAL.
        screen-invisible = 1.
        MODIFY SCREEN.
      ENDIF.
    ENDIF.
* begin of VIMI-16201
    IF gv_simple_mode = 'X'.
      ts_umdata-activetab = c_fcoaview.
      IF screen-name = 'C_FUMVIEW'
        OR screen-name = 'UMVIEW'
        OR screen-name = 'APPR_LIMIT'
        OR screen-name = 'C_FCODERVIEW'.
        screen-invisible = 1.
        MODIFY SCREEN.
      ENDIF.
    ENDIF.
* end of VIMI-16201

  ENDLOOP.
* Start of INS VIMI-7380 (LIAP)
*  IF sy-repid = '/OPT/AR_COA'.
*    LOOP AT SCREEN.
*      IF screen-name = 'C_FCODERVIEW'."c_fcoderview.
*        screen-invisible = 1.
*        MODIFY SCREEN.
*      ENDIF.
*    ENDLOOP.
*  ENDIF.
* End of INS VIMI-7380 (LIAP)
ENDFORM.                    " PBO_TABSTRIP
*&---------------------------------------------------------------------*
*&      Form  SAVE_DATA
*&---------------------------------------------------------------------*
FORM save_data .
  DATA lcl_usermap TYPE REF TO /ors/usermapping.
  DATA l_umdata    TYPE /ors/usermap.
  DATA l_prefer    TYPE /ors/user_prefer.       " User Preferences
  DATA: lt_recent TYPE TABLE OF /ors/recentuser INITIAL SIZE 0,  "SP1
        ls_recent TYPE /ors/recentuser.              "SP1
* Begin of VIM 5.2 SP5 - VIMI-3677 - CNICKLAS
  DATA: "lt_coa_old TYPE TABLE OF /opt/bl_appcoa,           "VIMI-23560/AMANGAPA
    "lt_usermap_old TYPE TABLE OF /ors/usermap,         "VIMI-23560/AMANGAPA
    ls_usermap     TYPE /ors/usermap,                       "VIMI-12081
    lt_substitutes TYPE TABLE OF /ors/substitute,       "VIMI-12081
    lt_usermap_new TYPE TABLE OF /ors/usermap,          "VIMI-7280
    lt_coa_new     TYPE TABLE OF /opt/bl_appcoa,        "VIMI-7280
    lt_prefer      TYPE TABLE OF /ors/user_prefer.         "VIMI-9640
  DATA: lv_txt1 TYPE string,                                "VIMI-9049
        lv_txt2 TYPE string.                                "VIMI-9049
  DATA : l_text(100) TYPE c.                                "VIMI-10151

* Begin of I-VIMI-13918
  DATA lw_coa_old TYPE /opt/bl_appcoa.
  DATA l_modified_user TYPE c.
  DATA l_count TYPE /opt/counter.
  DATA lt_coa_f    TYPE STANDARD TABLE OF /opt/bl_appcoa  WITH HEADER LINE.
  DATA lt_coa_m    TYPE STANDARD TABLE OF /opt/bl_appcoa  WITH HEADER LINE.
  DATA lt_userpref TYPE STANDARD TABLE OF /ors/user_prefer WITH HEADER LINE.
  DATA lw_usermap_new TYPE ty_usermap_line.
  DATA lw_usermap_old TYPE ty_usermap_line.
  DATA lt_usermap_m TYPE TABLE OF /ors/usermap.
* End of I-VIMI-13918

* Begin of VIMI-21108
  DATA : lv_fieldname TYPE lvc_fname,
         lv_fcat      TYPE lvc_s_fcat,
         lv_rowid     TYPE int4.
* End of VIMI-21108

*Begin of VIMI-21730
  DATA: ls_authorized_cc LIKE LINE OF gt_authorized_cc,
        lr_bukrs         TYPE RANGE OF bukrs,
        lrs_bukrs        LIKE LINE OF lr_bukrs.
*End of VIMI-21730

* Begin of VIMI-23857
  DATA :lv_value  TYPE /ptgwfi/z_const-zvalue.

  CALL FUNCTION '/PTGWFI/CP_READCONSTANT'
    EXPORTING
      constname          = 'COA_INDIVIDUAL_LOCK'
      productcode        = 'IAP'
    IMPORTING
      constvalue         = lv_value
    EXCEPTIONS
      constant_not_found = 1
      OTHERS             = 2.
* End of VIMI-23857

* Begin of VIMI-18019/snittala
  CLEAR lv_show_warn.
  CALL FUNCTION '/PTGWFI/CP_READCONSTANT'
    EXPORTING
      constname          = 'COA_IGNOREDUPLICATES'
      productcode        = 'IAP'
    IMPORTING
      constvalue         = lv_show_warn
    EXCEPTIONS
      constant_not_found = 1
      OTHERS             = 2.
  IF NOT sy-subrc IS INITIAL.

  ENDIF.
* End of VIMI-18019/snittala
* Start of INS VIMI-7380
  CLEAR: gt_level,
         gt_ncoa.
  REFRESH: gt_level,
           gt_ncoa.

* Start of INS VIMI-9049
  CLEAR gt_ncoa1.
  REFRESH gt_ncoa1.
* VIMI-8064: MANDT will be set later. Empty MANDT is used to check
*            if a record just got created
*  gt_ncoa2-mandt = sy-mandt.
*  MODIFY gt_ncoa2 TRANSPORTING mandt WHERE mandt IS INITIAL.

  IF sy-repid NE '/OPT/BL_APPRBASELINE'."INSERT VIMI-16720:ASUTHARA
    LOOP AT gt_ncoa2.
      g_tabix = sy-tabix.
      CLEAR: gt_ncoa2-appr_level,
             lv_txt1,
             lv_txt2.
      FIND  '-' IN gt_ncoa2-descr.
      IF sy-subrc = 0.
        SPLIT gt_ncoa2-descr AT '-' INTO lv_txt1 lv_txt2.
        CONDENSE lv_txt1 NO-GAPS.
        gt_ncoa2-appr_level = lv_txt1.
      ENDIF.
      MODIFY gt_ncoa2 INDEX g_tabix.
      CLEAR gt_ncoa2.
    ENDLOOP.

    APPEND LINES OF gt_ncoa2 TO gt_ncoa1.
* VIMI-8064: MANDT will be set later. Empty MANDT is used to check
*            if a record just got created
*  gt_ncoa1-mandt = sy-mandt.
*  MODIFY gt_ncoa3 TRANSPORTING mandt WHERE mandt IS INITIAL.

    LOOP AT gt_ncoa3.
      g_tabix = sy-tabix.
      CLEAR: gt_ncoa3-appr_level,
             lv_txt1,
             lv_txt2.
      FIND  '-' IN gt_ncoa3-descr.
      IF sy-subrc = 0.
        SPLIT gt_ncoa3-descr AT '-' INTO lv_txt1 lv_txt2.
        CONDENSE lv_txt1 NO-GAPS.
        gt_ncoa3-appr_level = lv_txt1.
      ENDIF.
      MODIFY gt_ncoa3 INDEX g_tabix.
      CLEAR gt_ncoa3.
    ENDLOOP.

    APPEND LINES OF gt_ncoa3 TO gt_ncoa1.
* End of INS VIMI-9049

    DELETE gt_level1 WHERE bukrs IS INITIAL
                       AND appr_level IS INITIAL
                       AND expense_type IS INITIAL.
    DELETE gt_ncoa1 WHERE comp_code IS INITIAL
                      AND appr_level IS INITIAL
                      AND opt_userid IS INITIAL.

* begin VIMI-8064
* Check LIAP COA authorizations

    PERFORM check_liap_authorization CHANGING g_subrc.
    CHECK g_subrc EQ 0.
* end VIMI-8064


* Begin of I-VIMI-15846
* Set MANDT for newly added rows
    gt_ncoa2-mandt = sy-mandt.
    MODIFY gt_ncoa2 FROM gt_ncoa2 TRANSPORTING mandt WHERE mandt IS INITIAL.
    MODIFY gt_ncoa3 FROM gt_ncoa2 TRANSPORTING mandt WHERE mandt IS INITIAL.
    CLEAR gt_ncoa2-mandt.
* End of I-VIMI-15846

    LOOP AT gt_level1.
      g_tabix = sy-tabix.
      MOVE-CORRESPONDING gt_level1 TO gt_level.
      IF gt_level-mandt IS INITIAL.
        MOVE: sy-mandt TO gt_level-mandt,
              sy-mandt TO gt_level1-mandt.
      ENDIF.
* Start of INS VIMI-9049
      CLEAR: gt_level1-expense_type,
             gt_level-expense_type,
             lv_txt1,
             lv_txt2.
      FIND  '-' IN gt_level1-extxt.
      IF sy-subrc = 0.
        SPLIT gt_level1-extxt AT '-' INTO lv_txt1 lv_txt2.
        CONDENSE lv_txt1 NO-GAPS.
        gt_level-expense_type  = lv_txt1.
        gt_level1-expense_type = lv_txt1.
      ENDIF.
      CLEAR: gt_level1-appr_level,
             gt_level-appr_level,
             lv_txt1,
             lv_txt2.
      FIND  '-' IN gt_level1-descr.
      IF sy-subrc = 0.
        SPLIT gt_level1-descr AT '-' INTO lv_txt1 lv_txt2.
        CONDENSE lv_txt1 NO-GAPS.
        gt_level-appr_level  = lv_txt1.
        gt_level1-appr_level = lv_txt1.
      ENDIF.
* End of INS VIMI-9049
      gt_level1-head_limit_chk = gt_level1-btext.
      gt_level-head_limit_chk  = gt_level1-btext.
      IF gt_level-head_limit_chk = 'H'.
        CLEAR gt_level-add_pack_limit.
        CLEAR gt_level1-add_pack_limit.                     "VIMI-9505
      ENDIF.
* Start of CHG VIMI-9496
*    IF gt_level-appr_level = 'C' OR  "VIMI-9046
*    IF gt_level-appr_level = '0' OR                         "VIMI-9046
*       gt_level-appr_level = '1'.                           "VIMI-9049
      IF gt_level-appr_level = '0'.
* End of CHG VIMI-9496
        gt_level-head_limit_chk  = 'H'.
        gt_level1-head_limit_chk = 'H'.                     "VIMI-9505
      ENDIF.
      IF gt_level-head_limit_chk IS INITIAL.
        gt_level-head_limit_chk = 'H'.
      ENDIF.
      IF gt_level1-head_limit_chk IS INITIAL.
        gt_level1-head_limit_chk = 'H'.
        READ TABLE gt_values_h INTO gs_values_h WITH KEY
                                  domvalue_l = gt_level1-head_limit_chk.
        IF sy-subrc = 0.
          CONCATENATE gs_values_h-domvalue_l
                      '-'
                      gs_values_h-ddtext
                 INTO gt_level1-btext.
        ENDIF.
      ENDIF.
      MODIFY gt_level1 INDEX g_tabix.
      APPEND gt_level.
    ENDLOOP.

    LOOP AT gt_ncoa1.
      g_tabix = sy-tabix.
      MOVE-CORRESPONDING gt_ncoa1 TO gt_ncoa.
      IF gt_ncoa-mandt IS INITIAL.
        gt_ncoa-mandt = sy-mandt.
      ENDIF.
* Start of INS VIMI-9049
      CLEAR: gt_ncoa1-appr_level,
             gt_ncoa-appr_level,
             lv_txt1,
             lv_txt2.
      FIND  '-' IN gt_ncoa1-descr.
      IF sy-subrc = 0.
        SPLIT gt_ncoa1-descr AT '-' INTO lv_txt1 lv_txt2.
        CONDENSE lv_txt1 NO-GAPS.
        gt_ncoa-appr_level  = lv_txt1.
        gt_ncoa1-appr_level = lv_txt1.
      ENDIF.
      MODIFY gt_ncoa1 INDEX g_tabix.
* End of INS VIMI-9049
      APPEND gt_ncoa.
      CLEAR gt_ncoa.
    ENDLOOP.

* End of INS VIMI-7380
* begin VIMI-8064
    LOOP AT gt_level_filtered.
      MOVE-CORRESPONDING gt_level_filtered TO gt_level.
      IF gt_level-mandt IS INITIAL.
        MOVE: sy-mandt TO gt_level-mandt.
      ENDIF.
      gt_level-head_limit_chk  = gt_level_filtered-btext.
      IF gt_level-head_limit_chk = 'H'.
        CLEAR gt_level-add_pack_limit.
      ENDIF.
*    IF gt_level-appr_level = 'C' OR "VIMI-9049
      IF gt_level-appr_level = '0' OR                       "VIMI-9049
         gt_level-appr_level = '1'.
        gt_level-head_limit_chk = 'H'.
      ENDIF.
      APPEND gt_level.
    ENDLOOP.

    LOOP AT gt_ncoa_filtered.
      MOVE-CORRESPONDING gt_ncoa_filtered TO gt_ncoa.
      APPEND gt_ncoa.
      CLEAR gt_ncoa.
      MOVE-CORRESPONDING gt_ncoa_filtered TO gt_ncoa1.
      APPEND gt_ncoa1.
      CLEAR gt_ncoa1.
    ENDLOOP.
* end VIMI-8064
  ENDIF. "INSERT VIMI-16720:ASUTHARA

* Begin of VIMI-23560/AMANGAPA
*  SELECT * FROM /ors/usermap INTO TABLE lt_usermap_old. "#EC CI_NOWHERE
****VIMI-9460*************
*  IF sy-subrc <> 0.
*    REFRESH : lt_usermap_old.
*  ELSE.
*    SORT lt_usermap_old BY opt_userid.
*  ENDIF.
****VIMI-9460*************
*  SELECT * FROM /opt/bl_appcoa INTO TABLE lt_coa_old.   "#EC CI_NOWHERE
*****VIMI-9460*************
*  IF sy-subrc <> 0.
*    REFRESH : lt_coa_old.
*  ELSE.
*    SORT lt_coa_old BY opt_userid counter.
*  ENDIF.
* End of VIMI-23560/AMANGAPA

  SORT gt_usermap BY opt_userid.
***VIMI-9460*************
* End of VIM 5.2 SP5 - VIMI-3677 - CNICKLAS
* Start Insert VIM 5.2 SP5 - VIMI-3931 - AKOESTLI
  DATA v_old_userid TYPE /ors/usermap-opt_userid.
  DATA c_value TYPE /ptgwfi/z_const-zvalue.
  CLEAR c_value.
* End Insert VIM 5.2 SP5 - VIMI-3931 - AKOESTLI

*  create_itab lt_coa /opt/bl_appcoa.              "VIMI-11431
  DATA: lt_coa  TYPE STANDARD TABLE OF /opt/bl_appcoa WITH HEADER LINE. "VIMI-11431
  IF sy-repid NE '/OPT/COA_UPLOAD_REPORT'.
    CHECK g_changed NE space.
  ENDIF.

*  CHECK g_changed NE space.

* Validate Usermap data
  PERFORM validate_usermap_data CHANGING g_subrc.
  IF sy-repid NE '/OPT/COA_UPLOAD_REPORT'.
    CHECK g_subrc EQ 0.
  ENDIF.

* Start of INS VIMI-7380
  IF sy-repid = '/OPT/AR_COA'
    OR sy-repid = '/OPT/COA_UPLOAD_REPORT'.

    PERFORM validate_level_data CHANGING g_subrc.
*    CHECK g_subrc EQ 0.
    IF sy-repid NE '/OPT/COA_UPLOAD_REPORT'.
      CHECK g_subrc EQ 0.
    ENDIF.

    PERFORM validate_ncoa_data  CHANGING g_subrc.
*    CHECK g_subrc EQ 0.
    IF sy-repid NE '/OPT/COA_UPLOAD_REPORT'.
      CHECK g_subrc EQ 0.
    ENDIF.

    PERFORM validate_ncoa_with_coder CHANGING g_subrc.      "VIMI-15825
*   no exit if any messages here - just a warning

  ELSE.
* End of INS VIMI-7380
    PERFORM validate_coa_data CHANGING g_subrc.
    CHECK g_subrc EQ 0.
  ENDIF.                                                    "VIMI-7380
*  CHECK g_subrc EQ 0.
  IF sy-repid NE '/OPT/COA_UPLOAD_REPORT'.
    CHECK g_subrc EQ 0.
  ENDIF.
  "VIMI-7380
* Start of INS VIMI-9049
  IF sy-repid = '/OPT/AR_COA'
    OR sy-repid = '/OPT/COA_UPLOAD_REPORT'.

    PERFORM validate_lcoder_data CHANGING g_subrc.
  ELSE.
* End of INS VIMI-9049
    PERFORM validate_coder_data CHANGING g_subrc.
  ENDIF.                                                    "VIMI-9049
*  CHECK g_subrc EQ 0.
  IF sy-repid NE '/OPT/COA_UPLOAD_REPORT'.
    CHECK g_subrc EQ 0.
  ENDIF.


*-- Start VIM 6.0
  PERFORM validate_report_auth_data CHANGING g_subrc.
*  CHECK g_subrc EQ 0.
  IF sy-repid NE '/OPT/COA_UPLOAD_REPORT'.
    CHECK g_subrc EQ 0.
  ENDIF.

*-- End VIM 6.0

* begin VIMI-7280
  PERFORM check_usergroup_authorization CHANGING g_subrc.
*  CHECK g_subrc EQ 0.
  IF sy-repid NE '/OPT/COA_UPLOAD_REPORT'.
    CHECK g_subrc EQ 0.
  ENDIF.

* end VIMI-7280

  CLEAR g_changed.
  PERFORM get_usermap_object CHANGING lcl_usermap.
*Begin of VIMI-15978/ccheemar
  DATA: lv_sub TYPE c.
  lv_sub = 'X'.
  EXPORT lv_sub FROM lv_sub TO MEMORY ID 'SUB_CHECK'.
*End of VIMI-15978/ccheemar

  LOOP AT gt_usermap.
    g_tabix = sy-tabix.
    IF gt_usermap-opt_userid(1) EQ '&'.
* Start Insert VIM 5.2 SP5 - VIMI-3931 - AKOESTLI
      v_old_userid = gt_usermap-opt_userid.
* End Insert VIM 5.2 SP5 - VIMI-3931 - AKOESTLI
* Begin of VIMI-24393/AMANGAPA
    CLEAR: l_umdata.  "INSERT VIMI-26584:ASUTHARA
      IF NOT gt_usermap_new[] IS INITIAL.
        READ TABLE gt_usermap_new INTO l_umdata WITH KEY  sap_user_id = gt_usermap-sap_user_id
                                                          ep6_user_id = gt_usermap-ep6_user_id
                                                          email       = gt_usermap-email.
      ENDIF.
      IF l_umdata IS INITIAL.
* End of VIMI-24393/AMANGAPA
        l_umdata = gt_usermap.
        CALL METHOD lcl_usermap->addnewmapping
*        IMPORTING
*          MAPPED_ID          = GT_USERMAP-OPT_USERID
          CHANGING
            one_user           = l_umdata
          EXCEPTIONS
            cannot_create_user = 1
            OTHERS             = 2.
        IF sy-subrc <> 0.
          IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.             "vimi-10151
            CONCATENATE sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 INTO l_text.
            l_tab = 'USR'.
            PERFORM capture_messages USING l_text l_tab lv_opt_userid. "vimi-10151
          ELSE.
            MESSAGE ID sy-msgid TYPE 'A' NUMBER sy-msgno
                       WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
          ENDIF.
        ENDIF.
      ENDIF.                     "VIMI-24393/AMANGAPA
      MOVE-CORRESPONDING l_umdata TO gt_usermap.
      MODIFY gt_usermap INDEX g_tabix.
* Start Insert VIM 5.2 SP5 - VIMI-3931 - AKOESTLI
* Transport changed userid to gt_coa
      gt_coa-opt_userid  = gt_usermap-opt_userid.
      MODIFY gt_coa FROM gt_coa TRANSPORTING opt_userid
                         WHERE opt_userid EQ v_old_userid.
* begin VIMI-7280
      MODIFY gt_coa_filtered FROM gt_coa TRANSPORTING opt_userid
                         WHERE opt_userid EQ v_old_userid.
* end VIMI-7280
* End Insert VIM 5.2 SP5 - VIMI-3931 - AKOESTLI
    ENDIF.
* VIM COA Patch 6 Begin
    IF gt_usermap-manager_id NE space.
* Begin of Comment D-VIMI-13918
*      gt_coa-manager_id = gt_usermap-manager_id.
*      MODIFY gt_coa FROM gt_coa TRANSPORTING manager_id
*                         WHERE opt_userid EQ gt_usermap-opt_userid.
*      End of Comment D-VIMI-13918
*      Begin of I-VIMI-13918
      READ TABLE gt_coa WITH KEY opt_userid = gt_usermap-opt_userid BINARY SEARCH.
      IF gt_usermap-manager_id NE gt_coa-manager_id AND sy-subrc = 0.
        gt_coa-manager_id = gt_usermap-manager_id.
        MODIFY gt_coa FROM gt_coa INDEX sy-tabix TRANSPORTING manager_id.
      ENDIF.
* End of I-VIMI-13918

* begin VIMI-7280
      MODIFY gt_coa_filtered FROM gt_coa TRANSPORTING manager_id
                         WHERE opt_userid EQ gt_usermap-opt_userid.
* end VIMI-7280
    ENDIF.
* VIM COA Patch 6 End
* begin of VIMI-12081
* if sap-user ID is changed we delete existing old substitutes
*    READ TABLE lt_usermap_old INTO ls_usermap           "VIMI-23560/AMANGAPA
    READ TABLE gt_usermap_old INTO ls_usermap         "VIMI-23560/AMANGAPA
    WITH KEY opt_userid = gt_usermap-opt_userid
    BINARY SEARCH.
    IF sy-subrc EQ 0 AND
        ls_usermap-sap_user_id NE gt_usermap-sap_user_id.
      CALL FUNCTION '/ORS/000007_UPDATE_SUBSTITUTE'
        EXPORTING
          current_user             = ls_usermap-opt_userid
        TABLES
          substitutes              = lt_substitutes[]
        EXCEPTIONS
          cannot_update_substitute = 1
          OTHERS                   = 2.
    ENDIF.
* end of VIMI-12081

  ENDLOOP.
*Begin of VIMI-15978/ccheemar
  lv_sub = ' '.
  EXPORT lv_sub FROM lv_sub TO MEMORY ID 'SUB_CHECK'.
*End of VIMI-15978/ccheemar
* begin VIMI-7280
  LOOP AT gt_usermap_filtered.
    g_tabix = sy-tabix.
    IF gt_usermap_filtered-opt_userid(1) EQ '&'.
      v_old_userid = gt_usermap_filtered-opt_userid.
      l_umdata = gt_usermap_filtered.
      CALL METHOD lcl_usermap->addnewmapping
        CHANGING
          one_user           = l_umdata
        EXCEPTIONS
          cannot_create_user = 1
          OTHERS             = 2.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE 'A' NUMBER sy-msgno
                   WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.
      MOVE-CORRESPONDING l_umdata TO gt_usermap_filtered.
      MODIFY gt_usermap_filtered INDEX g_tabix.
* Transport changed userid to gt_coa
      gt_coa-opt_userid  = gt_usermap_filtered-opt_userid.
      MODIFY gt_coa FROM gt_coa TRANSPORTING opt_userid
                         WHERE opt_userid EQ v_old_userid.
      MODIFY gt_coa_filtered FROM gt_coa TRANSPORTING opt_userid
                         WHERE opt_userid EQ v_old_userid.
    ENDIF.
    IF gt_usermap_filtered-manager_id NE space.
      gt_coa-manager_id = gt_usermap_filtered-manager_id.
      MODIFY gt_coa FROM gt_coa TRANSPORTING manager_id
                   WHERE opt_userid EQ gt_usermap_filtered-opt_userid.
      MODIFY gt_coa_filtered FROM gt_coa TRANSPORTING manager_id
                   WHERE opt_userid EQ gt_usermap_filtered-opt_userid.
    ENDIF.
  ENDLOOP.
* end VIMI-7280

* Begin of VIM 5.2 SP5 - VIMI-3677 - CNICKLAS
* begin VIMI-7280
*  PERFORM changedoc_usermap TABLES gt_usermap
*                                  lt_usermap_old.
* Start of INS VIMI-10153
  IF sy-repid = '/OPT/COA_UPLOAD_REPORT' AND
     NOT gv_fmode IS INITIAL
     AND gv_fmodelog IS INITIAL.                            "VIMI-19181
*    CLEAR lt_usermap_old.             "VIMI-23560/AMANGAPA
    CLEAR gt_usermap_old.             "VIMI-23560/AMANGAPA
  ENDIF.
* End of INS VIMI-10153
  lt_usermap_new[] = gt_usermap[].
  APPEND LINES OF gt_usermap_filtered TO lt_usermap_new.
  IF gv_skip_change_docs = space.   "VIMI-19180/snittala
    IF gv_changedoc_usermap EQ 'X' AND sy-repid EQ '/OPT/COA_UPLOAD_REPORT'. "VIMI-22104
      PERFORM changedoc_usermap TABLES lt_usermap_new
*                                    lt_usermap_old.        "VIMI-23560/AMANGAPA
                                     gt_usermap_old.     "VIMI-23560/AMANGAPA
    ENDIF.                                                  "VIMI-22104
  ENDIF.                            "VIMI-19180/snittala
* end VIMI-7280
* End of VIM 5.2 SP5 - VIMI-3677 - CNICKLAS
* Begin of D-VIMI-13918
*  IF sy-repid NE '/OPT/COA_UPLOAD_REPORT'.
** Save to database
*    MODIFY /ors/usermap FROM TABLE gt_usermap.
*    MODIFY /ors/usermap FROM TABLE gt_usermap_filtered.     "VIMI-7280
*  ENDIF.
*  End of D-VIMI-13918

* Begin of I-VIMI-13918
  "delta save: new logic to save modified user records only..
  IF sy-repid NE '/OPT/COA_UPLOAD_REPORT'.
    IF gv_changedoc_usermap EQ 'X'.                         "VIMI-22104
      LOOP AT lt_usermap_new INTO lw_usermap_new.
*        READ TABLE lt_usermap_old INTO lw_usermap_old WITH KEY opt_userid = lw_usermap_new-opt_userid BINARY SEARCH. "VIMI-23560/AMANGAPA
        READ TABLE gt_usermap_old INTO lw_usermap_old WITH KEY opt_userid = lw_usermap_new-opt_userid BINARY SEARCH. "VIMI-23560/AMANGAPA
        IF sy-subrc = 0 AND lw_usermap_new = lw_usermap_old.
        ELSE.
          APPEND lw_usermap_new TO lt_usermap_m.
        ENDIF.
      ENDLOOP.
      IF lt_usermap_m[] IS NOT INITIAL.
        MODIFY /ors/usermap FROM TABLE lt_usermap_m.
*        PERFORM changedoc_usermap TABLES lt_usermap_m lt_usermap_old. "VIMI-22104 "VIMI-23560/AMANGAPA
        PERFORM changedoc_usermap TABLES lt_usermap_m gt_usermap_old. "VIMI-23560/AMANGAPA
      ENDIF.
    ENDIF.                                                  "VIMI-22104
  ENDIF.
* End of I-VIMI-13918

*-- Start for SP1
*   Update data in recent users table if there is a change in COA
*   user data
  IF
    "( sy-repid NE '/OPT/COA_UPLOAD_REPORT' ) OR   "VIMI-23560/AMANGAPA
      ( sy-repid EQ '/OPT/COA_UPLOAD_REPORT'
        AND NOT gt_usermap_coa[] IS INITIAL ).    "VIMI-18097/snittala
    IF gv_changedoc_usermap EQ 'X'.               "VIMI-23560/AMANGAPA
      IF NOT gt_usermap[] IS INITIAL.
        SELECT * FROM /ors/recentuser INTO TABLE lt_recent
         FOR ALL ENTRIES IN gt_usermap
         WHERE selected_user = gt_usermap-opt_userid.   "#EC CI_NOFIRST
        IF NOT lt_recent IS INITIAL.
          LOOP AT lt_recent INTO ls_recent.
            READ TABLE gt_usermap WITH
                  KEY opt_userid = ls_recent-selected_user.
            IF sy-subrc EQ 0.
              MOVE-CORRESPONDING gt_usermap TO ls_recent.
              MODIFY lt_recent FROM ls_recent.
            ENDIF.
          ENDLOOP.
          MODIFY /ors/recentuser FROM TABLE lt_recent.
        ENDIF.
      ENDIF.
* Begin of VIMI-23560/AMANGAPA
    ENDIF.
  ELSEIF sy-repid NE '/OPT/COA_UPLOAD_REPORT'.
    IF NOT lt_usermap_m[] IS INITIAL.
      SELECT * FROM /ors/recentuser INTO TABLE lt_recent FOR ALL ENTRIES IN lt_usermap_m
         WHERE selected_user = lt_usermap_m-opt_userid. "#EC CI_NOFIRST
      IF NOT lt_recent[] IS INITIAL.
        LOOP AT lt_recent INTO ls_recent.
          CLEAR lw_usermap_new.
          READ TABLE lt_usermap_m INTO lw_usermap_new WITH KEY opt_userid = ls_recent-selected_user.
          IF sy-subrc EQ 0.
            MOVE-CORRESPONDING lw_usermap_new TO ls_recent.
            MODIFY lt_recent FROM ls_recent.
          ENDIF.
          CLEAR ls_recent.
        ENDLOOP.
      ELSE.
        LOOP AT lt_usermap_m INTO lw_usermap_new.
          MOVE-CORRESPONDING lw_usermap_new TO ls_recent.
          APPEND ls_recent TO lt_recent .
          CLEAR: lw_usermap_new,ls_recent.
        ENDLOOP.
      ENDIF.
      MODIFY /ors/recentuser FROM TABLE lt_recent.
    ENDIF.
* End of VIMI-23560/AMANGAPA
  ENDIF.                                             "VIMI-18097/snittala
*-- End for SP1

* VIM COA Patch 6 Begin
* Delete coa and coder data
*  LOOP AT GT_COA.
*    AT NEW OPT_USERID.
*      DELETE FROM /OPT/BL_APPCOA WHERE OPT_USERID EQ GT_COA-OPT_USERID.
*    ENDAT.
*  ENDLOOP.
*  LOOP AT GT_CODER.
*    AT NEW CODER_ID.
*      DELETE FROM /OPT/BL_AP_CODER
*             WHERE CODER_ID EQ GT_CODER-CODER_ID.
*    ENDAT.
*  ENDLOOP.
*Begin of chagnes from 094-Arasala
* Begin of Patch 19
*  DELETE FROM /OPT/BL_APPCOA   WHERE OPT_USERID NE SPACE.
*  DELETE FROM /OPT/BL_AP_CODER WHERE CODER_ID NE SPACE.
* Start of INS VIMI-7380
  IF sy-repid = '/OPT/AR_COA'.
    IF gv_simple_mode <> 'X'.                               "VIMI-16201
* Begin of VIMI-21730
* Begin of VIMI-23560/AMANGAPA
*      IF gt_authorized_cc IS NOT INITIAL.
*        LOOP AT gt_authorized_cc INTO ls_authorized_cc.
*          lrs_bukrs-sign = 'I'.
*          lrs_bukrs-option = 'EQ'.
*          lrs_bukrs-low = ls_authorized_cc-bukrs.
*          APPEND lrs_bukrs TO lr_bukrs.
*          CLEAR:lrs_bukrs,ls_authorized_cc.
*        ENDLOOP.
*
*        DELETE FROM /opt/appr_coa
*        CLIENT SPECIFIED
*        WHERE  mandt EQ sy-mandt
*        AND comp_code IN lr_bukrs.
*
*        DELETE FROM /opt/appr_limit
*        CLIENT SPECIFIED
*        WHERE  mandt EQ sy-mandt
*        AND    bukrs IN lr_bukrs.

      IF lv_value IS INITIAL.           "VIMI-23857
        IF gt_bukrs[] IS NOT INITIAL.
          IF gv_changedoc_coa = 'X'.
            DELETE FROM /opt/appr_coa CLIENT SPECIFIED WHERE  mandt EQ sy-mandt AND comp_code IN gt_bukrs.
          ENDIF.
          IF gv_changedoc_applimit = 'X'.
            DELETE FROM /opt/appr_limit CLIENT SPECIFIED WHERE  mandt EQ sy-mandt AND bukrs IN gt_bukrs.
          ENDIF.
* End of VIMI-23560/AMANGAPA
        ELSE.
* End of VIMI-21730
          IF gv_changedoc_coa = 'X'.      "VIMI-23560/AMANGAPA
            DELETE FROM /opt/appr_coa
            CLIENT SPECIFIED
            WHERE  mandt EQ sy-mandt.
          ENDIF.                          "VIMI-23560/AMANGAPA

          IF gv_changedoc_applimit = 'X'. "VIMI-23560/AMANGAPA
            DELETE FROM /opt/appr_limit
            CLIENT SPECIFIED
            WHERE  mandt EQ sy-mandt.
          ENDIF.                          "VIMI-23560/AMANGAPA
        ENDIF.                                                "VIMI-21730
      ENDIF.                            "VIMI-23857
    ENDIF.                                                  "VIMI-16201
  ELSE.
* End of INS VIMI-7380
* Begin of D-VIMI-13918
*    IF sy-repid NE '/OPT/COA_UPLOAD_REPORT'.                "vimi-10151
*      DELETE FROM /opt/bl_appcoa
*      CLIENT SPECIFIED
*      WHERE  mandt EQ sy-mandt.
*    ENDIF.                                                  "vimi-10151
* End of D-VIMI-13918

* Begin of I-VIMI-13918
* Delta Save: New logic to save /opt/bl_appcoa with modified records only...
    IF sy-repid EQ '/OPT/COA_UPLOAD_REPORT' OR              "vimi-10151
      sy-repid  EQ '/OPT/BL_APPRBASELINE'.
    ELSE.
      IF gv_simple_mode <> 'X'.                             "VIMI-16201
        DELETE FROM /opt/bl_appcoa
        CLIENT SPECIFIED
        WHERE  mandt EQ sy-mandt.
      ENDIF.                                                "VIMI-16201
    ENDIF.                                                  "vimi-10151
* End of I-VIMI-13918
  ENDIF.                                                    "VIMI-7380
* Start of INS VIMI-9049
  IF sy-repid = '/OPT/AR_COA'.
    IF NOT /opt/afs_coder-afs_id IS INITIAL.                "VIMI-11026
      IF gv_simple_mode <> 'X'.                             "VIMI-16201
        IF gv_changedoc_coder = 'X'.                        "VIMI-23560/AMANGAPA
          DELETE FROM /opt/afs_coder
*         CLIENT SPECIFIED                                  "VIMI-11026
                WHERE afs_id = /opt/afs_coder-afs_id.
        ENDIF.                                              "VIMI-23560/AMANGAPA
      ENDIF.                                                "VIMI-16201
    ENDIF.                                                  "VIMI-11026
  ELSE.
* End of INS VIMI-9049
    IF sy-repid NE '/OPT/COA_UPLOAD_REPORT'.                "vimi-10151

      DELETE FROM /opt/bl_ap_coder
      CLIENT SPECIFIED
      WHERE  mandt EQ sy-mandt.

    ENDIF.                                                  "vimi-10151
  ENDIF.                                                    "VIMI9049
* End of Patch 19
*End of changes from 094-Arasala
* VIM COA Patch 6 End
* Save COA Data
* Start of Change VIMI-10153
*  IF sy-repid NE '/OPT/AR_COA'.
  IF " VIMI-5085 - Enable Manager for Escalations sy-repid = '/OPT/AR_COA' OR
     sy-repid = '/OPT/COA_UPLOAD_REPORT'.
  ELSE.
* End of Change VIMI-10153
* Begin of VIMI-23560/AMANGAPA
*    LOOP AT gt_coa.
*      g_tabix = sy-tabix.
*      READ TABLE gt_usermap WITH KEY opt_userid = gt_coa-opt_userid  BINARY SEARCH. "VIMI-9640
*      IF sy-subrc EQ 0.
** VIM COA Patch 6 Begin
**      LT_COA-MANAGER_ID = GT_USERMAP-MANAGER_ID.
**      MODIFY GT_COA.
*        gt_coa-manager_id = gt_usermap-manager_id.
*        MODIFY gt_coa INDEX g_tabix TRANSPORTING manager_id.
** VIM COA Patch 6 End
*      ENDIF.
*    ENDLOOP.
* End of VIMI-23560/AMANGAPA

* Begin of VIM 5.2 SP5 - VIMI-3677 - CNICKLAS
* begin VIMI-7280
*  PERFORM changedoc_appcoa TABLES gt_coa
*                                  lt_coa_old.
    lt_coa_new[] = gt_coa[].
    APPEND LINES OF gt_coa_filtered TO lt_coa_new.
    PERFORM changedoc_appcoa TABLES lt_coa_new
*                                    lt_coa_old.   "VIMI-23560/AMANGAPA
                                    gt_coa_old.     "VIMI-23560/AMANGAPA
* end VIMI-7280
* End of VIM 5.2 SP5 - VIMI-3677 - CNICKLAS

*    MODIFY /opt/bl_appcoa FROM TABLE gt_coa.                "D-VIMI-13918 Delta logic introduced
*    MODIFY /opt/bl_appcoa FROM TABLE gt_coa_filtered.       "D-VIMI-13918 Delta logic introduced

*Begin of I-VIMI-13918/STAMADA
* DELTA SAVE: New logic to save COA with modified records only...
    lt_coa_f[] = gt_coa[].
    APPEND LINES OF gt_coa_filtered TO lt_coa_f.
    SORT lt_coa_f BY opt_userid counter.

    LOOP AT lt_coa_f.
      AT NEW opt_userid.
        CLEAR l_modified_user.
        CLEAR lt_coa_m[].
        CLEAR l_count.
      ENDAT.


*      READ TABLE lt_coa_old INTO lw_coa_old WITH KEY opt_userid = lt_coa_f-opt_userid counter = lt_coa_f-counter BINARY SEARCH. "VIMI-23560/AMANGAPA
      READ TABLE gt_coa_old INTO lw_coa_old WITH KEY opt_userid = lt_coa_f-opt_userid counter = lt_coa_f-counter BINARY SEARCH.  "VIMI-23560/AMANGAPA
      IF sy-subrc EQ 0 AND lt_coa_f EQ lw_coa_old.
      ELSE.
        l_modified_user = 'X'.
        APPEND lt_coa_f TO lt_coa_m.
      ENDIF.


      AT END OF opt_userid.
        IF l_modified_user = 'X'.
* For this user, there is atleast one change...
          l_modified_user = 'U'.
        ELSE.
* For this user, there are no changes....
          l_modified_user = 'E'.
        ENDIF.
      ENDAT.

      IF l_modified_user = 'U'.
        MODIFY /opt/bl_appcoa FROM TABLE lt_coa_m.
      ENDIF.

      IF l_modified_user = 'U' OR l_modified_user = 'E'.
* This is relevant, if some records were deleted for a user; So at end of that user, check in DB if more records exist, then delete.
        l_count = lt_coa_f-counter + 1.
*        READ TABLE lt_coa_old INTO lw_coa_old WITH KEY opt_userid = lt_coa_f-opt_userid counter = l_count BINARY SEARCH.  "VIMI-23560/AMANGAPA
        READ TABLE gt_coa_old INTO lw_coa_old WITH KEY opt_userid = lt_coa_f-opt_userid counter = l_count BINARY SEARCH.   "VIMI-23560/AMANGAPA
        IF sy-subrc = 0.
          DELETE FROM /opt/bl_appcoa WHERE opt_userid = lt_coa_f-opt_userid AND counter GE l_count.
        ENDIF.
      ENDIF.
    ENDLOOP.
    CLEAR: lt_coa_f[], lt_coa_m[].

*  BEGIN OF VIMI-15810: ASUTHARA
* lt_prefer is local internal table which is not used any where
* commenting below code

*    SELECT * FROM /ors/user_prefer INTO TABLE lt_userpref ORDER BY approver.
**End of I-VIMI-13918/STAMADA
*
** Set User Preferences
*    LOOP AT gt_coa.
**Begin of D-VIMI-13918/STAMADA
**      SELECT SINGLE * FROM /ors/user_prefer INTO l_prefer
**                      WHERE approver EQ gt_coa-opt_userid.
**End of D-VIMI-13918/STAMADA
*      READ TABLE lt_userpref INTO l_prefer WITH KEY approver = gt_coa-opt_userid BINARY SEARCH. "I-VIMI-13918/STAMADA
*      IF sy-subrc NE 0.
*        l_prefer-approver = gt_coa-opt_userid.
** begin VIMI-7782
*** Default Date format is MM/DD/YYYY
**      l_prefer-date_format = 2.
*** Default Decimal Notation is N,NNN.NN
**      l_prefer-decimal_notation = 'X'.
**        READ TABLE gt_usermap WITH KEY opt_userid = gt_coa-opt_userid.               "D-VIMI-13918/STAMADA
*        READ TABLE gt_usermap WITH KEY opt_userid = gt_coa-opt_userid BINARY SEARCH.  "I-VIMI-13918/STAMADA
*        IF sy-subrc EQ 0 AND NOT gt_usermap-sap_user_id IS INITIAL.
*          SELECT SINGLE datfm dcpfm FROM usr01
*            INTO (l_prefer-date_format, l_prefer-decimal_notation)
*            WHERE bname = gt_usermap-sap_user_id.
*        ELSE.
**       Default Date format is MM/DD/YYYY
*          l_prefer-date_format = 2.
**       Default Decimal Notation is N,NNN.NN
*          l_prefer-decimal_notation = 'X'.
*        ENDIF.
** end VIMI-7782
**      MODIFY /ors/user_prefer FROM l_prefer.       " COMM VIMI-9640
*        APPEND l_prefer TO lt_prefer.                 " INS VIMI-9640
*      ENDIF.
*    ENDLOOP.
*END OF VIMI-15810: ASUTHARA

  ENDIF.                                                    "VIMI7380
* Save Coder Data to database
* Start of INS VIMI-9049
  IF sy-repid = '/OPT/AR_COA'.
    IF gv_simple_mode <> 'X'.                               "VIMI-16201
      IF gv_changedoc_coder = 'X'.                          "VIMI-23560/AMANGAPA
        CLEAR gt_coder_lba.
        gt_coder_lba-mandt  = sy-mandt.
        gt_coder_lba-afs_id = /opt/afs_coder-afs_id.
        MODIFY gt_coder_lba
          FROM gt_coder_lba TRANSPORTING mandt afs_id
         WHERE afs_id IS INITIAL.
        MODIFY /opt/afs_coder FROM TABLE gt_coder_lba.
        MODIFY /opt/afs_coder FROM TABLE gt_lcoder_filtered.  "VIMI-8064
      ENDIF.                                                 "VIMI-23560/AMANGAPA
    ENDIF.                                                  "VIMI-16201
  ELSE.
* End of INS VIMI-9049
    IF sy-repid NE '/OPT/COA_UPLOAD_REPORT'.                "vimi-10151
      MODIFY /opt/bl_ap_coder FROM TABLE gt_coder.
      MODIFY /opt/bl_ap_coder FROM TABLE gt_coder_filtered. "VIMI-7280
    ENDIF.                                                  "vimi-10151
  ENDIF.                                                    "VIMI-9049

  IF gv_skip_change_docs = space.                           "VIMI-17623
* Start of INS VIMI-7380
    IF sy-repid = '/OPT/AR_COA' OR
      sy-repid  = '/OPT/COA_UPLOAD_REPORT'.                 "VIMI-10153
      IF gv_changedoc_applimit = 'X'.                       "VIMI-22104
        PERFORM changedoc_appr_level.
      ENDIF.                                                "VIMI-22104
      IF gv_changedoc_coa = 'X'.                            "VIMI-22104
        PERFORM changedoc_ncoa.
      ENDIF.                                                "VIMI-22104
    ENDIF.
  ENDIF.                                                    "VIMI-17623

  IF sy-repid = '/OPT/AR_COA'.                              "VIMI-10153
    IF gv_simple_mode <> 'X'.                               "VIMI-16201
* Save Level Data
      IF gv_changedoc_applimit = 'X'.                       "VIMI-23560/AMANGAPA
        MODIFY /opt/appr_limit FROM TABLE gt_level.
        gt_level_old[] = gt_level[].                          "VIMI-22104
      ENDIF.                                                "VIMI-23560/AMANGAPA
* Save New COA data.
      IF gv_changedoc_coa = 'X'.                            "VIMI-23560/AMANGAPA
* Begin of VIMI-23857
        IF NOT lv_value IS INITIAL.
          IF gt_ncoa_del_rec[] IS NOT INITIAL.
            DELETE /opt/appr_coa FROM TABLE gt_ncoa_del_rec.
          ENDIF.
          IF gt_ncoa_mod_rec[] IS NOT INITIAL.
            MODIFY /opt/appr_coa FROM TABLE gt_ncoa_mod_rec.
          ENDIF.
          gt_ncoa_old[] = gt_ncoa[].
        ELSE.
* End of VIMI-23857
          MODIFY /opt/appr_coa FROM TABLE gt_ncoa.
          gt_ncoa_old[] = gt_ncoa[].                            "VIMI-22104
        ENDIF.                                                "VIMI-23857
      ENDIF.                                                "VIMI-23560/AMANGAPA
    ELSE.                                                   "VIMI-16201
*     MODIFY /opt/appr_coa FROM TABLE gt_ncoa.              "VIMI-16201 "D-VIMI-17454
*Begin I-VIMI-17454
* Delta save....
      IF gt_ncoa_del_rec[] IS NOT INITIAL.
        DELETE /opt/appr_coa FROM TABLE gt_ncoa_del_rec.
      ENDIF.
      IF gt_ncoa_mod_rec[] IS NOT INITIAL.
        MODIFY /opt/appr_coa FROM TABLE gt_ncoa_mod_rec.
      ENDIF.

*End I-VIMI-17454
    ENDIF.                                                  "VIMI-16201
    REFRESH: gt_ncoa_mod_rec,
             gt_ncoa_del_rec.
  ENDIF.                                                    "VIMI-10153
* End of INS VIMI-7380

*-- Start VIM 6.0
  IF gv_datachanged_a = 'Y'.
    DELETE FROM /opt/bl_rpt_auth.
    IF NOT gt_auth IS INITIAL.
      MODIFY /opt/bl_rpt_auth FROM TABLE gt_authn.
    ENDIF.
  ENDIF.
  CLEAR gv_datachanged_a.
*-- End VIM 6.0

* Begin of VIMI-21108
  IF gt_msg_tab[] IS NOT INITIAL.
    IF g_protocol IS INITIAL.
      CREATE OBJECT g_protocol
        EXPORTING
          i_calling_alv = g_grid.
    ENDIF.
    g_tab_desc = TEXT-t01.
    LOOP AT gt_msg_tab INTO gs_msg_tab.
      IF sy-repid = '/OPT/AR_COA'.
        lv_rowid = gs_msg_tab-msgv2.
        lv_fieldname = c_fumview.
        lv_fcat-fieldname = c_fumview.
        lv_fcat-outputlen = 50.
        lv_fcat-seltext   = g_tab_desc.
        APPEND lv_fcat TO gt_nfcat.
        g_protocol->mt_fieldcatalog = gt_nfcat.
      ENDIF.

      CALL METHOD g_protocol->add_protocol_entry
        EXPORTING
          i_msgid     = '/OPT/VIM_701'
          i_msgty     = 'W'
          i_msgno     = gs_msg_tab-msgno
          i_row_id    = lv_rowid
          i_msgv1     = gs_msg_tab-msgv1
          i_msgv2     = gs_msg_tab-msgv2
*         i_msgv3     = gs_msg_tab-msgv2
          i_fieldname = lv_fieldname.
    ENDLOOP.
    REFRESH : gt_msg_tab[].
    CALL METHOD g_protocol->display_protocol( ).
  ENDIF.
* End of VIMI-21108

  CLEAR : gv_changedoc_usermap,gv_changedoc_applimit,gv_changedoc_coa. "VIMI-22104
  CLEAR gv_changedoc_coder.        "VIMI-23560/AMANGAPA
  REFRESH: gt_coa_old[].           "VIMI-23560/AMANGAPA

  IF sy-repid NE '/OPT/COA_UPLOAD_REPORT'.
    MESSAGE s000 WITH 'Changes saved successfully'(m09).
  ENDIF.


  COMMIT WORK.           "I-VIMI-13918/STAMADA to tigger update tasks..

ENDFORM.                    " SAVE_DATA
*&--------------------------------------------------------------------*
*&      Form  GET_USERMAP_OBJECT
*&--------------------------------------------------------------------*
FORM get_usermap_object CHANGING p_object TYPE REF TO /ors/usermapping.
  DATA l_value TYPE /ptgwfi/z_const-zvalue.
  CALL FUNCTION '/PTGWFI/CP_READCONSTANT'
    EXPORTING
      constname          = 'USERMAP_CLASS'
      productcode        = 'IAP'
    IMPORTING
      constvalue         = l_value
    EXCEPTIONS
      constant_not_found = 1
      OTHERS             = 2.
  IF sy-subrc <> 0.
    CREATE OBJECT p_object.
    EXIT.
  ELSE.
* creat instance
    CREATE OBJECT p_object TYPE (l_value).
  ENDIF.
ENDFORM.                    "GET_USERMAP_OBJECT
*&---------------------------------------------------------------------*
*&      Form  validate_usermap_data
*&---------------------------------------------------------------------*
FORM validate_usermap_data CHANGING p_subrc.
  DATA l_value TYPE /ptgwfi/z_const-zvalue.
  DATA ls_coa TYPE /opt/bl_appcoa. "VIMI-3325 - rosterma
  CLEAR p_subrc.
* Start Insert 5.2 SP5 - VIMI-3931 - AKOESTLI
  DATA c_value TYPE /ptgwfi/z_const-zvalue.
  CLEAR c_value.
* End Insert 5.2 SP5 - VIMI-3931 - AKOESTLI
* Begin of 5.2 SP6 - VIMI-4734 - rosterma
*  DATA lt_t401 TYPE TABLE OF /opt/bl_t401.    "VIMI-23560/AMANGAPA
  DATA ls_t401 TYPE /opt/bl_t401.
  FIELD-SYMBOLS: <field_name> TYPE any.
* End of 5.2 SP6 - VIMI-4734 - rosterma
* begin VIMI-7280
  DATA:
    lv_group TYPE xuclass,
    lv_actvt TYPE activ_auth.
* end VIMI-7280
* Begin SP8 VIMI-5636 mnguyen
  DATA l_sysvalue TYPE /ptgwfi/z_const-zvalue.
  DATA l_text(80) TYPE c.
  DATA: lv_lines  TYPE i,
        lv_lines2 TYPE i.
  DATA lt_usermap_unique LIKE SORTED TABLE OF gt_usermap WITH UNIQUE KEY email.
* Start of insert for VIMI-9640**************
  DATA :tb_usermap1 TYPE STANDARD TABLE OF ty_usermap.
* End of insert for VIMi-9640************

* Begin of VIMI-8504
  DATA: l_gltgb           TYPE xugltgb,
        l_gltgv           TYPE xugltgv,
        l_uflag           TYPE xuuflag,
        lv_check_sap_user TYPE /ptgwfi/value.               "VIMI-11763
* End of VIMI-8504
* begin of VIMI-10151.
  DATA : lv_opt_userid TYPE /ors/umoid.
* End of VIMI-10151

* Begin of VIMI-21108
  DATA : lt_usermap_dactive TYPE TABLE OF ty_usermap_line,
         ls_usermap_dactive TYPE ty_usermap_line,
         unstruct           TYPE sx_address.

  lt_usermap_dactive[] = gt_usermap[].
  DELETE lt_usermap_dactive WHERE deleted EQ space.
* End of VIMI-21108

  CLEAR lt_usermap_unique.
* End SP8 VIMI-5636 mnguyen
  IF NOT g_protocol IS INITIAL.
    CALL METHOD g_protocol->free( ).
    CLEAR g_protocol.
  ENDIF.
* Begin of VIMI-9049
  CLEAR: g_tab_desc,
         g_tabname.
  g_tabname = c_fumview.
  g_tab_desc = TEXT-t01.
* Begin of VIMI-9049
  CALL FUNCTION '/PTGWFI/CP_READCONSTANT'
    EXPORTING
      constname          = 'OPTUSERID_DETERMING'
      productcode        = 'IAP'
    IMPORTING
      constvalue         = l_value
    EXCEPTIONS
      constant_not_found = 1
      OTHERS             = 2.
* Begin SP8 VIMI-5636/VIMI-5553 mnguyen
*  IF sy-subrc <> 0.
*    EXIT.
*  ENDIF.
  IF sy-subrc <> 0.
    CLEAR l_text.
    CONCATENATE TEXT-t05 ' Z_CONST IAP/OPTUSERID_DETERMING' INTO l_text.
    PERFORM display_grid_message USING l_text 0
                                              space '52' space.
*********added for VIMI-10151*************************
    IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
      l_tab = 'USR'.
      PERFORM capture_messages USING l_text l_tab lv_opt_userid.
    ENDIF.
*********added for VIMI-10151*************************
    p_subrc = 4.
  ENDIF.

  CALL FUNCTION '/PTGWFI/CP_READCONSTANT'
    EXPORTING
      constname          = 'IMPLEMENTATION_SYS'
      productcode        = 'IAP'
    IMPORTING
      constvalue         = l_sysvalue
    EXCEPTIONS
      constant_not_found = 1
      OTHERS             = 2.
  IF sy-subrc <> 0.
    CLEAR l_text.
    CONCATENATE TEXT-t05 ' Z_CONST IMPLEMENTATION_SYS' INTO l_text.
    PERFORM display_grid_message USING l_text 0
                                              space '52' space.
*********added for VIMI-10151*************************
    IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
      l_tab = 'USR'.
      PERFORM capture_messages USING l_text l_tab lv_opt_userid.
    ENDIF.
*********added for VIMI-10151*************************
    p_subrc = 4.
  ENDIF.

  IF ( l_value = 'N' AND l_sysvalue NE 'NET' )
    OR ( l_value = 'P' AND l_sysvalue NE 'EP6' ).
    CLEAR l_text.
    CONCATENATE TEXT-t05 ' Z_CONST IAP/OPTUSERID_DETERMING' INTO l_text.
    PERFORM display_grid_message USING l_text 0
                                       space '52' space.

*********added for VIMI-10151*************************
    IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
      l_tab = 'USR'.
      PERFORM capture_messages USING l_text l_tab lv_opt_userid.
    ENDIF.
*********added for VIMI-10151*************************
    CLEAR l_text.
    CONCATENATE TEXT-t05 ' Z_CONST IAP/IMPLEMENTATION_SYS' INTO l_text.
    PERFORM display_grid_message USING l_text 0
                                       space '52' space.
*********added for VIMI-10151*************************
    IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
      l_tab = 'USR'.
      PERFORM capture_messages USING l_text l_tab lv_opt_userid.
    ENDIF.
*********added for VIMI-10151*************************

    p_subrc = 4.
  ENDIF.
  CLEAR c_value.
  CALL FUNCTION '/PTGWFI/CP_READCONSTANT'
    EXPORTING
      constname          = 'APPR_USR_COA_COPY'
      productcode        = 'IAP'
    IMPORTING
      constvalue         = c_value
    EXCEPTIONS
      constant_not_found = 1
      OTHERS             = 2.
  IF sy-subrc <> 0.
  ENDIF.
  IF NOT p_subrc EQ 0.
    CALL METHOD g_protocol->display_protocol( ).
    EXIT.
  ENDIF.
* End SP8 VIMI-5636/VIMI-5553
* Start of insert for VIMI-9640************
  SORT gt_usermap BY opt_userid.
* End of insert for VIMI-9640************
****Begin of Changes 560/3.
*  Begin of D-VIMI-13918/STAMADA
*  IF NOT gt_usermap[] IS INITIAL.
*    SELECT opt_userid FROM /ors/usermap
*                      INTO TABLE tb_usermap
*                      FOR ALL ENTRIES IN gt_usermap
*                   WHERE opt_userid = gt_usermap-opt_userid.
** Start of insert for VIMI-9640************
*    IF sy-subrc <> 0.
*      REFRESH : tb_usermap.
*    ELSE.
*      SORT tb_usermap BY opt_userid.
*    ENDIF.
** End of insert for VIMI-9640***********
*  ENDIF.
** begin VIMI-7280
*  IF NOT gt_usermap_filtered[] IS INITIAL.
** Start of insert for VIMI-9640************
**    SELECT opt_userid FROM /ors/usermap
**                      APPENDING TABLE tb_usermap
**                      FOR ALL ENTRIES IN gt_usermap_filtered
**                   WHERE opt_userid = gt_usermap_filtered-opt_userid.
*    SELECT opt_userid FROM /ors/usermap
*                      INTO TABLE tb_usermap1
*                      FOR ALL ENTRIES IN gt_usermap_filtered
*                   WHERE opt_userid = gt_usermap_filtered-opt_userid.
*    IF sy-subrc <> 0.
*      REFRESH : tb_usermap1.
*    ELSE.
*      APPEND LINES OF tb_usermap1 TO tb_usermap.
*      SORT tb_usermap BY opt_userid.
*    ENDIF.
** End of insert for VIMI-9640***********
*  ENDIF.
*
** end VIMI-7280
*  End of D-VIMI-13918/STAMADA

*  Begin of I-VIMI-13918/STAMADA
  CLEAR tb_usermap[].
  LOOP AT gt_usermap.
    APPEND gt_usermap-opt_userid TO tb_usermap.
  ENDLOOP.
  LOOP AT gt_usermap_filtered.
    APPEND gt_usermap_filtered-opt_userid TO tb_usermap.
  ENDLOOP.

  SORT tb_usermap BY opt_userid.
*  End of I-VIMI-13918/STAMADA
* To keep the sort order as in ALV(in case of special chart...)
  SORT gt_coa BY opt_userid. " AS TEXT COUNTER.                        "I-VIMI-15255

* Begin of 5.2 SP6 - VIMI-4734 - rosterma
*  SELECT * FROM /opt/bl_t401 INTO TABLE lt_t401.    "VIMI-23560/AMANGAPA
* End of 5.2 SP6 - VIMI-4734 - rosterma
* Start of INS VIMI-9049
  IF sy-repid = '/OPT/AR_COA'
     OR sy-repid = '/OPT/COA_UPLOAD_REPORT'. " VIMI-10151
    DELETE gt_usermap WHERE opt_userid       CA '&'     AND
                            user_status      IS INITIAL AND
                            deleted          IS INITIAL AND
                            status_date      IS INITIAL AND
                            lastname         IS INITIAL AND
                            firstname        IS INITIAL AND
                            middlename       IS INITIAL AND
                            department       IS INITIAL AND
                            windows_domain   IS INITIAL AND
                            windows_id       IS INITIAL AND
                            sap_emplpyee_id  IS INITIAL AND
                            sap_user_id      IS INITIAL AND
                            ep6_user_id      IS INITIAL AND
                            email            IS INITIAL AND
                            other_id         IS INITIAL AND
                            phone            IS INITIAL AND
                            bulkapproval     IS INITIAL AND
                            user_type        IS INITIAL.
  ENDIF.
* End of INS VIMI-9049
***End of Changes 560/3.
* Begin SP8 VIMI-5636 mnguyen
*  LOOP AT gt_usermap.

* begin VIMI-11763
  CALL FUNCTION '/OPT/VIM_READ_CONSTANT'
    EXPORTING
      prod_code   = 'IAP'
      param_name  = 'CHECK_SAP_USER'
    IMPORTING
      param_value = lv_check_sap_user
    EXCEPTIONS
      not_found   = 1
      OTHERS      = 2.
* end VIMI-11763

  LOOP AT gt_usermap WHERE deleted EQ space.
* End SP8 VIMI-5636 mnguyen
    g_tabix = sy-tabix.
* Begin of VIMI-17168    "SNITTALA
    IF NOT gt_usermap-email IS INITIAL.
      CONDENSE gt_usermap-email NO-GAPS.
      MODIFY gt_usermap INDEX g_tabix.
    ENDIF.
* End of VIMI-17168
* Begin of VIMI-8504 - Validation for Expired User
* begin VIMI-11763
*    IF NOT gt_usermap-sap_user_id IS INITIAL
    IF ( NOT gt_usermap-sap_user_id IS INITIAL ) AND
       ( NOT lv_check_sap_user IS INITIAL ).
* end VIMI-11763
      CLEAR: l_gltgb,
             l_gltgv,
             l_uflag.
      SELECT  SINGLE gltgv gltgb uflag  FROM usr02 INTO (l_gltgv , l_gltgb , l_uflag)
       WHERE bname = gt_usermap-sap_user_id.
*        Begin of insert VIMI-19164
      IF sy-subrc NE 0.
        PERFORM display_grid_message USING TEXT-h01 g_tabix
                                            'OPT_USERID'
                                            '52' gt_usermap-sap_user_id.
        p_subrc = 4.
      ENDIF.
*        End of insert VIMI-19164
* VIMI-11763 - enable the check again, because it will depend on the new Z-const (see above)
*Start of comment VIMI-10219/ccheemar
      IF ( l_uflag NE '0' ).
        PERFORM display_grid_message USING TEXT-t36 g_tabix
                                              'OPT_USERID'
                                              '52' gt_usermap-sap_user_id .
        p_subrc = 4.
      ELSE.
*End of VIMI-10219/ccheemar
        IF ( NOT l_gltgv IS INITIAL ) AND ( l_gltgv > sy-datum ).
          PERFORM display_grid_message USING TEXT-mb2 g_tabix
                                                'OPT_USERID'
                                                '52' gt_usermap-sap_user_id .
*********added for VIMI-10151*************************
          IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
            l_tab = 'USR'.
            PERFORM capture_messages  USING TEXT-mb2 l_tab lv_opt_userid.
          ENDIF.
*********added for VIMI-10151*************************
          p_subrc = 4.
        ENDIF.

        IF  ( NOT l_gltgb IS INITIAL ) AND  ( l_gltgb < sy-datum ).
          PERFORM display_grid_message USING TEXT-t36 g_tabix
                                                'OPT_USERID'
                                                '52' gt_usermap-sap_user_id .
*********added for VIMI-10151*************************
          IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
            l_tab = 'USR'.
            PERFORM capture_messages  USING TEXT-t36  l_tab gt_usermap-opt_userid.
          ENDIF.
*********added for VIMI-10151*************************
          p_subrc = 4.
        ENDIF.
      ENDIF.   "Commented VIMI-10219/ccheemar   VIMI-11763 - enable back
    ENDIF.
* End of VIMI-8504

****Begin of Changes 560/3.
    IF NOT gt_usermap-manager_id IS  INITIAL.
      READ TABLE tb_usermap INTO wa_usermap
                            WITH KEY opt_userid = gt_usermap-manager_id.
      IF sy-subrc NE 0.
        PERFORM display_grid_message USING TEXT-m10 g_tabix
                                              'OPT_USERID'
                                              '52' ' '.
        p_subrc = 4.
      ENDIF.
* Begin of 5.2 SP4 - VIMI-3325 - rosterma
      READ TABLE gt_coa INTO ls_coa
                        WITH KEY opt_userid = gt_usermap-opt_userid BINARY SEARCH. "M-VIMI-13918/STAMADA
      IF sy-subrc NE 0.
* begin VIMI-7280
        READ TABLE gt_coa_filtered INTO ls_coa
                          WITH KEY opt_userid = gt_usermap-opt_userid BINARY SEARCH. "M-VIMI-13918/STAMADA
        IF sy-subrc NE 0.
* end VIMI-7280
* Start Insert 5.2 SP5 - VIMI-3931 - AKOESTLI
* User is not yet in gt_coa.
* Check whether copy function is customized for new manager entries.
* If it exists: add user to gt_coa.
* Begin SP8 VIMI-5636 mnguyen - comment out
*          CALL FUNCTION '/PTGWFI/CP_READCONSTANT'
*            EXPORTING
*              constname          = 'APPR_USR_COA_COPY'
*              productcode        = 'IAP'
*            IMPORTING
*              constvalue         = c_value
*            EXCEPTIONS
*              constant_not_found = 1
*              OTHERS             = 2.
*          IF sy-subrc <> 0.
*
*          ENDIF.
* End SP8 VIMI-5636 mnguyen - comment out
          IF c_value <> ' '.
* add user to gt_coa
            CLEAR ls_coa.
            ls_coa-opt_userid     = gt_usermap-opt_userid.
            ls_coa-counter        = 1.
            ls_coa-currency       = 'EUR'.
            ls_coa-approval_limit = '0.01'.
            ls_coa-manager_id     = gt_usermap-manager_id.
* Begin of 5.2 SP6 - VIMI-4734 - rosterma
*          ls_coa-expense_type   = '*'.
*          ls_coa-bukrs          = '*'.
*          ls_coa-kostl          = '*'.
*          ls_coa-wbs_element    = '*'.
*          ls_coa-plant          = '*'.
*            LOOP AT lt_t401 INTO ls_t401.     "VIMI-23560/AMANGAPA
            LOOP AT gt_401_old INTO ls_t401.   "VIMI-23560/AMANGAPA
              ASSIGN COMPONENT ls_t401-fieldname
                  OF STRUCTURE ls_coa TO <field_name>.
              <field_name> = '*'.
            ENDLOOP.
* End of 5.2 SP6 - VIMI-4734 - rosterma
* begin VIMI-7280
*          APPEND ls_coa TO gt_coa.
*           verify that we may add a record with *
            lv_actvt = '01'.
            PERFORM get_sap_user_group
              USING gt_usermap-sap_user_id
              CHANGING lv_group.

            CALL METHOD /opt/vim_auth_check=>check_appr_limits
              EXPORTING
                pi_group = lv_group
                pi_bukrs = '    '
                pi_actvt = lv_actvt
              EXCEPTIONS
                failed   = 1.

            IF sy-subrc = 0.
              ls_coa-mandt = sy-mandt.                  "I-VIMI-15058
              APPEND ls_coa TO gt_coa.
              SORT gt_coa BY opt_userid.                 "I-VIMI-15058
* Sort it again, to keep the Binary Search to work on users...
            ELSE.
              PERFORM display_grid_message USING TEXT-m11 g_tabix
                                                    'OPT_USERID'
                                                    '52' ' '.
              p_subrc = 4.
            ENDIF.
* end VIMI-7280
          ELSE.
* End Insert 5.2 SP5 - VIMI-3931 - AKOESTLI

            PERFORM display_grid_message USING TEXT-m11 g_tabix
                                                  'OPT_USERID'
                                                  '52' ' '.
            p_subrc = 4.
          ENDIF.
* End of 5.2 SP4 - VIMI-3325 - rosterma
* Start Insert 5.2 SP5 - VIMI-3931 - AKOESTLI
        ENDIF.                                              "VIMI-7280
      ENDIF.
* End Insert 5.2 SP5 - VIMI-3931 - AKOESTLI
    ENDIF.
****End of Changes 560/3

* Begin of VIMI-21108
    IF NOT gt_usermap-email IS INITIAL.
      unstruct-type    = 'INT'.
      unstruct-address = gt_usermap-email.
      CALL FUNCTION 'SX_INTERNET_ADDRESS_TO_NORMAL'
        EXPORTING
          address_unstruct    = unstruct
*         COMPLETE_ADDRESS    = 'X'
        EXCEPTIONS
          error_address_type  = 1
          error_address       = 2
          error_group_address = 3
          OTHERS              = 4.
      IF sy-subrc IS INITIAL.
        READ TABLE lt_usermap_dactive INTO ls_usermap_dactive WITH KEY email = gt_usermap-email.
        IF sy-subrc IS INITIAL.
          IF sy-repid = '/OPT/AR_COA'.
            PERFORM add_warning_msg USING ls_usermap_dactive-opt_userid g_tabix '133'.
          ELSEIF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
            l_tab = 'USR'.
            PERFORM capture_messages USING TEXT-t45 l_tab ls_usermap_dactive-opt_userid.
          ENDIF.
        ENDIF.

      ELSE.
        IF sy-repid = '/OPT/AR_COA'.
          PERFORM display_grid_message USING TEXT-n10 g_tabix
                                              'EMAIL'
                                              '52' gt_usermap-email.
          p_subrc = 4.
        ELSEIF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
          l_tab = 'USR'.
          PERFORM capture_messages USING TEXT-t44 l_tab gt_usermap-opt_userid.
        ENDIF.
      ENDIF.
    ENDIF.
    CLEAR: ls_usermap_dactive,unstruct.
* End of VIMI-21108

* Begin SP8 VIMI-5635 mnguyen
    INSERT gt_usermap INTO TABLE lt_usermap_unique.
    IF sy-subrc <> 0.
      PERFORM display_grid_message USING TEXT-m04 g_tabix
                                          'EMAIL'
                                            '52' ' '.
*********added for VIMI-10151*************************
      IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
        l_tab = 'USR'.
        PERFORM capture_messages USING TEXT-m04 l_tab gt_usermap-opt_userid.
      ELSE.
*********added for VIMI-10151*************************
        p_subrc = 4.
        EXIT.
      ENDIF.
    ENDIF.

  ENDLOOP.

  REFRESH: lt_usermap_dactive[].                              " VIMI-21108

* VIMI-5636 Begin delete
*    CASE l_value.
*      WHEN 'N'.
*        IF gt_usermap-windows_id IS INITIAL.
*          PERFORM display_grid_message USING text-m02 g_tabix
*                                             'WINDOWS_ID'
*                                             '52' ' '.
*          p_subrc = 4.
*        ENDIF.
*        IF gt_usermap-windows_domain IS INITIAL.
*          PERFORM display_grid_message USING text-m02 g_tabix
*                                             'WINDOWS_DOMAIN'
*                                             '52' ' '.
*          p_subrc = 4.
*        ENDIF.
*      WHEN 'P'.
*        IF gt_usermap-ep6_user_id IS INITIAL.
*          PERFORM display_grid_message USING text-m03 g_tabix
*                                             'EP6_USER_ID'
*                                             '52' ' '.
*          p_subrc = 4.
*        ENDIF.
*      WHEN OTHERS.
*        IF gt_usermap-email IS INITIAL.
*          PERFORM display_grid_message USING text-m01 g_tabix
*                                            'EMAIL'
*                                            '52' ' '.
*          p_subrc = 4.
*        ENDIF.
*    ENDCASE.
**Patch2prod553
**    LOOP AT GT_USERMAP WHERE DELETED EQ SPACE.
*    IF gt_usermap-deleted EQ space.
**Endpatch
*      IF NOT gt_usermap-email IS INITIAL.
*        LOOP AT gt_usermap WHERE opt_userid NE gt_usermap-opt_userid
*                            AND   email      EQ gt_usermap-email
**   Check only valid entries VIMI-136 Patch 1
*                            AND   deleted    EQ space.
*          g_tabix = sy-tabix.
*          PERFORM display_grid_message USING text-m04 g_tabix
*                                          'EMAIL'
*                                            '52' gt_usermap-email.
*          p_subrc = 4.
*          EXIT.
*        ENDLOOP.
*      ENDIF.
**Patch2prod553
**    ENDIF.
**    ENDLOOP.
**Endpatch
*  ENDLOOP.
* VIMI-5636 End delete
* VIMI-5636 Begin insert
  IF l_value = 'E'.
    READ TABLE gt_usermap WITH KEY email = space
                                   deleted = space ."TRANSPORTING NO FIELDS. "VIMI-9640
    IF sy-subrc = 0.
      PERFORM display_grid_message USING TEXT-m01 sy-tabix
                                        'EMAIL'
                                        '52' ' '.
*********added for VIMI-10151*************************
      IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
        l_tab = 'USR'.
        PERFORM capture_messages USING TEXT-m01  l_tab gt_usermap-opt_userid.
      ENDIF.
*********added for VIMI-10151*************************
      p_subrc = 4.
    ENDIF.
  ELSEIF l_value = 'N' OR l_sysvalue = 'NET'.
    READ TABLE gt_usermap WITH KEY windows_id = space
                                   deleted = space." TRANSPORTING NO FIELDS. "VIMI-9640
    IF sy-subrc = 0.
      PERFORM display_grid_message USING TEXT-m02 sy-tabix
                                         'WINDOWS_ID'
                                         '52' ' '.
*********added for VIMI-10151*************************
      IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
        l_tab = 'USR'.
        PERFORM capture_messages USING TEXT-m02 l_tab lv_opt_userid.
      ENDIF.
*********added for VIMI-10151*************************
      p_subrc = 4.
    ENDIF.
    READ TABLE gt_usermap WITH KEY windows_domain = space
                                   deleted = space ."TRANSPORTING NO FIELDS. "VIMI-9640
    IF sy-subrc = 0.
      PERFORM display_grid_message USING TEXT-m02 sy-tabix
                                         'WINDOWS_DOMAIN'
                                         '52' ' '.
*********added for VIMI-10151*************************
      IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
        l_tab = 'USR'.
        PERFORM capture_messages  USING TEXT-m02  l_tab lv_opt_userid.
      ENDIF.
*********added for VIMI-10151*************************
      p_subrc = 4.
    ENDIF.
  ELSEIF l_value = 'P' OR l_sysvalue = 'EP6'.
    READ TABLE gt_usermap WITH KEY ep6_user_id = space
                                   deleted = space." TRANSPORTING NO FIELDS. "VIMI-9640
    IF sy-subrc = 0.
      PERFORM display_grid_message USING TEXT-m03 sy-tabix
                                         'EP6_USER_ID'
                                         '52' ' '.
*********added for VIMI-10151*************************
      IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
        l_tab = 'USR'.
        PERFORM capture_messages USING TEXT-m03 l_tab lv_opt_userid.
      ENDIF.
*********added for VIMI-10151*************************
      p_subrc = 4.
    ENDIF.
  ENDIF.
  FREE lt_usermap_unique.
* End SP8 VIMI-5636 mnguyen
  CLEAR: g_tabname,                                         " VIMI-9049
         g_tab_desc.

  IF sy-repid NE '/OPT/COA_UPLOAD_REPORT'.
    CHECK p_subrc GT 0.                                     " VIMI-9049
    CALL METHOD g_protocol->display_protocol( ).
  ENDIF.
ENDFORM.                    " validate_usermap_data
*&---------------------------------------------------------------------*
*&      Form  validate_coa_data
*&---------------------------------------------------------------------*
FORM validate_coa_data  CHANGING p_subrc.
  DATA l_coa1 TYPE /opt/bl_4rcoa_data.
  DATA l_coa2 TYPE /opt/bl_4rcoa_data.
  DATA l_msg  TYPE text132.
  DATA:l_tabix TYPE sy-tabix.
* For an approver, approval limit and currency combination, there cannot
* be more than one record
  CLEAR: g_tabix, l_tabix.
* Begin SP8 VIMI-5636 mnguyen
  READ TABLE gt_coa WITH KEY currency = space.
  IF sy-subrc = 0.
    CONCATENATE gt_coa-opt_userid gt_coa-counter 'Currency' INTO l_msg
                    SEPARATED BY space.
    PERFORM display_grid_message USING l_msg sy-tabix 'CURRENCY' '52' ' '.
    p_subrc = 4.
  ENDIF.
* VIMI-5636 delete
*  LOOP AT gt_coa.
*    l_tabix = sy-tabix.
**-- Currency key can't be blank
*    IF gt_coa-currency IS INITIAL.
*      PERFORM display_grid_message USING gt_coa-currency
*                                         l_tabix 'CURRENCY' '52' ' '.
*      p_subrc = 4.
*    ENDIF.
*
****Begin of Changes HF4
*  ENDLOOP.
* End SP8 VIMI-5838 mnguyen
*    MOVE-CORRESPONDING gt_coa TO l_coa1.
*    LOOP AT gt_coa WHERE opt_userid     EQ gt_coa-opt_userid
*                   AND   currency       EQ gt_coa-currency
*                   AND   counter        NE gt_coa-counter.
*      g_tabix = sy-tabix.
*      MOVE-CORRESPONDING gt_coa TO l_coa2.
*      IF l_coa1 EQ l_coa2.
*        CONCATENATE gt_coa-opt_userid gt_coa-counter INTO l_msg
*                    SEPARATED BY space.
*        PERFORM display_grid_message USING l_msg g_tabix ' ' '52' ' '.
*        p_subrc = 4.
*      ENDIF.
*    ENDLOOP.
*  ENDLOOP.
***End of Changes HF4
  CHECK p_subrc GT 0.
  CALL METHOD g_protocol->display_protocol( ).
ENDFORM.                    " validate_coa_data
*&---------------------------------------------------------------------*
*&      Form  DISPLAY_GRID_MESSAGE
*&---------------------------------------------------------------------*
FORM display_grid_message  USING    p_text p_rowid
                                    p_fieldname
                                    p_msgno
                                    p_value.

  DATA l_fieldname TYPE lvc_fname.
  DATA: lwa_fcat   TYPE lvc_s_fcat.
* Begin of change VIMI-15934
*  DATA: l_row(10) TYPE c.
  DATA: l_row(22) TYPE c.
* End of change VIMI-15934
  DATA: l_rowtext TYPE char10.
  l_row = p_rowid.
  CONDENSE l_row NO-GAPS.

  l_fieldname = p_fieldname.
  IF g_protocol IS INITIAL.
    CREATE OBJECT g_protocol
      EXPORTING
        i_calling_alv = g_grid.
  ENDIF.

* Start of INS VIMI-7380
  IF sy-repid = '/OPT/AR_COA'.
* Begin of VIMI-9049
    CLEAR: gt_nfcat,
           lwa_fcat,
           l_rowtext.
    IF ( NOT p_rowid IS INITIAL ) AND ( g_tabname <> c_fumview ).
      l_rowtext = TEXT-t33.
      CONCATENATE l_rowtext l_row INTO l_row SEPARATED BY space.
    ENDIF.
*   begin of VIMI-16148
    IF p_rowid IS INITIAL.
      CLEAR l_row.
    ENDIF.
*   end of VIMI-16148
    IF g_tabname = c_fumview.
      l_fieldname = c_fumview.
      lwa_fcat-fieldname = c_fumview.
    ELSE.
      lwa_fcat-fieldname = p_fieldname.
    ENDIF.
*    lwa_fcat-outputlen = 25.             "VIMI-16150
    lwa_fcat-outputlen = 50.                                "VIMI-16150
    lwa_fcat-seltext   = g_tab_desc.
    APPEND lwa_fcat TO gt_nfcat.
    g_protocol->mt_fieldcatalog = gt_nfcat.
* End of VIMI-9049
  ENDIF.

* End of INS VIMI-7380

  CALL METHOD g_protocol->add_protocol_entry
    EXPORTING
      i_msgid     = '/OPT/VIM_701'
      i_msgty     = 'E'
      i_msgno     = p_msgno
      i_row_id    = p_rowid
      i_msgv1     = p_text
      i_msgv2     = p_value
      i_msgv3     = l_row
*     i_msgv3     = l_rowtext                               " VIMI-9049
*     i_msgv4     = l_row                                   " VIMI-9049
      i_fieldname = l_fieldname.
ENDFORM.                    " DISPLAY_GRID_MESSAGE
*&---------------------------------------------------------------------*
*&      Form  HANDLE_USERMAP_DELETE
*&---------------------------------------------------------------------*
FORM handle_usermap_delete .
  DATA lt_rows TYPE lvc_t_roid WITH HEADER LINE.
  DATA lv_changed TYPE xfeld.                               "VIMI-7890
*  BEGIN OF VIMI-17847: ASUTHARA
  TYPES:BEGIN OF x_stack,
          stack_no TYPE /ors/stack_body-stack_no,
          approver TYPE /ors/stack_body-approver,
        END OF x_stack.

  TYPES: BEGIN OF x_stack_header,
           stack_no     TYPE /ors/stack_hdr-stack_no,
           stack_status TYPE /ors/stack_hdr-stack_status,
         END OF x_stack_header.

  DATA: it_stack        TYPE STANDARD TABLE OF x_stack,
        it_stack_hdr    TYPE STANDARD TABLE OF x_stack_header,
        wa_stack        TYPE x_stack,
        wa_stack_header TYPE x_stack_header.
*  END OF VIMI-17847: ASUTHARA

  CALL METHOD g_grid->get_selected_rows
    IMPORTING
      et_row_no = lt_rows[].
  IF lt_rows[] IS INITIAL.
    MESSAGE s000 WITH 'Select at least one row'(m06).
    EXIT.
  ENDIF.

  LOOP AT lt_rows.
    READ TABLE gt_usermap INDEX lt_rows-row_id.
    g_tabix = sy-tabix.

    SELECT COUNT( * ) FROM /ors/usermap
                      WHERE opt_userid EQ gt_usermap-opt_userid.
    IF sy-subrc EQ 0.
* begin VIMI-11024
*   BEGIN OF VIMI-17847:ASUTHARA
*      SELECT COUNT( * ) FROM /ors/stack_body
*        WHERE approver EQ gt_usermap-opt_userid AND top = 'X'.
*      IF sy-subrc EQ 0.
      SELECT stack_no approver FROM /ors/stack_body INTO TABLE it_stack
              WHERE approver = gt_usermap-opt_userid AND top = 'X'.
      IF sy-subrc = 0 AND it_stack[] IS NOT INITIAL.
        SORT it_stack BY stack_no.
        SELECT stack_no stack_status FROM /ors/stack_hdr INTO TABLE it_stack_hdr FOR ALL ENTRIES IN it_stack
           WHERE stack_no = it_stack-stack_no AND stack_status NOT IN ('R','O','T','L','A' ).
        IF it_stack_hdr[] IS NOT INITIAL.
*    END OF VIMI-17847: ASUTHARA
          DATA : l_ans(1).
          CALL FUNCTION 'POPUP_TO_CONFIRM'
            EXPORTING
              titlebar              = TEXT-001
              text_question         = TEXT-002
              text_button_1         = TEXT-003
              icon_button_1         = '@0V@'
              text_button_2         = TEXT-004
              icon_button_2         = '@0W@'
              display_cancel_button = ' '
            IMPORTING
              answer                = l_ans
            EXCEPTIONS
              text_not_found        = 1
              OTHERS                = 2.
          IF l_ans = 2.
            EXIT.
          ENDIF.
        ENDIF.
      ENDIF. "INSERT VIMI-17847: ASUTHARA
* end VIMI-11024
      gt_usermap-deleted = 'X'.
      gt_usermap-user_status = 'X'.      "patch 553/23
      MODIFY gt_usermap INDEX g_tabix.
      lv_changed = 'X'.                                     "VIMI-7890
      gv_changedoc_usermap = 'X'.                           "VIMI-22104-V1
    ELSE.
*      DELETE gt_usermap INDEX g_tabix. "VIMI-7890 Deletion does not make sense!
    ENDIF.
  ENDLOOP.
  IF lv_changed = 'X'.                                      "VIMI-7890
    MESSAGE s051.
    g_changed = 'X'.
  ENDIF.                                                    "VIMI-7890
ENDFORM.                    " HANDLE_USERMAP_DELETE
*&--------------------------------------------------------------------*
*&      Form  POPUP_DATALOSS
*&--------------------------------------------------------------------*
FORM popup_dataloss  CHANGING p_answer.
  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      titlebar              = 'Leave processing'            "#EC NOTEXT
      text_question         = TEXT-m07
      display_cancel_button = space
      popup_type            = 'ICON_MESSAGE_WARNING'
    IMPORTING
      answer                = p_answer
    EXCEPTIONS
      OTHERS                = 0.
ENDFORM.                    " POPUP_DATALOSS
*&--------------------------------------------------------------------*
*&      Form  LOCK_TABLES
*&--------------------------------------------------------------------*
FORM lock_tables.
  IF  sy-repid NE '/OPT/COA_UPLOAD_REPORT'.                 "VIMI-10151

    lock_table: '/OPT/BL_APPCOA',
                '/OPT/BL_AP_CODER',
*              '/PTGWFI/W_ORG', " VIMI-9917
                '/OPT/BL_T401',
                '/OPT/BL_T402',
                '/OPT/BL_RPT_AUTH'.
  ENDIF.                                                    "VIMI-10151
* Start of INS VIMI-7380
  IF sy-repid = '/OPT/AR_COA'
     OR sy-repid EQ '/OPT/COA_UPLOAD_REPORT'.               "VIMI-10151
    lock_table: '/OPT/APPR_COA',
                '/OPT/APPR_LIMIT',
                '/OPT/AFS_CODER'.
  ENDIF.
* End of INS VIMI-7380
ENDFORM.                    "LOCK_TABLES
*&--------------------------------------------------------------------*
*&      Form  UNLOCK_TABLES
*&--------------------------------------------------------------------*
*       text
*---------------------------------------------------------------------*
FORM unlock_tables.
  IF  sy-repid NE '/OPT/COA_UPLOAD_REPORT'.                 "VIMI-10151
    PERFORM unlock_table USING: '/OPT/BL_APPCOA',
                                '/OPT/BL_AP_CODER',
*                              '/PTGWFI/W_ORG',  " VIMI-9917
                                '/OPT/BL_T401',
                                '/OPT/BL_T402',
                                '/OPT/BL_RPT_AUTH'.
  ENDIF.                                                    "VIMI-10151
* Start of INS VIMI-7380
  IF sy-repid = '/OPT/AR_COA'
     OR sy-repid EQ '/OPT/COA_UPLOAD_REPORT'.               "VIMI-10151
    PERFORM unlock_table USING: '/OPT/APPR_COA',
                                '/OPT/APPR_LIMIT',
                                '/OPT/AFS_CODER'.
  ENDIF.
* End of INS VIMI-7380
ENDFORM.                    "UNLOCK_TABLES
*&--------------------------------------------------------------------*
*&      Form  UNLOCK_TABLE
*&--------------------------------------------------------------------*
FORM unlock_table USING p_tablename.
  CALL FUNCTION 'DEQUEUE_E_TABLEE'
    EXPORTING
      tabname = p_tablename
      varkey  = gv_varkey                                   "VIMI-9049
    EXCEPTIONS
      OTHERS  = 0.
ENDFORM.                    "UNLOCK_TABLE
*&---------------------------------------------------------------------*
*&      Form  INIT_140
*&---------------------------------------------------------------------*
FORM init_140 .
  DATA lt_fieldcat TYPE lvc_t_fcat.
  DATA ls_layout   TYPE lvc_s_layo.
  FIELD-SYMBOLS <ftable> TYPE STANDARD TABLE.

  CHECK g_cgridnew IS INITIAL.

  CREATE OBJECT g_cgridnew
    EXPORTING
      container_name = 'NEWROWS_CONTAINER'
    EXCEPTIONS
      OTHERS         = 1.

* create a list tree control
  CREATE OBJECT g_gridnew
    EXPORTING
      i_parent = g_cgridnew
    EXCEPTIONS
      OTHERS   = 1.

  IF sy-subrc <> 0.
    MESSAGE a000 WITH 'Control Error'(n11).
  ENDIF.

  CALL METHOD g_helper->get_fieldcat
    EXPORTING
      i_gridname = g_evt_grid->gridname
      i_newrows  = 'X'
    IMPORTING
      t_fcat     = lt_fieldcat.
*Add F4AVAILABLE BUTTON
  DATA: lt_fieldcat_s TYPE lvc_s_fcat.
  CLEAR: lt_fieldcat_s.
  LOOP AT lt_fieldcat INTO lt_fieldcat_s.
    CASE lt_fieldcat_s-fieldname.
      WHEN 'CODER_ID'.
        lt_fieldcat_s-f4availabl = 'X'.
        MODIFY lt_fieldcat FROM lt_fieldcat_s.
      WHEN 'REQUESTOR_ID'.
        lt_fieldcat_s-f4availabl = 'X'.
        MODIFY lt_fieldcat FROM lt_fieldcat_s.
    ENDCASE.
    CLEAR: lt_fieldcat_s.
  ENDLOOP.

  CASE g_evt_grid->gridname.
    WHEN c_fcoaview.
      ls_layout-grid_title = TEXT-t04.
      ASSIGN gt_coan[] TO <ftable>.
    WHEN c_fcoderview.
      ls_layout-grid_title = TEXT-t05.
      ASSIGN gt_codern[] TO <ftable>.
  ENDCASE.

*  LS_LAYOUT-CWIDTH_OPT = 'X'.

  g_evt_new = g_evt_grid.
  g_evt_new->newrows = 'X'.

  SET HANDLER: g_evt_new->handle_f4             FOR g_gridnew,
               g_evt_new->handle_toolbar        FOR g_gridnew,
               g_evt_new->handle_user_command   FOR g_gridnew,
               g_evt_new->handle_data_changed   FOR g_gridnew,
               g_evt_new->data_changed_finished FOR g_gridnew.

  CALL METHOD g_gridnew->register_edit_event
    EXPORTING
      i_event_id = cl_gui_alv_grid=>mc_evt_enter.
* Begin of D-VIMI-13918/STAMADA
* to avoid the 'data input'/modified event triggered on a PopUp
*  CALL METHOD g_gridnew->register_edit_event
*    EXPORTING
*      i_event_id = cl_gui_alv_grid=>mc_evt_modified.
* End of D-VIMI-13918/STAMADA

  CALL METHOD g_gridnew->set_table_for_first_display
    EXPORTING
      i_save          = 'A'
      is_layout       = ls_layout
    CHANGING
      it_fieldcatalog = lt_fieldcat
      it_outtab       = <ftable>.

ENDFORM.                                                    " INIT_140
*&---------------------------------------------------------------------*
*&      Form  FCODE_140
*&---------------------------------------------------------------------*
FORM fcode_140 .
  DATA:                                                     "VIMI-7280
    lv_subrc  TYPE sysubrc.                                 "VIMI-7280

  DATA: is_valid_input, l_refresh.                          "I-VIMI-13918

  CASE g_okcode_save.
    WHEN c_fcancel.
      MESSAGE s000 WITH TEXT-m08.
      CLEAR g_okcode_save.
      LEAVE TO SCREEN 0.
    WHEN c_fokay.

*     PERFORM check_changed_data.                          "D-VIMI-13918
* Begin of I-VIMI-13918
* Do validation on PopUP(New Rows) and donot leave if invalid input...
      CALL METHOD g_gridnew->check_changed_data
        IMPORTING
          e_valid   = is_valid_input
        CHANGING
          c_refresh = l_refresh.
      IF is_valid_input IS NOT INITIAL.
* End of I-VIMI-13918
        PERFORM check_new_rec_auth CHANGING lv_subrc.       "VIMI-7280
        IF lv_subrc = 0.                                    "VIMI-7280
          CLEAR g_okcode_save.
*        clear g_newrows.
          LEAVE TO SCREEN 0.
        ENDIF.                                              "VIMI-7280
      ENDIF.                                                "I-VIMI-13918
  ENDCASE.
ENDFORM.                                                    " FCODE_140
*&---------------------------------------------------------------------*
*&      Form  HANDLE_NEW_ROW
*&---------------------------------------------------------------------*
FORM handle_new_row .
  REFRESH: gt_coan, gt_codern.
  DO 10 TIMES.
    APPEND: gt_coan, gt_codern.
  ENDDO.
  CALL SCREEN '0140' STARTING AT 25 6.
  CASE g_evt_grid->gridname.
    WHEN c_fcoaview.
      LOOP AT gt_coan.
        CHECK gt_coan-opt_userid NE space.
        APPEND gt_coan TO gt_coa.
      ENDLOOP.
    WHEN c_fcoderview.
* Start of INS VIMI-9049
      IF sy-repid = '/OPT/AR_COA'.
        LOOP AT gt_codern.
          CHECK gt_codern-coder_id NE space.
          MOVE-CORRESPONDING gt_codern TO gt_coder_lba.
          MOVE gt_codern-requestor_id TO gt_coder_lba-requester_id.
          APPEND gt_coder_lba.
        ENDLOOP.
      ELSE.
* End of INS VIMI-9049
        LOOP AT gt_codern.
          CHECK gt_codern-coder_id NE space.
          APPEND gt_codern TO gt_coder.
        ENDLOOP.
      ENDIF.                                                "VIMI-9049
  ENDCASE.
  PERFORM change_alv_data USING space.
  PERFORM free_objects.
  LEAVE TO SCREEN '0100'.

ENDFORM.                    " HANDLE_NEW_ROW
*&---------------------------------------------------------------------*
*&      Form  DISPOSE
*&---------------------------------------------------------------------*
FORM dispose .
  PERFORM unlock_company_code_data.                         "VIMI-16201
  PERFORM free_objects.
  PERFORM unlock_tables.
ENDFORM.                    " DISPOSE
*&---------------------------------------------------------------------*
*&      Form  UN_DELETE_LINES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM un_delete_lines .
  DATA lt_rows TYPE lvc_t_roid WITH HEADER LINE.
  CALL METHOD g_grid->get_selected_rows
    IMPORTING
      et_row_no = lt_rows[].
  IF lt_rows[] IS INITIAL.
    MESSAGE s000 WITH 'Select at least one row'(m06).
    EXIT.
  ENDIF.
  LOOP AT lt_rows.
    READ TABLE gt_usermap INDEX lt_rows-row_id.
    g_tabix = sy-tabix.
    SELECT COUNT( * ) FROM /ors/usermap
                      WHERE opt_userid EQ gt_usermap-opt_userid.
    IF sy-subrc EQ 0.
      gt_usermap-deleted = ' '.
      gt_usermap-user_status = ' '.        "patch 553/23

      MODIFY gt_usermap INDEX g_tabix.
      gv_changedoc_usermap = 'X'.                      "VIMI-22104-V1
    ENDIF.
  ENDLOOP.
  MESSAGE s059.
  g_changed = 'X'.

ENDFORM.                    " UN_DELETE_LINES
*&---------------------------------------------------------------------*
*&      Form  SUBSTITUTE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM substitute .

  DATA lt_rows TYPE lvc_t_roid WITH HEADER LINE.
  CALL METHOD g_grid->get_selected_rows
    IMPORTING
      et_row_no = lt_rows[].
  IF lt_rows[] IS INITIAL.
    MESSAGE s000 WITH 'Select at least one row'(m06).
    EXIT.
  ENDIF.
  READ TABLE lt_rows INDEX 2.
  IF sy-subrc = 0.
    MESSAGE i333(s1) WITH 'Please select only one line'(n01).
  ELSE.
    READ TABLE lt_rows INDEX 1.
    IF sy-subrc = 0.
      READ TABLE gt_usermap INDEX lt_rows-row_id.
      IF sy-subrc = 0.
        IF g_edit = space.
          v_mode = 'X'.
          EXPORT v_mode TO MEMORY ID '/OPT/DISP_SUB'.
        ENDIF.
        SET PARAMETER ID '/ORS/UMOID' FIELD
                             gt_usermap-opt_userid.

* Begin VIMI-18410
        AUTHORITY-CHECK OBJECT 'S_TCODE'
                 ID 'TCD' FIELD '/ORS/MAIN_SUBS'.
        IF sy-subrc = 0.
* End VIMI-18410
          CALL TRANSACTION '/ORS/MAIN_SUBS'.             "#EC CI_CALLTA
* Begin VIMI-18410
        ELSE.
* Implement a suitable exception handling here
          MESSAGE s172(00) WITH '/ORS/MAIN_SUBS'.
        ENDIF.
* End VIMI-18410

      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.                    " SUBSTITUTE
*&---------------------------------------------------------------------*
*&      Form  USER_PREFERENCES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM user_preferences .
  DATA lt_rows TYPE lvc_t_roid WITH HEADER LINE.
  CALL METHOD g_grid->get_selected_rows
    IMPORTING
      et_row_no = lt_rows[].
  IF lt_rows[] IS INITIAL.
    MESSAGE s000 WITH 'Select at least one row'(m06).
    EXIT.
  ENDIF.
  READ TABLE lt_rows INDEX 2.
  IF sy-subrc = 0.
    MESSAGE i333(s1) WITH 'Please select only one line'(n01).
  ELSE.
    READ TABLE lt_rows INDEX 1.
    IF sy-subrc = 0.
*      LOOP AT LT_ROWS.
      READ TABLE gt_usermap INDEX lt_rows-row_id.
      IF sy-subrc = 0.
        SELECT COUNT( * ) FROM /ors/usermap
                    WHERE opt_userid EQ gt_usermap-opt_userid.
        IF sy-subrc NE 0.
          MESSAGE i333(s1) WITH 'Please SAVE user master first'(n13).
        ELSE.
          SELECT SINGLE * INTO s_userprefer
           FROM /ors/user_prefer
           WHERE approver = gt_usermap-opt_userid.
          IF sy-subrc <> 0.
            CLEAR: v_answer_p.
            CALL FUNCTION 'POPUP_TO_CONFIRM'
              EXPORTING
                titlebar      = 'User Preference'(040)
                text_question = TEXT-041
                "'Selected record not found
                "in User Preference.
                "Create a new  one?'(041)
                text_button_1 = 'YES'
              IMPORTING
                answer        = v_answer_p.
            IF v_answer_p = '1'.
              v_create_200_flag = 1.
              CALL SCREEN 200 STARTING  AT 10 3 ENDING AT 140 25.
              "VIMI-2106 - 6.0 - cnicklas - SIZE
            ENDIF.
          ELSE.
            v_change_200_flag = 1.
            CALL SCREEN 200 STARTING  AT 10 3 ENDING AT 140 25.
            "VIMI-2106 - 6.0 - cnicklas - SIZE

          ENDIF.
        ENDIF.
      ENDIF.
*      ENDLOOP.
    ENDIF.
  ENDIF.

ENDFORM.                    " USER_PREFERENCES
*&---------------------------------------------------------------------*
*&      Form  VALIDATE_CODER_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_G_SUBRC  text
*----------------------------------------------------------------------*
FORM validate_coder_data CHANGING p_subrc TYPE sy-subrc.
  DATA: l_msg     TYPE text132,
        l_cnt     TYPE i,
        l_subrc   TYPE sy-subrc,
        ls_coder  TYPE /opt/bl_ap_coder,
        ls_coder1 TYPE /opt/bl_ap_coder,
        l_tabx1   TYPE sy-tabix,
        l_flag    TYPE c,
        lt_coder  LIKE TABLE OF /opt/bl_ap_coder INITIAL SIZE 0.

* begin VIMI-7280
  DATA:
    lt_coder_save TYPE STANDARD TABLE OF /opt/bl_ap_coder,
    lv_tabix      TYPE sytabix,
    lv_maxtabix   TYPE sytabix.
* end VIMI-7280

  DATA: l_dflag TYPE c.                                "patch 560/2

* begin VIMI-7280
* The global GT_TABLE will contain temporarily all the lines
* including those filtered out. When issuing messages that show
* the coder table index, in case the entry is one of those filtered,
* the table index in the message will be set to 99999.
* lv_maxtabix keeps the index boundary of the original, shown entries.
  DESCRIBE TABLE gt_coder LINES lv_maxtabix.
  lt_coder_save[] = gt_coder[].
  APPEND LINES OF gt_coder_filtered TO gt_coder.
* end VIMI-7280

  CHECK NOT gt_coder[] IS INITIAL.

  APPEND LINES OF gt_coder TO lt_coder.

* Begin SP8 VIMI-5636 mnguyen
  DATA lt_unique_tab_r LIKE SORTED TABLE OF gt_coder WITH UNIQUE KEY coder_id requestor_id.
  DATA lt_unique_tab_b LIKE SORTED TABLE OF gt_coder WITH UNIQUE KEY coder_id company_code requestor_id.
  DATA lt_unique_tab_c LIKE SORTED TABLE OF gt_coder WITH UNIQUE KEY coder_id company_code.
  DATA lt_default_tab_r LIKE SORTED TABLE OF gt_coder WITH UNIQUE KEY default_flag requestor_id.
  DATA lt_default_tab_b LIKE SORTED TABLE OF gt_coder WITH UNIQUE KEY default_flag company_code requestor_id.
  DATA lt_default_tab_c LIKE SORTED TABLE OF gt_coder WITH UNIQUE KEY default_flag company_code.
  FIELD-SYMBOLS <fs_unique_tab> TYPE ANY TABLE.
  FIELD-SYMBOLS <fs_default_tab> TYPE ANY TABLE.
  FIELD-SYMBOLS <fs_value> TYPE any.
  DATA lv_msg(80) TYPE c.
  DATA lv_field_name(80) TYPE c.
  DATA lv_field_name2(80) TYPE c.
  DATA lv_value(80) TYPE c.

  IF g_constant = 'R'.
    ASSIGN lt_unique_tab_r TO <fs_unique_tab>.
    ASSIGN lt_default_tab_r TO <fs_default_tab>.
    lv_field_name = 'REQUESTOR_ID'.
    READ TABLE gt_coder WITH KEY requestor_id = space.
    IF sy-subrc = 0.
* begin VIMI-7280
*      PERFORM display_grid_message USING lv_field_name sy-tabix
      lv_tabix = sy-tabix.
      IF lv_tabix > lv_maxtabix.
        lv_tabix = 99999.
      ENDIF.
      PERFORM display_grid_message USING lv_field_name lv_tabix
* end VIMI-7280
                                                     'REQUESTOR_ID' '52'
                                                     ' ' .
      p_subrc = 4.
    ENDIF.
  ELSEIF g_constant = 'B'.
    ASSIGN lt_unique_tab_b TO <fs_unique_tab>.
    ASSIGN lt_default_tab_b TO <fs_default_tab>.
    lv_field_name = 'REQUESTOR_ID'.
    lv_field_name2 = 'COMPANY_CODE'.
    READ TABLE gt_coder WITH KEY requestor_id = space.
    IF sy-subrc = 0.
* begin VIMI-7280
*      PERFORM display_grid_message USING lv_field_name sy-tabix
      lv_tabix = sy-tabix.
      IF lv_tabix > lv_maxtabix.
        lv_tabix = 99999.
      ENDIF.
      PERFORM display_grid_message USING lv_field_name lv_tabix
* end VIMI-7280
                                                     'REQUESTOR_ID' '52'
                                                     ' ' .
      p_subrc = 4.
    ENDIF.
    READ TABLE gt_coder WITH KEY company_code = space.
    IF sy-subrc = 0.
* begin VIMI-7280
*      PERFORM display_grid_message USING lv_field_name2 sy-tabix
      lv_tabix = sy-tabix.
      IF lv_tabix > lv_maxtabix.
        lv_tabix = 99999.
      ENDIF.
      PERFORM display_grid_message USING lv_field_name2 lv_tabix
* end VIMI-7280
                                                     'COMPANY_CODE' '52'
                                                     ' ' .
      p_subrc = 4.
    ENDIF.
  ELSEIF g_constant = 'C'.
    ASSIGN lt_unique_tab_c TO <fs_unique_tab>.
    ASSIGN lt_default_tab_c TO <fs_default_tab>.
    lv_field_name = 'COMPANY_CODE'.
    READ TABLE gt_coder WITH KEY company_code = space.
    IF sy-subrc = 0.
* begin VIMI-7280
*      PERFORM display_grid_message USING lv_field_name sy-tabix
      lv_tabix = sy-tabix.
      IF lv_tabix > lv_maxtabix.
        lv_tabix = 99999.
      ENDIF.
      PERFORM display_grid_message USING lv_field_name lv_tabix
* end VIMI-7280
                                                     'COMPANY_CODE' '52'
                                                     ' ' .
      p_subrc = 4.
    ENDIF.
  ENDIF.
  IF p_subrc GT 0.
    gt_coder[] = lt_coder_save[].                           "VIMI-7280
    CALL METHOD g_protocol->display_protocol( ).
    EXIT.
  ENDIF.
* Check duplicate coder
  IF NOT <fs_unique_tab> IS ASSIGNED.
    gt_coder[] = lt_coder_save[].                           "VIMI-7280
    EXIT.
  ENDIF.
  CLEAR <fs_unique_tab>.
  LOOP AT gt_coder.
    INSERT gt_coder INTO TABLE <fs_unique_tab>.
    IF sy-subrc <> 0.
      CLEAR lv_value.
      ASSIGN COMPONENT lv_field_name OF STRUCTURE gt_coder TO <fs_value>.
      IF sy-subrc = 0.
        lv_value = <fs_value>.
      ENDIF.
      CONCATENATE lv_field_name ':' lv_value
             INTO lv_msg SEPARATED BY space.                "#EC NOTEXT
      IF g_constant = 'B'.
        CLEAR lv_value.
        ASSIGN COMPONENT lv_field_name2 OF STRUCTURE gt_coder TO <fs_value>.
        IF sy-subrc = 0.
          lv_value = <fs_value>.
        ENDIF.
        CONCATENATE lv_msg  lv_field_name2 ':' lv_value
               INTO lv_msg SEPARATED BY space.              "#EC NOTEXT

      ENDIF.
* begin VIMI-7280
*      PERFORM display_grid_message USING lv_msg sy-tabix
      lv_tabix = sy-tabix.
      IF lv_tabix > lv_maxtabix.
        lv_tabix = 99999.
      ENDIF.
      PERFORM display_grid_message USING lv_msg lv_tabix
* end VIMI-7280
                                            ' ' '55' ' '.
      p_subrc = 4.
      EXIT.
    ENDIF.
* Only one default coder is allowed.
    IF gt_coder-default_flag <> space.
      INSERT gt_coder INTO TABLE <fs_default_tab>.
      IF sy-subrc <> 0.
        CLEAR lv_value.
        ASSIGN COMPONENT lv_field_name OF STRUCTURE gt_coder TO <fs_value>.
        IF sy-subrc = 0.
          lv_value = <fs_value>.
        ENDIF.
        CONCATENATE lv_field_name ':' lv_value
               INTO lv_msg SEPARATED BY space.              "#EC NOTEXT
        IF g_constant = 'B'.
          CLEAR lv_value.
          ASSIGN COMPONENT lv_field_name2 OF STRUCTURE gt_coder TO <fs_value>.
          IF sy-subrc = 0.
            lv_value = <fs_value>.
          ENDIF.
          CONCATENATE lv_msg  lv_field_name2 ':' lv_value
                 INTO lv_msg SEPARATED BY space.            "#EC NOTEXT

        ENDIF.
        PERFORM display_grid_message USING lv_msg ' '
                                          ' ' '57' ' '.
        p_subrc = 4.
        EXIT.
      ENDIF.
* At lease one default coder is required for every
* requester/company code if there are some coders.
    ELSE.
      IF g_constant = 'R'.
        DELETE lt_coder WHERE coder_id = gt_coder-coder_id
        AND requestor_id = gt_coder-requestor_id.
        READ TABLE lt_coder TRANSPORTING NO FIELDS
             WITH KEY requestor_id = gt_coder-requestor_id.
        IF sy-subrc = 0.
          READ TABLE lt_coder TRANSPORTING NO FIELDS
            WITH KEY requestor_id = gt_coder-requestor_id
                     default_flag = 'X'.
          IF sy-subrc <> 0.
            p_subrc = 4.
          ENDIF.
        ENDIF.
      ELSEIF g_constant = 'B'.
        DELETE lt_coder WHERE coder_id = gt_coder-coder_id
        AND requestor_id = gt_coder-requestor_id
        AND company_code = gt_coder-company_code.
        READ TABLE lt_coder TRANSPORTING NO FIELDS
             WITH KEY requestor_id = gt_coder-requestor_id
             company_code = gt_coder-company_code.
        IF sy-subrc = 0.
          READ TABLE lt_coder TRANSPORTING NO FIELDS
               WITH KEY requestor_id = gt_coder-requestor_id
                        company_code = gt_coder-company_code
                        default_flag = 'X'.
          IF sy-subrc <> 0.
            p_subrc = 4.
          ENDIF.
        ENDIF.
      ELSEIF g_constant = 'C'.
        DELETE lt_coder WHERE coder_id = gt_coder-coder_id
               AND company_code = gt_coder-company_code.
        READ TABLE lt_coder TRANSPORTING NO FIELDS
             WITH KEY company_code = gt_coder-company_code.
        IF sy-subrc = 0.
          READ TABLE lt_coder TRANSPORTING NO FIELDS
               WITH KEY company_code = gt_coder-company_code
               default_flag = 'X'.
          IF sy-subrc <> 0.
            p_subrc = 4.
          ENDIF.
        ENDIF.
      ENDIF.
      IF p_subrc <> 0.
        CLEAR lv_value.
        ASSIGN COMPONENT lv_field_name OF STRUCTURE gt_coder TO <fs_value>.
        IF sy-subrc = 0.
          lv_value = <fs_value>.
        ENDIF.
        CONCATENATE lv_field_name ':' lv_value
               INTO lv_msg SEPARATED BY space.              "#EC NOTEXT
        IF g_constant = 'B'.
          CLEAR lv_value.
          ASSIGN COMPONENT lv_field_name2 OF STRUCTURE gt_coder TO <fs_value>.
          IF sy-subrc = 0.
            lv_value = <fs_value>.
          ENDIF.
          CONCATENATE lv_msg  lv_field_name2 ':' lv_value
                 INTO lv_msg SEPARATED BY space.            "#EC NOTEXT

        ENDIF.
        PERFORM display_grid_message USING lv_msg ' '
                                          ' ' '56' ' '.
        p_subrc = 4.
        EXIT.
      ENDIF.
    ENDIF.
  ENDLOOP.
  IF p_subrc GT 0.
    gt_coder[] = lt_coder_save[].                           "VIMI-7280
    CALL METHOD g_protocol->display_protocol( ).
    EXIT.
  ENDIF.
  gt_coder[] = lt_coder_save[].                             "VIMI-7280
* End insert
* VIMI-5636 delete
*  LOOP AT gt_coder.
*    g_tabix = sy-tabix.
**-- Check the requestor id
*    IF g_constant = 'R' OR g_constant = 'B'.
*      IF gt_coder-requestor_id IS INITIAL.
*        PERFORM display_grid_message USING gt_coder-requestor_id g_tabix
*                                                     'REQUESTOR_ID' '52'
*                                                     ' ' .
*        p_subrc = 4.
*      ENDIF.
*    ENDIF.
**-- Check the company code
*    IF g_constant = 'C' OR g_constant = 'B'.
*      IF gt_coder-company_code IS INITIAL.
*        PERFORM display_grid_message USING gt_coder-company_code g_tabix
*                                                     'COMPANY_CODE' '52'
*                                                     ' '.
*        p_subrc = 4.
*      ENDIF.
*    ENDIF.
**-- Don't duplicate entry i.e coder, requestor or company code
**-- combination can't be duplicated
*    LOOP AT lt_coder INTO ls_coder WHERE coder_id NE space.
*      l_tabx1 = sy-tabix.
*      CLEAR l_flag.
*      CHECK g_tabix NE l_tabx1.
*      ls_coder1 = ls_coder.
*      IF g_constant = 'R'.
**-- only requestor is available as per config
*        IF gt_coder-coder_id = ls_coder-coder_id AND
*           gt_coder-requestor_id = ls_coder-requestor_id.
*          l_flag = 'X'.
*          CONCATENATE 'Requestor:' gt_coder-requestor_id
*                     INTO l_msg SEPARATED BY space.         "#EC NOTEXT
*          CLEAR: ls_coder1-coder_id.
*          MODIFY lt_coder FROM ls_coder1 TRANSPORTING coder_id
*                      WHERE coder_id = ls_coder-coder_id
*                        AND requestor_id = ls_coder-requestor_id.
*        ENDIF.
*      ELSEIF g_constant = 'C'.
**-- only company code is available as per config
*        IF gt_coder-coder_id = ls_coder-coder_id AND
*           gt_coder-company_code = ls_coder-company_code.
*          l_flag = 'X'.
*          CONCATENATE 'Company Code:' gt_coder-company_code
*                    INTO l_msg SEPARATED BY space.          "#EC NOTEXT
*          CLEAR: ls_coder1-coder_id.
*          MODIFY lt_coder FROM ls_coder1 TRANSPORTING coder_id
*                      WHERE coder_id = ls_coder-coder_id
*                        AND company_code = ls_coder-company_code.
*        ENDIF.
*      ELSEIF g_constant = 'B'.
**-- Both requestor & company code are available as per config
*        IF gt_coder-coder_id = ls_coder-coder_id AND
*           gt_coder-requestor_id = ls_coder-requestor_id AND
*           gt_coder-company_code = ls_coder-company_code.
*          l_flag = 'X'.
*          CONCATENATE 'Requestor:' gt_coder-requestor_id    "#EC NOTEXT
*                      'Company Code:' gt_coder-company_code "#EC NOTEXT
*                      INTO l_msg SEPARATED BY space.
*          CLEAR ls_coder1-coder_id.
*          MODIFY lt_coder FROM ls_coder1 TRANSPORTING coder_id
*                      WHERE coder_id = ls_coder-coder_id
*                        AND requestor_id = ls_coder-requestor_id
*                        AND company_code = ls_coder-company_code.
*        ENDIF.
*      ENDIF.
*      IF l_flag = 'X'.
*        PERFORM display_grid_message USING l_msg l_tabx1
*                                            ' ' '55' ' '.
*        p_subrc = 4.
*
*      ENDIF.
*    ENDLOOP.
*  ENDLOOP.
*
*  IF p_subrc GT 0.
*    CALL METHOD g_protocol->display_protocol( ).
*    EXIT.
*  ENDIF.
*
*  REFRESH lt_coder.
*  CLEAR:ls_coder, ls_coder1.
**-- If there are more than one coder for a requestor or/and company
**-- code.only one coder is eligible for default flag.
*  APPEND LINES OF gt_coder TO lt_coder.
*  IF g_constant = 'R'.
**-- Patch 560/2
**    SORT LT_CODER BY REQUESTOR_ID.
*    SORT lt_coder BY requestor_id ASCENDING
*                     default_flag DESCENDING.
**-- Patch 560/2
*    LOOP AT lt_coder INTO ls_coder.
*
*      IF ls_coder-requestor_id NE ls_coder1-requestor_id.
*        CLEAR: l_cnt,l_subrc.
*        CLEAR l_dflag.                          "Patch 560/2
*      ELSE.
*        IF l_cnt GE 1.
*          IF ls_coder-default_flag IS INITIAL AND
**-- Patch 560/2
**             LS_CODER-DEFAULT_FLAG EQ LS_CODER1-DEFAULT_FLAG.
*             ls_coder-default_flag EQ l_dflag.
**-- patch 560/2
*
*            CHECK l_subrc EQ 0.
*            PERFORM display_grid_message USING ls_coder-requestor_id
*                                               ' ' ' ' '56' ' '.
*            l_subrc = 4.
*            p_subrc = 4.
*          ENDIF.
*          IF NOT ls_coder-default_flag IS INITIAL AND
**-- Patch 560/2
**             LS_CODER-DEFAULT_FLAG EQ LS_CODER1-DEFAULT_FLAG.
*             ls_coder-default_flag EQ l_dflag.
**-- Patch 560/2
*            CHECK l_subrc EQ 0.
*            PERFORM display_grid_message USING ls_coder-requestor_id
*                                              ' ' ' ' '57' ' '.
*            l_subrc = 4.
*            p_subrc = 4.
*          ENDIF.
*        ENDIF.
*      ENDIF.
*      IF NOT ls_coder-default_flag IS INITIAL.        "Patch 560/2
*        l_dflag = 'X'.                                "Patch 560/2
*      ENDIF.                                          "Patch 560/2
*      MOVE ls_coder TO ls_coder1.
*      l_cnt = l_cnt + 1.
*    ENDLOOP.
*  ELSEIF g_constant = 'C'.
**-- Patch 560/2
**    SORT LT_CODER BY COMPANY_CODE.
*    SORT lt_coder BY company_code ASCENDING
*                     default_flag DESCENDING.
**-- Patch 560/2
*    LOOP AT lt_coder INTO ls_coder.
*
*      IF ls_coder-company_code NE ls_coder1-company_code.
*        CLEAR: l_cnt, l_subrc.
*        CLEAR l_dflag.                          "Patch 560/2
*      ELSE.
*        IF l_cnt GE 1.
*          IF ls_coder-default_flag IS INITIAL AND
**-- Patch 560/2
**             LS_CODER-DEFAULT_FLAG EQ LS_CODER1-DEFAULT_FLAG.
*             ls_coder-default_flag EQ l_dflag.
**-- patch 560/2
*            CHECK l_subrc EQ 0.
*            PERFORM display_grid_message USING ls_coder-company_code
*                                               ' ' ' ' '56' ' '.
*            l_subrc = 4.
*            p_subrc = 4.
*          ENDIF.
*          IF NOT ls_coder-default_flag IS INITIAL AND
**-- Patch 560/2
**             LS_CODER-DEFAULT_FLAG EQ LS_CODER1-DEFAULT_FLAG.
*             ls_coder-default_flag EQ l_dflag.
**-- patch 560/2
*            CHECK l_subrc EQ 0.
*            PERFORM display_grid_message USING ls_coder-company_code
*                                               ' '  ' ' '57' ' '.
*            l_subrc = 4.
*            p_subrc = 4.
*          ENDIF.
*        ENDIF.
*      ENDIF.
*      IF NOT ls_coder-default_flag IS INITIAL.        "Patch 560/2
*        l_dflag = 'X'.                                "Patch 560/2
*      ENDIF.                                          "Patch 560/2
*
*      MOVE ls_coder TO ls_coder1.
*      l_cnt = l_cnt + 1.
*    ENDLOOP.
*  ELSEIF g_constant = 'B'.
**-- Patch 560/2
**    SORT LT_CODER BY COMPANY_CODE REQUESTOR_ID .
*    SORT lt_coder BY company_code requestor_id ASCENDING
*                     default_flag DESCENDING.
**-- Patch 560/2
*    LOOP AT lt_coder INTO ls_coder.
*
*      IF ls_coder-company_code NE ls_coder1-company_code.
*        CLEAR: l_cnt, l_subrc.
*        CLEAR l_dflag.                          "Patch 560/2
*      ELSE.
*        IF ls_coder-requestor_id NE ls_coder1-requestor_id.
*          CLEAR: l_cnt, l_subrc.
*          CLEAR l_dflag.                          "Patch 560/2
*        ELSE.
*          IF l_cnt GE 1.
*            IF ls_coder-default_flag IS INITIAL AND
**-- Patch 560/2
**             LS_CODER-DEFAULT_FLAG EQ LS_CODER1-DEFAULT_FLAG.
*             ls_coder-default_flag EQ l_dflag.
**-- patch 560/2
*              CONCATENATE ls_coder-requestor_id
*                          ls_coder-company_code
*                          INTO l_msg SEPARATED BY space.
*              CHECK l_subrc EQ 0.
*              PERFORM display_grid_message USING l_msg ' '
*                                               ' ' '56' ' '.
*              l_subrc = 4.
*              p_subrc = 4.
*            ENDIF.
*            IF NOT ls_coder-default_flag IS INITIAL AND
**-- Patch 560/2
**             LS_CODER-DEFAULT_FLAG EQ LS_CODER1-DEFAULT_FLAG.
*             ls_coder-default_flag EQ l_dflag.
**-- patch 560/2
*              CONCATENATE ls_coder-requestor_id
*                          ls_coder-company_code
*                          INTO l_msg SEPARATED BY space.
*              CHECK l_subrc EQ 0.
*              PERFORM display_grid_message USING l_msg ' '
*                                               ' ' '57' ' '.
*              l_subrc = 4.
*              p_subrc = 4.
*            ENDIF.
*          ENDIF.
*        ENDIF.
*      ENDIF.
*      IF NOT ls_coder-default_flag IS INITIAL.        "Patch 560/2
*        l_dflag = 'X'.                                "Patch 560/2
*      ENDIF.                                          "Patch 560/2
*      MOVE ls_coder TO ls_coder1.
*      l_cnt = l_cnt + 1.
*    ENDLOOP.
*  ENDIF.
*  IF l_subrc NE 0.
*    l_subrc = p_subrc.
*  ENDIF.
* End SP8 VIMI-5636 mnguyen.
*  CHECK p_subrc GT 0.                                      "VIMI-7280
*  CALL METHOD g_protocol->display_protocol( ).             "VIMI-7280
ENDFORM.                    " VALIDATE_CODER_DATA
*&---------------------------------------------------------------------*
*&      Form  validate_fields
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_L_MCELL  text
*      -->P_2183   text
*      -->P_2184   text
*      <--P_L_VALID  text
*----------------------------------------------------------------------*
FORM validate_fields USING    VALUE(pi_mcell) TYPE lvc_s_modi
                              VALUE(pi_table) TYPE c
                              VALUE(pi_field) TYPE c
                     CHANGING po_valid TYPE c.
  DATA: l_len       TYPE i,
        l_cnt       TYPE i,
        l_flag      TYPE c,
        l_value     TYPE string,
        l_where(72) TYPE c,
        it_where    LIKE TABLE OF l_where,
        it_fld      LIKE TABLE OF l_where,
        ls_dfies    TYPE dfies,
        lt_dfies    TYPE TABLE OF dfies INITIAL SIZE 0,
        ls_tabname  TYPE ddobjname,
        lv_value    TYPE lvc_value.                      "SP1

  DATA: l_fld TYPE REF TO data.
  FIELD-SYMBOLS: <fs> TYPE any.

  DATA: lv_fmname TYPE char70.                              "5.2 HF1

  ls_tabname = pi_table.
  CALL FUNCTION 'DDIF_FIELDINFO_GET'
    EXPORTING
      tabname        = ls_tabname
      fieldname      = pi_field
    TABLES
      dfies_tab      = lt_dfies
    EXCEPTIONS
      not_found      = 1
      internal_error = 2
      OTHERS         = 3.
  IF sy-subrc <> 0.
    EXIT.
  ELSE.
    READ TABLE lt_dfies INTO ls_dfies
        WITH KEY fieldname = pi_field.
  ENDIF.

  CHECK NOT ls_dfies-rollname IS INITIAL.

*  CREATE DATA l_fld TYPE (pi_field).
  CREATE DATA l_fld TYPE (ls_dfies-rollname).
  ASSIGN l_fld->* TO <fs>.

*-- 5.2 HF1
*-- Build where clause
*  IF pi_table = 'CSLA' OR pi_table = 'CEPC' OR pi_table = 'CKPH' OR
*     pi_table = ' FMFCTR'.
*    CONCATENATE pi_field ' = ' ' ''' pi_mcell-value '''' ' AND '
*                ' DATBI  GE ' ' ''' sy-datum '''' INTO l_where.
*  ELSE.
*    CONCATENATE pi_field ' = ' ' ''' pi_mcell-value ''''
*            INTO l_where.
*  ENDIF.
*  APPEND l_where TO it_where.
*-- 5.2 HF1

*-- dynamic field
  CLEAR l_where.
  l_where = pi_field.
  APPEND l_where TO it_fld.

  MOVE pi_mcell-value TO <fs>.
  DESCRIBE FIELD <fs> LENGTH l_len IN CHARACTER MODE.
  MOVE pi_mcell-value TO l_value.
  DO l_len TIMES.
    IF l_value NE space AND l_value+0(1) = '*'.
      l_cnt = l_cnt + 1.
    ENDIF.
    SHIFT l_value.
  ENDDO.
  IF l_cnt EQ 0 .
*-- Start for 5.2 HF1
*-- Convert value into SAP internal format
    IF NOT ls_dfies-convexit IS INITIAL.
      CONCATENATE 'CONVERSION_EXIT_' ls_dfies-convexit '_INPUT'
        INTO lv_fmname.

      CALL FUNCTION lv_fmname
        EXPORTING
          input  = pi_mcell-value
        IMPORTING
          output = <fs>.
    ENDIF.

*-- Build where clause
    IF pi_table = 'CSLA' OR pi_table = 'CEPC' OR pi_table = 'CKPH' OR
       pi_table = ' FMFCTR' OR pi_table = 'CSKS'.
      CONCATENATE pi_field ' = ' ' ''' <fs> '''' ' AND '
                  ' DATBI  GE ' ' ''' sy-datum '''' INTO l_where.
    ELSE.
      CONCATENATE pi_field ' = ' ' ''' <fs> ''''
              INTO l_where.
    ENDIF.
    APPEND l_where TO it_where.
*-- End for 5.2 HF1
*    SELECT SINGLE (it_fld) FROM (pi_table) INTO pi_mcell-value   "SP1
    SELECT SINGLE (it_fld) FROM (pi_table) INTO lv_value   "SP1
      WHERE (it_where).
    IF sy-subrc NE 0.
      l_flag = 'X'.
    ENDIF.
  ENDIF.
  IF l_flag = 'X' OR l_cnt GT 1 OR
    ( pi_mcell-value+0(1) NE '*' AND l_cnt = 1 ).
    po_valid = 'N'.
  ENDIF.
ENDFORM.                    " validate_fields
*&---------------------------------------------------------------------*
*&      Form  changedoc_appcoa
*&---------------------------------------------------------------------*
*Begin of VIM 5.2 SP5 - VIMI-3677 - CNICKLAS
*----------------------------------------------------------------------*
*      -->P_GT_COA  text
*----------------------------------------------------------------------*
FORM changedoc_appcoa  TABLES   pt_coa STRUCTURE /opt/bl_appcoa
                                pt_coa_old STRUCTURE /opt/bl_appcoa.
* Begin of VIMI-18347/snittala
  IF NOT pt_coa_old[] IS INITIAL.
    SORT pt_coa_old.
    DELETE ADJACENT DUPLICATES FROM pt_coa_old.
  ENDIF.
  IF NOT pt_coa[] IS INITIAL.
    SORT pt_coa.
    DELETE ADJACENT DUPLICATES FROM pt_coa.
  ENDIF.
* End of VIMI-18347/snittala
  CALL FUNCTION '/OPT/VIM_BL_CHNG_APCOA' IN UPDATE TASK "M-VIMI-13918/STAMADA
    TABLES
      pt_coa_old = pt_coa_old[]
      pt_coa_new = pt_coa[].

* End of VIM 5.2 SP5 - VIMI-3677 - CNICKLAS
ENDFORM.                    " changedoc_appcoa

*&---------------------------------------------------------------------*
*&      Form  changedoc_usermap
*&---------------------------------------------------------------------*
*Begin of VIM 5.2 SP5 - VIMI-3677 - CNICKLAS
*----------------------------------------------------------------------*
*      -->P_GT_COA  text
*----------------------------------------------------------------------*
FORM changedoc_usermap  TABLES  pt_usermap STRUCTURE /ors/usermap
                                pt_usermap_old STRUCTURE /ors/usermap.
* Begin of VIMI-18347/snittala
  IF NOT pt_usermap_old[] IS INITIAL.
    SORT pt_usermap_old.
    DELETE ADJACENT DUPLICATES FROM pt_usermap_old.
  ENDIF.
  IF NOT pt_usermap[] IS INITIAL.
    SORT pt_usermap.
    DELETE ADJACENT DUPLICATES FROM pt_usermap.
  ENDIF.
* End of VIMI-18347/snittala
* Begin of VIMI-19181
  IF sy-repid = '/OPT/COA_UPLOAD_REPORT' AND  gv_fmode IS NOT INITIAL
     AND pt_usermap_old[] IS NOT INITIAL.
    CALL FUNCTION '/OPT/VIM_BL_CHNG_USRMAP' IN UPDATE TASK
      EXPORTING
        cprog          = sy-repid
      TABLES
        pt_usermap_old = pt_usermap_old[]
        pt_usermap_new = pt_usermap[].
  ELSE.
* End of VIMI-19181
    CALL FUNCTION '/OPT/VIM_BL_CHNG_USRMAP' IN UPDATE TASK "M-VIMI-13918/STAMADA
      TABLES
        pt_usermap_old = pt_usermap_old[]
        pt_usermap_new = pt_usermap[].
  ENDIF.                                                    "VIMI-19181
* End of VIM 5.2 SP5 - VIMI-3677 - CNICKLAS
ENDFORM.                    " changedoc_appcoa


*&---------------------------------------------------------------------*
*&      Form  changedoc_display
*&---------------------------------------------------------------------*
* Begin of VIM 5.2 SP5 - VIMI-3677 - CNICKLAS
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM changedoc_display USING p_ucom.

  DATA: lv_objektid            TYPE cdhdr-objectid,
        lt_editpos_with_header TYPE TABLE OF cdred,
        lt_editpos             TYPE TABLE OF cdred,
        ls_editpos             TYPE cdred,
        lv_applicationid       TYPE repid,
        lv_pos                 TYPE rblgp,
        lv_local               TYPE tzonref-tzone,
        lv_release             TYPE saprelease,                         "VIMI-7834
        lt_cdhdr               TYPE TABLE OF cdhdr,                       "VIMI-6297
        lt_cdhdr2              TYPE  TABLE OF cdhdr,                     "VIMI-6297
        lv_tabkey              TYPE cdtabkey,                            "VIMI-7380
        lv_tabnam              TYPE tabname.                             "VIMI-7380

  DATA: BEGIN OF lt_objectcl OCCURS 0,
          objectcl TYPE cdobjectcl,
        END OF lt_objectcl.
  DATA: ls_objectcl LIKE LINE OF lt_objectcl.

  DATA: ls_repid TYPE repid.                                "VIMI-9049

* Start Insert VIMI-7834 - check whether SAP EHP was installed
  SELECT SINGLE release FROM cvers INTO lv_release
         WHERE component = 'SAP_APPL'.
* End Insert VIMI-7834
* Start of INS VIMI-7380
  IF p_ucom = 'CHNG_DIS3'.
    MOVE '/OPT/VIM_APPLMT' TO ls_objectcl-objectcl.
    APPEND ls_objectcl TO lt_objectcl.
  ELSE.
* End of INS VIMI-7380
* Begin of VIMI-9049 - Gopinath A
    IF sy-repid = '/OPT/AR_COA'.
      MOVE '/OPT/VIM_LBACOA' TO ls_objectcl-objectcl.
      APPEND ls_objectcl TO lt_objectcl.
      CLEAR: gt_ncoa1[].
      IF g_evt_grid->gridname = c_fapprcoa.
        APPEND LINES OF gt_ncoa3 TO gt_ncoa1.
      ELSEIF g_evt_grid->gridname = c_fcodcoa.
        APPEND LINES OF gt_ncoa2 TO gt_ncoa1.
      ENDIF.
      MOVE '/OPT/VIM_APPCOA' TO ls_objectcl-objectcl.       "VIMI-5085
      APPEND ls_objectcl TO lt_objectcl.                    "VIMI-5085
    ELSE.
* End of VIMI-9049 - Gopinath A
      MOVE '/OPT/VIM_APPCOA' TO ls_objectcl-objectcl.
      APPEND ls_objectcl TO lt_objectcl.
    ENDIF.                                                  " VIMI-9049

* Begin of VIMI-9049 - Gaddepal
    IF ( sy-repid = '/OPT/AR_COA' AND p_ucom = 'CHNG_DIS2' ) OR
       ( sy-repid <> '/OPT/AR_COA' ).
      MOVE '/ORS/USERMAP' TO ls_objectcl-objectcl.
      APPEND ls_objectcl TO lt_objectcl.
    ENDIF.
* End of VIMI-9049 - Gaddepal.
  ENDIF.                                                    "VIMI-7380

  DATA lt_rows TYPE lvc_t_roid WITH HEADER LINE.

  CALL METHOD g_grid->get_selected_rows
    IMPORTING
      et_row_no = lt_rows[].

  IF lt_rows[] IS INITIAL.
    MESSAGE s000 WITH 'Select at least one row'(m06).
    EXIT.
  ENDIF.

  READ TABLE lt_rows INDEX 2.
  IF sy-subrc = 0.
    MESSAGE i333(s1) WITH 'Please select only one line'(n01).
  ELSE.
    READ TABLE lt_rows INDEX 1.
    IF sy-subrc = 0.
      CASE p_ucom.
        WHEN 'CHNG_DIS1'.
* Begin of VIMI-9049 - Gaddepal
          IF sy-repid = '/OPT/AR_COA'.
            READ TABLE gt_ncoa1 INDEX lt_rows-row_id.
            CONCATENATE sy-mandt
                        gt_ncoa1-comp_code
                        gt_ncoa1-appr_level
                        gt_ncoa1-opt_userid
                        gt_ncoa1-otype                      "VIMI-15654
                        gt_ncoa1-actorid                    "VIMI-15654
                        gt_ncoa1-counter
                   INTO lv_tabkey
             RESPECTING BLANKS.
            lv_objektid = '/OPT/VIM_LBACOA'.
            lv_tabnam   = '/OPT/APPR_COA'.
            CLEAR gt_ncoa1[].
          ELSE.
* End of VIMI-9049 - Gaddepal.
            READ TABLE gt_coa INDEX lt_rows-row_id.
            lv_objektid = gt_coa-opt_userid.
          ENDIF.                                            " VIMI-9049
        WHEN 'CHNG_DIS2'.
          READ TABLE gt_usermap INDEX lt_rows-row_id.
          lv_objektid = gt_usermap-opt_userid.
* Start of INS VIMI-7380.
        WHEN 'CHNG_DIS3'.
          READ TABLE gt_level1 INDEX lt_rows-row_id.
          IF sy-subrc = 0.
            CONCATENATE sy-mandt
                        gt_level1-bukrs
                        gt_level1-expense_type              "VIMI-9530
                        gt_level1-appr_level
*                        gt_level1-expense_type              "VIMI-9049 "VIMI-9530
                   INTO lv_tabkey
             RESPECTING BLANKS.
            lv_objektid = '/OPT/VIM_APPLMT'.
            lv_tabnam   = '/OPT/APPR_LIMIT'.
          ENDIF.
* End of INS VIMI-7380
        WHEN OTHERS.
          MESSAGE i521(s1).
          EXIT.
      ENDCASE.

* Start Insert VIMI-7834
      CASE lv_release.
        WHEN '604'.                                         "EHP4
          LOOP AT lt_objectcl INTO ls_objectcl.
            CLEAR lt_editpos_with_header.
            REFRESH lt_editpos_with_header.
            CALL FUNCTION 'CHANGEDOCUMENT_READ'
              EXPORTING
                date_of_change             = '20000101'
                objectclass                = ls_objectcl-objectcl
                objectid                   = lv_objektid
                tablekey                   = lv_tabkey      "VIMI-7380
                tablename                  = lv_tabnam      "VIMI-7380
                time_of_change             = '000000'
                local_time                 = 'X'
*               time_until                 = '000000'  "INS+DEL VIMI-7834 entry not required
              TABLES
                editpos                    = lt_editpos_with_header
              EXCEPTIONS
                no_position_found          = 1
                wrong_access_to_archive    = 2
                time_zone_conversion_error = 3
                OTHERS                     = 4.

            LOOP AT lt_editpos_with_header INTO ls_editpos.
              ls_editpos-tabkey = ls_editpos-tabkey+3(67).  .
              MODIFY lt_editpos_with_header FROM ls_editpos.
*Begin of VIMI-5085
              IF sy-repid = '/OPT/AR_COA'.
                IF ls_objectcl-objectcl = '/OPT/VIM_APPCOA'.
                  IF ls_editpos-fname NE 'MANAGER_ID'.
                    CONTINUE.
                  ENDIF.
                ENDIF.
              ENDIF.
*End of VIMI-5085
              IF ls_editpos-f_old NE ls_editpos-f_new.
                APPEND ls_editpos TO lt_editpos.
              ENDIF.
            ENDLOOP.

*Begin of VIMI-6297, cnicklas, SP9
            CALL FUNCTION 'CHANGEDOCUMENT_READ_HEADERS'
              EXPORTING
                date_of_change             = '20000101'
                objectclass                = ls_objectcl-objectcl
                objectid                   = lv_objektid
                username                   = ' '            "VIMI-18981/snittala
                time_of_change             = '000000'
                local_time                 = 'X'
                time_until                 = '000000'  "INS VIMI-7834
              TABLES
                i_cdhdr                    = lt_cdhdr
              EXCEPTIONS
                no_position_found          = 1
                wrong_access_to_archive    = 2
                time_zone_conversion_error = 3
                OTHERS                     = 4.
            APPEND LINES OF lt_cdhdr TO lt_cdhdr2.
*End of VIMI-6297, cnicklas, SP8
          ENDLOOP.

        WHEN '605'.                                         "EHP5
          LOOP AT lt_objectcl INTO ls_objectcl.
            CLEAR lt_editpos_with_header.
            REFRESH lt_editpos_with_header.
            CALL FUNCTION 'CHANGEDOCUMENT_READ'
              EXPORTING
                date_of_change             = '20000101'
                objectclass                = ls_objectcl-objectcl
                objectid                   = lv_objektid
                tablekey                   = lv_tabkey      "VIMI-7380
                tablename                  = lv_tabnam      "VIMI-7380
                time_of_change             = '000000'
                local_time                 = 'X'
                time_until                 = '000000'  "INS+DEL VIMI-7834
              TABLES
                editpos                    = lt_editpos_with_header
              EXCEPTIONS
                no_position_found          = 1
                wrong_access_to_archive    = 2
                time_zone_conversion_error = 3
                OTHERS                     = 4.

            LOOP AT lt_editpos_with_header INTO ls_editpos.
              ls_editpos-tabkey = ls_editpos-tabkey+3(67).  .
              MODIFY lt_editpos_with_header FROM ls_editpos.
*Begin of VIMI-5085
              IF sy-repid = '/OPT/AR_COA'.
                IF ls_objectcl-objectcl = '/OPT/VIM_APPCOA'.
                  IF ls_editpos-fname NE 'MANAGER_ID'.
                    CONTINUE.
                  ENDIF.
                ENDIF.
              ENDIF.
*End of VIMI-5085
              IF ls_editpos-f_old NE ls_editpos-f_new.
                APPEND ls_editpos TO lt_editpos.
              ENDIF.
            ENDLOOP.

*Begin of VIMI-6297, cnicklas, SP9
            CALL FUNCTION 'CHANGEDOCUMENT_READ_HEADERS'
              EXPORTING
                date_of_change             = '20000101'
                objectclass                = ls_objectcl-objectcl
                objectid                   = lv_objektid
                username                   = ' '            "VIMI-18981/snittala
                time_of_change             = '000000'
                local_time                 = 'X'
                time_until                 = '000000'  "INS VIMI-7834
              TABLES
                i_cdhdr                    = lt_cdhdr
              EXCEPTIONS
                no_position_found          = 1
                wrong_access_to_archive    = 2
                time_zone_conversion_error = 3
                OTHERS                     = 4.
            APPEND LINES OF lt_cdhdr TO lt_cdhdr2.
*End of VIMI-6297, cnicklas, SP8
          ENDLOOP.

        WHEN OTHERS.                    "without EHP
* End Insert VIMI-7834

          LOOP AT lt_objectcl INTO ls_objectcl.
            CLEAR lt_editpos_with_header.
            REFRESH lt_editpos_with_header.
            CALL FUNCTION 'CHANGEDOCUMENT_READ'
              EXPORTING
                date_of_change             = '20000101'
                objectclass                = ls_objectcl-objectcl
                objectid                   = lv_objektid
                tablekey                   = lv_tabkey      "VIMI-7380
                tablename                  = lv_tabnam      "VIMI-7380
                time_of_change             = '000000'
                local_time                 = 'X'
                time_until                 = '000000'
              TABLES
                editpos                    = lt_editpos_with_header
              EXCEPTIONS
                no_position_found          = 1
                wrong_access_to_archive    = 2
                time_zone_conversion_error = 3
                OTHERS                     = 4.

            LOOP AT lt_editpos_with_header INTO ls_editpos.
              ls_editpos-tabkey = ls_editpos-tabkey+3(67).  .
              MODIFY lt_editpos_with_header FROM ls_editpos.
*Begin of VIMI-5085
              IF sy-repid = '/OPT/AR_COA'.
                IF ls_objectcl-objectcl = '/OPT/VIM_APPCOA'.
                  IF ls_editpos-fname NE 'MANAGER_ID'.
                    CONTINUE.
                  ENDIF.
                ENDIF.
              ENDIF.
*End of VIMI-5085
              IF ls_editpos-f_old NE ls_editpos-f_new.
                APPEND ls_editpos TO lt_editpos.
              ENDIF.
            ENDLOOP.

*Begin of VIMI-6297, cnicklas, SP9
            CALL FUNCTION 'CHANGEDOCUMENT_READ_HEADERS'
              EXPORTING
                date_of_change             = '20000101'
                objectclass                = ls_objectcl-objectcl
                objectid                   = lv_objektid
                username                   = ' '            "VIMI-18981/snittala
                time_of_change             = '000000'
                local_time                 = 'X'
                time_until                 = '000000'
              TABLES
                i_cdhdr                    = lt_cdhdr
              EXCEPTIONS
                no_position_found          = 1
                wrong_access_to_archive    = 2
                time_zone_conversion_error = 3
                OTHERS                     = 4.
            APPEND LINES OF lt_cdhdr TO lt_cdhdr2.
*End of VIMI-6297, cnicklas, SP8
          ENDLOOP.

* Start Insert VIMI-7834
      ENDCASE.
* End Insert VIMI-7834
      IF lt_editpos[] IS INITIAL.
        MESSAGE i521(s1).
        EXIT.
      ENDIF.

      lv_applicationid = ls_objectcl-objectcl.
* Begin of VIMI-9049 - Gaddepal
      IF sy-repid = '/OPT/AR_COA'.
        ls_repid = '/OPT/VIM_LBACOA'.
      ELSE.
        ls_repid = '/OPT/VIM_APPCOA'.
      ENDIF.
* End of VIMI-9049 - Gaddepal.
      CALL FUNCTION '/OPT/VIM_BL_CHNG_DIS'
        EXPORTING
*         i_applicationid  = '/OPT/VIM_APPCOA' " VIMI-9049
          i_applicationid  = ls_repid                       " VIMI-9049
          flg_autocondense = 'X'
        TABLES
          i_cdred          = lt_editpos
          i_cdhdr          = lt_cdhdr2.                     "VIMI-6297

*      ENDIF.
    ENDIF.
  ENDIF.
* End of VIM 5.2 SP5 - VIMI-3677 - CNICKLAS
ENDFORM.                    " changedoc_display
*&---------------------------------------------------------------------*
*&      Form  init_150
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM init_150 .
  DATA lt_fieldcat TYPE lvc_t_fcat.
  DATA ls_layout   TYPE lvc_s_layo.
  DATA lt_sort     TYPE lvc_t_sort WITH HEADER LINE.
  DATA l_length    TYPE i.

  DATA: ls_stylerow TYPE lvc_s_styl .

  CHECK g_cgrid IS INITIAL.

  DESCRIBE TABLE gt_auth LINES l_length.

  IF l_length LT 15.
    l_length = 15.
  ENDIF.

  PERFORM initialize_grid USING l_length.

  g_evt_grid->gridname = c_freportview.

  CALL METHOD g_helper->get_fieldcat
    EXPORTING
      i_gridname = c_freportview
    IMPORTING
      t_fcat     = lt_fieldcat.


  ls_layout-grid_title = TEXT-t06.
  ls_layout-cwidth_opt = 'X'.
  ls_layout-stylefname = 'FIELD_STYLE'.

  lt_sort-spos      = 1.
  lt_sort-fieldname = 'USERID'.
  lt_sort-up        = 'X'.
  APPEND lt_sort.


  IF NOT gt_authn IS INITIAL.
    CLEAR: gt_auth[], gs_auth, gs_authn.
    LOOP AT gt_authn INTO gs_authn.
      MOVE-CORRESPONDING gs_authn TO gs_auth.
      IF NOT gs_auth-userid IS INITIAL.
        ls_stylerow-fieldname = 'USERID' .
        ls_stylerow-style = cl_gui_alv_grid=>mc_style_disabled.
        APPEND ls_stylerow TO gs_auth-field_style.
      ENDIF.
      APPEND gs_auth TO gt_auth.
      CLEAR gs_auth.
    ENDLOOP.
  ENDIF.

  CALL METHOD g_grid->set_table_for_first_display
    EXPORTING
      i_save          = 'A'
      is_layout       = ls_layout
    CHANGING
      it_fieldcatalog = lt_fieldcat
      it_sort         = lt_sort[]
      it_outtab       = gt_auth[].

* begin VIMI-13155
  CALL METHOD cl_gui_cfw=>flush
    EXCEPTIONS
      OTHERS = 1.
* end VIMI-13155
  CALL METHOD g_grid->set_ready_for_input
    EXPORTING
      i_ready_for_input = '1'.
ENDFORM.                                                    " init_150
*&---------------------------------------------------------------------*
*&      Form  validate_report_auth_data
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_G_SUBRC  text
*----------------------------------------------------------------------*
FORM validate_report_auth_data  CHANGING p_subrc.
  DATA: lv_bukrs   TYPE bukrs,
        lv_tabix   TYPE sy-tabix,
        lv_logsys  TYPE logsys,
        lv_channel TYPE /opt/channel_id,
        lv_userid  TYPE /ors/umoid.

  IF NOT gt_auth IS INITIAL.
    LOOP AT gt_auth INTO gs_auth.
      lv_tabix = sy-tabix.

*-- User id validation
      IF gs_auth-userid IS INITIAL.
        PERFORM display_grid_message USING TEXT-m16 ' '
                                     'OPT_USERID'
                                     '00' ' '.
        p_subrc = 4.
      ELSE.
        SELECT SINGLE opt_userid INTO lv_userid
            FROM /ors/usermap
            WHERE opt_userid = gs_auth-userid
              AND deleted    EQ space
              AND user_type IN ('R','B').
        IF sy-subrc NE 0.
          p_subrc = 4.
          PERFORM display_grid_message USING ' ' lv_tabix
                                     'OPT_USERID'
                                     '52' gs_auth-userid.
        ENDIF.
      ENDIF.

*-- System validation
      IF gs_auth-logsys IS INITIAL.
        PERFORM display_grid_message USING TEXT-m14 ' '
                                     'LOGSYS'
                                     '00' ' '.
        p_subrc = 4.
      ELSEIF NOT gs_auth-logsys EQ '*'.
*-- Only '*' or valid value is allowed
        SELECT SINGLE logsys INTO lv_logsys FROM tbdls
            WHERE logsys = gs_auth-logsys.
        IF NOT sy-subrc EQ 0.
          p_subrc = 4.
          PERFORM display_grid_message USING ' ' lv_tabix
                                     'LOGSYS'
                                     '52' gs_auth-logsys.
        ENDIF.
      ENDIF.

*-- Channel Validation
      IF gs_auth-channel IS INITIAL.
        PERFORM display_grid_message USING TEXT-m15 ' '
                                     'CHANNEL'
                                     '00' ' '.
        p_subrc = 4.
      ELSEIF NOT gs_auth-channel EQ '*'.
*-- Only '*' or valid value is allowed
        SELECT SINGLE channel_id INTO lv_channel
            FROM /opt/vim_chnl
            WHERE channel_id = gs_auth-channel.
        IF NOT sy-subrc EQ 0.
          p_subrc = 4.
          PERFORM display_grid_message USING ' ' lv_tabix
                                     'CHANNEL'
                                     '52' gs_auth-channel.
        ENDIF.
      ENDIF.

*-- Company code validation
      IF gs_auth-bukrs IS INITIAL.
        PERFORM display_grid_message USING TEXT-m13 ' '
                                     'BUKRS'
                                     '00' ' '.
        p_subrc = 4.
      ELSEIF NOT gs_auth-bukrs EQ '*'.
*-- Only '*' or valid value is allowed
*       Begin of VIMI-16997/STAMADA
*        SELECT SINGLE bukrs INTO lv_bukrs FROM t001
*            WHERE bukrs = gs_auth-bukrs.
        READ TABLE git_t001 TRANSPORTING NO FIELDS WITH KEY bukrs = gs_auth-bukrs.
*       End of VIMI-16997/STAMADA
        IF NOT sy-subrc EQ 0.
          p_subrc = 4.
          PERFORM display_grid_message USING ' ' lv_tabix
                                     'BUKRS'
                                     '52' gs_auth-bukrs.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDIF.
  CHECK p_subrc GT 0.
  CALL METHOD g_protocol->display_protocol( ).
ENDFORM.                    " validate_report_auth_data
* Start of INS VIMI-7380
*&---------------------------------------------------------------------*
*&      Form  INIT_300
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM init_300 .

  DATA lt_fieldcat TYPE lvc_t_fcat.
  DATA ls_layout   TYPE lvc_s_layo.
  DATA lt_sort     TYPE lvc_t_sort WITH HEADER LINE.
  DATA l_row       TYPE lvc_s_roid.
  DATA l_length    TYPE i.
  DATA: lt_celltab TYPE lvc_t_styl,
        lv_index   TYPE sy-tabix.
* Begin of VIMI-2650 - 5.2 HF6 -cnicklas
  DATA ls_variant  TYPE disvariant.
* Begin of VIMI-2650 - 5.2 HF6 -cnicklas
  CHECK g_cgrid IS INITIAL.

  DESCRIBE TABLE gt_level LINES l_length.
  IF l_length LT 15.
    l_length = 15.
  ENDIF.
  PERFORM initialize_grid USING l_length.

  g_evt_grid->gridname = c_applevel.

  CALL METHOD g_helper->get_fieldcat
    EXPORTING
      i_gridname = c_applevel
    IMPORTING
      t_fcat     = lt_fieldcat.

  IF g_edit = 'X'.
    LOOP AT gt_level1.
      lv_index = sy-tabix.
      CLEAR: lt_celltab,
             gt_level1-celltab.
      REFRESH: lt_celltab,
               gt_level1-celltab.

      IF NOT gt_level1-bukrs IS INITIAL.
        PERFORM fill_celltab USING 'H'
                                   'BUKRS'
                          CHANGING lt_celltab.

*      ENDIF.                                              "VIMI-9049

*      IF NOT gt_level1-appr_level IS INITIAL.             "VIMI-9049
        PERFORM fill_celltab USING 'H'
                                   'DESCR'
                          CHANGING lt_celltab.

        PERFORM fill_celltab USING 'H'
                                   'EXTXT'
                          CHANGING lt_celltab.
      ENDIF.

      IF gt_level1-appr_level = '0'." OR                      " VIMI-9049
*         gt_level1-appr_level = '1'.                        " VIMI-9049

        READ TABLE gt_values_h INTO gs_values_h WITH KEY
                                      domvalue_l = 'H'.
        IF sy-subrc = 0.
          CONCATENATE gs_values_h-domvalue_l
                      '-'
                      gs_values_h-ddtext
                 INTO gt_level1-btext.
        ENDIF.

        CLEAR gt_level1-add_pack_limit.

        PERFORM fill_celltab USING 'H'
                                'BTEXT'
                       CHANGING lt_celltab.
        PERFORM fill_celltab USING 'H'
                                   'ADD_PACK_LIMIT'
                          CHANGING lt_celltab.

      ELSE.
        IF gt_level1-btext+0(1) = 'H'.
          PERFORM fill_celltab USING 'H'
                                     'ADD_PACK_LIMIT'
                            CHANGING lt_celltab.
          CLEAR gt_level1-add_pack_limit.
        ELSE.
          PERFORM fill_celltab USING 'D'
                                     'ADD_PACK_LIMIT'
                            CHANGING lt_celltab.
        ENDIF.
      ENDIF.

      INSERT LINES OF lt_celltab INTO TABLE gt_level1-celltab.
      MODIFY gt_level1 INDEX lv_index.
    ENDLOOP.
  ELSE.
    LOOP AT gt_level1.
      lv_index = sy-tabix.
      CLEAR: lt_celltab,
             gt_level1-celltab.
      REFRESH: lt_celltab,
               gt_level1-celltab.

      MODIFY gt_level1 INDEX lv_index.
    ENDLOOP.
  ENDIF.

  lt_sort-spos      = 1.
  lt_sort-fieldname = 'BUKRS'.
  lt_sort-up        = 'X'.
  APPEND lt_sort.
  lt_sort-spos      = 2.
  lt_sort-fieldname = 'EXPENSE_TYPE'.
  lt_sort-up        = 'X'.
  APPEND lt_sort.
  lt_sort-spos      = 3.
  lt_sort-fieldname = 'APPR_LEVEL'.
  lt_sort-up        = 'X'.
  APPEND lt_sort.

  ls_layout-grid_title = TEXT-t07.
*  ls_layout-cwidth_opt = 'X'. " vimi-9049
  ls_layout-stylefname = 'CELLTAB'.

  ls_variant-report = sy-repid.
  ls_variant-handle = sy-dynnr.

  CALL METHOD g_grid->set_table_for_first_display
    EXPORTING
      i_save          = 'A'
      is_variant      = ls_variant "VIMI-2650 - 5.2 HF6 -cnicklas
      is_layout       = ls_layout
    CHANGING
      it_fieldcatalog = lt_fieldcat
      it_sort         = lt_sort[]
      it_outtab       = gt_level1[]
      it_filter       = gt_filter[].                        "VIMI-16582.

*  IF g_edit = 'X'.
* begin VIMI-13155
  CALL METHOD cl_gui_cfw=>flush
    EXCEPTIONS
      OTHERS = 1.
* end VIMI-13155
  CALL METHOD g_grid->set_ready_for_input
    EXPORTING
      i_ready_for_input = 1.
*  ENDIF.

ENDFORM.                                                    " INIT_300
*&---------------------------------------------------------------------*
*&      Form  VALIDATE_NCOA_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM validate_ncoa_data  CHANGING p_subrc.
  TYPES: BEGIN OF lty_userid,
           userid TYPE /ors/umoid,
         END OF lty_userid.

  DATA: lv_bukrs         TYPE bukrs,
        lv_extyp         TYPE /ors/expense,
        lv_tabix         TYPE sy-tabix,
        lv_cnt           TYPE i,
        lv_flg           TYPE i,
        lv_text          TYPE char100,
        lwa_ncoa         TYPE /opt/appr_coa,
        lt_ncoa          TYPE TABLE OF /opt/appr_coa,
* Start of INS VIMI-8758
        lt_dup           TYPE TABLE OF /opt/appr_coa,
        lwa_dup          TYPE /opt/appr_coa,
        lwa_dup1         TYPE /opt/appr_coa,
        lt_coatemp       TYPE TABLE OF ty_ncoa,
        lv_msg           TYPE char100,
        lwa_fcat         TYPE lvc_s_fcat,
* End of INS VIMI-8758
        lt_sort          TYPE TABLE OF abap_sortorder,
        lwa_sort         TYPE abap_sortorder,
        lv_warn          TYPE c,                     "VIMI-18019/snittala
        lv_exit          TYPE char1,
        lt_user          TYPE TABLE OF lty_userid,
        lwa_user         TYPE lty_userid,
        lv_acnt          TYPE i,                                    " VIMI-8797
        lv_index         TYPE sy-tabix,                             "VIMI-9049
        lv_index1        TYPE sy-tabix,
        lv_index_counter TYPE sy-tabix. " VIMI-16148
* Begin of VIMI-16997/STAMADA
  DATA:lt_dupc1     TYPE TABLE OF /opt/appr_coa WITH HEADER LINE,
       lwa_dupc1    TYPE /opt/appr_coa,
       l_dupc       TYPE c,
       lv_ncoalines TYPE sy-tabix,
       lv_duplines  TYPE sy-tabix.
  CLEAR: l_dupc,lv_ncoalines,lv_duplines,lt_dupc1,lwa_dupc1.
* End of VIMI-16997/STAMADA
  IF NOT g_protocol IS INITIAL.
    CALL METHOD g_protocol->free( ).
    CLEAR g_protocol.
  ENDIF.

* Begin of VIMI-8797
*  lwa_sort-name = 'BUKRS'.
*  APPEND lwa_sort TO lt_sort.
*  CLEAR lwa_sort.
*
*  lwa_sort-name = 'APPR_LEVEL'.
*  APPEND lwa_sort TO lt_sort.
*  CLEAR lwa_sort.
*
*  lwa_sort-name = 'OPT_USERID'.
*  APPEND lwa_sort TO lt_sort.
*  CLEAR lwa_sort.
*
*  LOOP AT gt_401 WHERE header IS INITIAL.
*    lwa_sort-name = gt_401-fieldname.
*    APPEND lwa_sort TO lt_sort.
*    CLEAR lwa_sort.
*  ENDLOOP.
*  SORT gt_ncoa BY (lt_sort).

* Start of INS VIMI-9049
* Check if Coder/Requester COA tab contains any wrong approval levels
  CLEAR: lv_tabix,
         lv_index1.

  SORT: gt_ncoa2 BY mandt comp_code appr_level opt_userid counter, "VIMI-9049
        gt_ncoa3 BY mandt comp_code appr_level opt_userid counter. "VIMI-9049

  LOOP AT gt_ncoa2 WHERE appr_level GE 2.
    lv_tabix = sy-tabix.
    p_subrc = 4.
    EXIT.
  ENDLOOP.

  IF p_subrc = 4.
    CLEAR g_tab_desc.                                       " VIMI-9049
    g_tab_desc = TEXT-t34.
    PERFORM display_grid_message USING TEXT-t29
                                       lv_tabix
                                       c_fcodcoa
                                       '00'
                                       ''.
    IF sy-repid NE '/OPT/COA_UPLOAD_REPORT'.                "VIMI-10151
      CALL METHOD g_protocol->display_protocol( ). " VIMI-9049
      EXIT.
    ENDIF.                                                  "VIMI-10151
    " VIMI-9049
  ENDIF.

* Check if Approvers COA tab contains any wrong approval levels
  CLEAR lv_tabix.
  LOOP AT gt_ncoa3 WHERE appr_level LT 2.
    lv_tabix = sy-tabix.
    p_subrc = 4.
    EXIT.
  ENDLOOP.

  IF p_subrc = 4.
    CLEAR g_tab_desc.
    g_tab_desc = TEXT-t02.
    PERFORM display_grid_message USING TEXT-t30
                                       lv_tabix
                                       c_fapprcoa
                                       '00'
                                       ''.
    IF sy-repid NE '/OPT/COA_UPLOAD_REPORT'.                "VIMI-10151
      CALL METHOD g_protocol->display_protocol( ). " VIMI-9049
      EXIT.
    ENDIF.                                                  "VIMI-10151

  ENDIF.                                                    " VIMI-9049


* End of INS VIMI-9049
  gt_ncoa1-mandt = sy-mandt.
  MODIFY gt_ncoa1 FROM gt_ncoa1 TRANSPORTING mandt WHERE mandt IS INITIAL.
  CLEAR: gt_ncoa1-mandt.
  SORT: gt_ncoa,gt_ncoa1. " gt_ncoa2, gt_ncoa3.
  CLEAR: gt_ncoa2, gt_ncoa3.
* End of VIMI-8797
* Begin of VIMI-9049 - Gaddepal
*  LOOP AT gt_ncoa WHERE mandt IS INITIAL.
*    gt_ncoa-mandt = sy-mandt.
*    CLEAR gt_ncoa-counter.
*    MODIFY gt_ncoa INDEX sy-tabix TRANSPORTING mandt.
*    CLEAR gt_ncoa.
*  ENDLOOP.
*  CLEAR gt_ncoa-counter.
*  MODIFY gt_ncoa TRANSPORTING counter WHERE counter >= 0.
* End of VIMI-9049 - Gaddepal.
  lt_coatemp = gt_ncoa1[].
** Begin of VIMI-16997/STAMADA
** To check weather Duplicate records exist or not
  lt_dupc1[] = gt_ncoa[].
*  SORT lt_dupc1.           "VIMI-18308/snittala
  MODIFY lt_dupc1 TRANSPORTING counter WHERE counter IS NOT INITIAL.
  lv_ncoalines = sy-tfill.
  SORT lt_dupc1.           "VIMI-18308/snittala
  DELETE ADJACENT DUPLICATES FROM lt_dupc1 COMPARING ALL FIELDS.
  DESCRIBE TABLE lt_dupc1 LINES lv_duplines.
  IF lv_ncoalines NE lv_duplines.
    l_dupc = 'X'.
  ENDIF.

  CLEAR: lv_ncoalines,lv_duplines,lt_dupc1,lwa_dupc1.
  SORT gt_usermap_unfiltered BY opt_userid.
* End of VIMI-16997/STAMADA

* Begin of VIMI-22104-V1
  IF gt_ncoa_del_rec[] IS NOT INITIAL.
    DELETE gt_ncoa_del_rec WHERE counter IS INITIAL.
    SORT gt_ncoa_del_rec.
  ENDIF.
* End of VIMI-22104-V1

  LOOP AT gt_ncoa.

    lv_tabix = sy-tabix.

    CLEAR: lv_index_counter.                                "VIMI-16148

* Begin of VIMI-9049
    CLEAR: lv_index1,
           g_tabname,
           g_tab_desc.
    IF gt_ncoa-appr_level = '0' OR
       gt_ncoa-appr_level = '1'.
      READ TABLE gt_ncoa2
        WITH KEY mandt      = sy-mandt
                 comp_code  = gt_ncoa-comp_code
                 appr_level = gt_ncoa-appr_level
                 opt_userid = gt_ncoa-opt_userid
                 counter    = gt_ncoa-counter
        BINARY SEARCH .
* begin VIMI-8064
      IF sy-subrc <> 0.
        READ TABLE gt_ncoa2
          WITH KEY mandt      = '   '
                   comp_code  = gt_ncoa-comp_code
                   appr_level = gt_ncoa-appr_level
                   opt_userid = gt_ncoa-opt_userid
                   counter    = gt_ncoa-counter
          BINARY SEARCH .
      ENDIF.
* end VIMI-8064
      IF sy-subrc EQ 0.
        lv_index1 = sy-tabix.
        g_tabname  = c_fcodcoa.
        g_tab_desc = TEXT-t34.
* begin VIMI-8064
        lv_index_counter = gt_ncoa2-line_no.                "VIMI-16148
      ELSE.
        READ TABLE gt_ncoa_filtered
          WITH KEY comp_code  = gt_ncoa-comp_code
                   appr_level = gt_ncoa-appr_level
                   opt_userid = gt_ncoa-opt_userid
                   counter    = gt_ncoa-counter
          BINARY SEARCH.
        IF sy-subrc = 0.
          lv_index1 = 99999.
          g_tabname = c_fcodcoa.
          g_tab_desc = TEXT-t34.
        ENDIF.
* end VIMI-8064
      ENDIF.
    ELSE.
      READ TABLE gt_ncoa3
        WITH KEY mandt      = sy-mandt
                 comp_code  = gt_ncoa-comp_code
                 appr_level = gt_ncoa-appr_level
                 opt_userid = gt_ncoa-opt_userid
                 counter    = gt_ncoa-counter
        BINARY SEARCH.
* begin VIMI-8064
      IF sy-subrc <> 0.
        READ TABLE gt_ncoa3
          WITH KEY mandt      = '   '
                   comp_code  = gt_ncoa-comp_code
                   appr_level = gt_ncoa-appr_level
                   opt_userid = gt_ncoa-opt_userid
                   counter    = gt_ncoa-counter
          BINARY SEARCH .
      ENDIF.
* end VIMI-8064
      IF sy-subrc EQ 0.
        lv_index1 = sy-tabix.
        g_tabname = c_fapprcoa.
        g_tab_desc = TEXT-t02.
* begin VIMI-8064
        lv_index_counter = gt_ncoa3-line_no.                "VIMI-16148
      ELSE.
        READ TABLE gt_ncoa_filtered
          WITH KEY comp_code  = gt_ncoa-comp_code
                   appr_level = gt_ncoa-appr_level
                   opt_userid = gt_ncoa-opt_userid
                   counter    = gt_ncoa-counter
          BINARY SEARCH.
        IF sy-subrc = 0.
          lv_index1 = 99999.
          g_tabname = c_fcodcoa.
          g_tab_desc = TEXT-t02.
        ENDIF.
* end VIMI-8064
      ENDIF.
    ENDIF.
* End of VIMI-9049

    AT NEW appr_level.
      CLEAR: "lv_cnt,                  "VIMI-22104-V1
             lv_flg,
             lt_ncoa,
             lt_user.
    ENDAT.

* Begin of VIMI-8797
    AT NEW opt_userid.
      CLEAR: lv_acnt,
             lv_cnt.                 "VIMI-22104-V1
    ENDAT.
* End of VIMI-8797

* Start of INS VIMI-8758
    IF l_dupc IS NOT INITIAL.   "VIMI-16997/STAMADA
*********************************************************************
* Duplicate check
*********************************************************************
*      CLEAR gt_ncoa-counter.                    "VIMI-9049 "VIMI-22104
      MOVE-CORRESPONDING gt_ncoa TO lwa_dup.
      CLEAR: lwa_dup-counter.
*           lwa_dup-default_flag.                          "VIMI-9049
      READ TABLE lt_dup INTO lwa_dup1 FROM lwa_dup.
      IF sy-subrc = 0.
********************VIMI-10151**********************
        IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
          l_tab = 'COA'.
          ls_error_mgs-bukrs      = gt_ncoa-comp_code.
          ls_error_mgs-appr_level = gt_ncoa-appr_level.
          ls_error_mgs-expense_type = gt_ncoa-expense_type. "VIMI-18191/snittala
          PERFORM capture_messages USING TEXT-t28 l_tab gt_ncoa-opt_userid.
          CLEAR p_subrc.
          CONTINUE.
        ELSE.
********************VIMI-10151**********************
* End of VIMI-9049 - Gaddepal
* Begin of VIMI-18019/snittala
* do not allow duplicates in the system with different counter values
          IF lv_show_warn IS INITIAL.
            PERFORM display_grid_message USING gt_ncoa-opt_userid
                                         lv_index_counter
                                         g_tabname
                                         '92'
                                         gt_ncoa-appr_level.
            p_subrc = 4.
            EXIT.
          ELSE.
* ignore all the duplicate records and issue warning message
            lv_warn   = 'X'.
            PERFORM disp_dup_warn USING gt_ncoa-opt_userid
                                        gt_ncoa-comp_code
                                        gt_ncoa-appr_level
                                        gt_ncoa-expense_type.

            DELETE gt_ncoa INDEX lv_tabix.
            DELETE gt_ncoa1 INDEX lv_tabix.
            CONTINUE.
          ENDIF.
* End of VIMI-18019/snittala
        ENDIF.
      ELSE.
        APPEND lwa_dup TO lt_dup.
      ENDIF.
* End of INS VIMI-8758
    ENDIF.                            "VIMI-16997/STAMADA


**********************************************************************
* Validate company code
**********************************************************************
    CLEAR lv_index.
*    PERFORM get_index USING lv_tabix
*                   CHANGING lv_index.
    PERFORM check_comp_code USING gt_ncoa-comp_code
                                  "lv_index1 "VIMI-16148
                                  lv_index_counter          "VIMI-16148
                         CHANGING p_subrc.
    IF NOT p_subrc IS INITIAL.
      IF sy-repid NE '/OPT/COA_UPLOAD_REPORT'.              "VIMI-10151
        EXIT.
      ELSE.
        CLEAR p_subrc.
* Records that are in error need to be eliminated as they need not
* go for change logs
        DELETE gt_ncoa INDEX lv_tabix.            "VIMI-18001/snittala
        DELETE gt_ncoa1 INDEX lv_tabix.            "VIMI-18001/snittala
        CONTINUE.
      ENDIF.                                                "VIMI-10151
    ENDIF.

* VIMI-16148 only check authorized cc
    IF gt_authorized_cc IS NOT INITIAL.
      READ TABLE gt_authorized_cc TRANSPORTING NO FIELDS WITH KEY bukrs = gt_ncoa-comp_code.
      IF sy-subrc <> 0.
        DELETE gt_ncoa INDEX lv_tabix.            "VIMI-18001/snittala
        DELETE gt_ncoa1 INDEX lv_tabix.            "VIMI-18001/snittala
        CONTINUE.
      ENDIF.
    ENDIF.
* end of VIMI-16148


**********************************************************************
* Validate approval level.
**********************************************************************
    PERFORM check_appr_level USING gt_ncoa-appr_level
                                   'COA'
                                   "lv_index1 "VIMI-16148
                                    lv_index_counter        "VIMI-16148
                                   'X'
                          CHANGING p_subrc.
    IF NOT p_subrc IS INITIAL.
      IF sy-repid NE '/OPT/COA_UPLOAD_REPORT'.              "VIMI-10151
        EXIT.
      ELSE.
        CLEAR p_subrc.
        DELETE gt_ncoa INDEX lv_tabix.            "VIMI-18001/snittala
        DELETE gt_ncoa1 INDEX lv_tabix.            "VIMI-18001/snittala
        CONTINUE.
      ENDIF.                                                "VIMI-10151
    ENDIF.

**********************************************************************
* Validate user ID
**********************************************************************
    PERFORM check_useid USING gt_ncoa-opt_userid
*                              lv_index1                    "VIMI-16148
                                    lv_index_counter        "VIMI-16148
                          CHANGING p_subrc.
    IF NOT p_subrc IS INITIAL.
      IF sy-repid NE '/OPT/COA_UPLOAD_REPORT'.              "VIMI-10151
        EXIT.
      ELSE.
        CLEAR p_subrc.
        DELETE gt_ncoa INDEX lv_tabix.            "VIMI-18001/snittala
        DELETE gt_ncoa1 INDEX lv_tabix.            "VIMI-18001/snittala
        CONTINUE.
      ENDIF.                                                "VIMI-10151
    ENDIF.
* Validate if user is acoder.
*    IF gt_ncoa-appr_level = 'C'.
*      PERFORM check_coder USING gt_ncoa-opt_userid
*                                lv_tabix
*                       CHANGING p_subrc.
*    ENDIF.

**********************************************************************
* Validate Cost Element.
**********************************************************************
*    IF ( gt_ncoa-appr_level = 'C' OR "VIMI-9049
*    IF ( gt_ncoa-appr_level = '0' OR                        "VIMI-9049
*         gt_ncoa-appr_level = '1').
*    ELSE.
    PERFORM check_cost_elem USING gt_ncoa
*                                  lv_index1                 "VIMI-16148
                                  lv_index_counter          "VIMI-16148
                          CHANGING p_subrc.
    IF NOT p_subrc IS INITIAL.
      IF sy-repid NE '/OPT/COA_UPLOAD_REPORT'.              "VIMI-10151
        EXIT.
      ELSE.
        CLEAR p_subrc.
        DELETE gt_ncoa INDEX lv_tabix.            "VIMI-18001/snittala
        DELETE gt_ncoa1 INDEX lv_tabix.            "VIMI-18001/snittala
        CONTINUE.
      ENDIF.                                                "VIMI-10151
    ENDIF.
*    ENDIF.


**********************************************************************
* set counter
**********************************************************************
    lv_cnt = lv_cnt + 1.
*    lv_acnt = lv_acnt + 1.               "VIMI-8797         "VIMI-22104
* Begin of VIMI-18588/snittala
* When lv_acnt reaches 99999 we need to trigger error.
    IF lv_acnt > 99999 AND sy-repid = '/OPT/AR_COA'.
      p_subrc = 4.
      PERFORM display_grid_message USING gt_ncoa-opt_userid
                                       lv_index_counter
                                       g_tabname
                                       '125'
                                       gt_ncoa-appr_level.
      EXIT.
    ENDIF.
* End of VIMI-18588/snittala
* Begin of VIMI-8797
*    IF gt_ncoa-default_flag = 'X'.
*      lv_flg = lv_flg + 1.
*    ENDIF.
* End of VIMI-8797
* Start of DEL VIMI-9049
*    IF lv_cnt GT 1.
*      PERFORM get_counter_deflg TABLES lt_ncoa
*                                 USING gt_ncoa
*                              CHANGING lv_cnt
*                                       lv_flg
*                                       lv_exit.
*    ENDIF.
*
*    IF NOT lv_exit IS INITIAL.
*      p_subrc = 4.
*
*      CLEAR lv_text.
*      lv_text = text-t11.
*      REPLACE FIRST OCCURRENCE OF '&' IN lv_text WITH gt_ncoa-appr_level.
*      REPLACE '&' WITH gt_ncoa-comp_code INTO lv_text.
*
*      PERFORM display_grid_message USING lv_text
*                                         ' '
*                                         'DEFAULT_FLAG'
*                                         '00'
*                                         ' '.
*      EXIT.
*    ENDIF.
* End of DEL VIMI-9049
    CLEAR lwa_ncoa.
    MOVE-CORRESPONDING gt_ncoa TO lwa_ncoa.
    CLEAR: lwa_ncoa-counter,
           lwa_ncoa-opt_userid.
*    CLEAR: lwa_ncoa-default_flag.                         "VIMI-9049
    APPEND lwa_ncoa TO lt_ncoa.

* If multiple default flags are checked throw error message
*    IF lv_flg GT 1.
*      p_subrc = 4.
*      CLEAR lv_text.
*      lv_text = text-t14.
*      REPLACE FIRST OCCURRENCE OF '&' IN lv_text WITH gt_ncoa-appr_level.
*      REPLACE '&' WITH gt_ncoa-comp_code INTO lv_text.
*
*      PERFORM display_grid_message USING lv_text
*                                         ' '
*                                         'DEFAULT_FLAG'
*                                         '00'
*                                         ' '.
*      EXIT.
*    ENDIF.

* Begin of VIMI-8797
*    AT END OF appr_level.
*      IF lv_cnt GT 1 AND
*         lv_flg IS INITIAL.
*        p_subrc = 4.
*
*        CLEAR lv_text.
*        lv_text = text-t11.
*        REPLACE FIRST OCCURRENCE OF '&' IN lv_text WITH gt_ncoa-appr_level.
*        REPLACE '&' WITH gt_ncoa-comp_code INTO lv_text.
*
*        PERFORM display_grid_message USING lv_text
*                                           ' '
*                                           'DEFAULT_FLAG'
*                                           '00'
*                                           ' '.
*        EXIT.
*      ENDIF.
*    ENDAT.
* End of VIMI-8797
* Start of INS VIMI-8758
*    READ TABLE lt_user INTO lwa_user WITH KEY userid = gt_ncoa-opt_userid.
*    IF sy-subrc NE 0.
*      lwa_user-userid = gt_ncoa-opt_userid.
*      APPEND lwa_user TO lt_user.
*      CLEAR lwa_user.
*    ELSE.
*      lv_cnt = lv_cnt + 1.
*    ENDIF.
* End of INS VIMI-8758
*    gt_ncoa-counter = lv_cnt. "VIMI-8797

* Begin of VIMI-22104
    IF gt_ncoa-counter IS INITIAL.
      IF lv_acnt IS INITIAL.
        SELECT MAX( counter ) FROM /opt/appr_coa INTO gt_ncoa-counter
          WHERE comp_code   = gt_ncoa-comp_code
          AND   appr_level  = gt_ncoa-appr_level
          AND   opt_userid = gt_ncoa-opt_userid.
        lv_acnt = gt_ncoa-counter = gt_ncoa-counter + 1.
      ELSE.
        lv_acnt = gt_ncoa-counter =   lv_acnt + 1.
      ENDIF.
    ENDIF.

    IF gt_ncoa_del_rec[] IS NOT INITIAL.
      READ TABLE gt_ncoa_del_rec WITH KEY comp_code  = gt_ncoa-comp_code
                                         appr_level = gt_ncoa-appr_level
                                         opt_userid = gt_ncoa-opt_userid
                                         BINARY SEARCH.
      IF sy-subrc IS INITIAL AND gt_ncoa-counter GT gt_ncoa_del_rec-counter.
        gt_ncoa-counter = lv_cnt.
      ENDIF.
    ENDIF.
* gt_ncoa-counter = lv_acnt.                              "VIMI-8797
* End of VIMI-22104
    MODIFY gt_ncoa INDEX lv_tabix TRANSPORTING counter.

    READ TABLE gt_ncoa1 INDEX lv_tabix.
    IF sy-subrc = 0.
      MOVE-CORRESPONDING gt_ncoa TO gt_ncoa1.
      MODIFY gt_ncoa1 INDEX lv_tabix.
      CLEAR gt_ncoa1.
    ENDIF.
    CLEAR gt_ncoa.
  ENDLOOP.
  CLEAR: g_tabname,
         g_tab_desc.

  REFRESH:gt_ncoa_mod_rec[].                                "VIMI-22104
* Start of INS VIMI-8758
  IF p_subrc NE 0.
    CLEAR gt_ncoa1.
    REFRESH gt_ncoa1.
    gt_ncoa1[] = lt_coatemp.
  ENDIF.
* End of INS VIMI-8758
*Begin of VIMI-18019/snittala
  IF NOT lv_warn IS INITIAL.
    CALL METHOD g_protocol->display_protocol( ).
  ENDIF.
*End of VIMI-18019/snittala
********************VIMI-10151**********************
  IF sy-repid NE '/OPT/COA_UPLOAD_REPORT'.
    CHECK p_subrc GT 0.
    CALL METHOD g_protocol->display_protocol( ).
  ENDIF.
********************VIMI-10151**********************

ENDFORM.                    " VALIDATE_NCOA_DATA
*&---------------------------------------------------------------------*
*&      Form  VALIDATE_LEVEL_DATE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM validate_level_data  CHANGING p_subrc.

  DATA: lt_level     TYPE TABLE OF /opt/appr_limit,
        lwa_level    TYPE /opt/appr_limit,
        lv_alevel    TYPE /opt/a_appr_level_de,
        lv_tabix     TYPE sy-tabix,
*        lv_cnt    TYPE char2,                              "VIMI-10283
        lv_cnt       TYPE i,                                   "VIMI-10283
*       lv_amt    TYPE wrbtr,                              "VIMI-25648/bsreenat
        lv_amt       TYPE bapiwrbtr,                              "VIMI-25648/bsreenat
        lv_text      TYPE char100,
        lt_templevel TYPE TABLE OF ty_level,                "VIMI-8758
        lt_duplevel  TYPE TABLE OF ty_level,                "VIMI-9049,
        wa_duplevel  TYPE ty_level,                         "VIMI-9049
        lwa_fcat     TYPE lvc_s_fcat.



  IF NOT g_protocol IS INITIAL.
    CALL METHOD g_protocol->free( ).
    CLEAR g_protocol.
  ENDIF.

  lt_templevel[] = gt_level1[].                             "VIMI-8758
  lt_level[] = gt_level[].

  SORT gt_level BY bukrs expense_type appr_level.
*      Begin of VIMI-16997/STAMADA
  IF gt_level IS NOT INITIAL.
    SELECT * FROM /ors/expense_typ
             INTO TABLE git_expense_typ.

  ENDIF.
*      End of VIMI-16997/STAMADA

  CLEAR: lt_duplevel.
  CLEAR: g_tabname,
         g_tab_desc.
  g_tabname = c_applevel.
  g_tab_desc = TEXT-t07.

  LOOP AT gt_level.

    MOVE sy-tabix TO lv_tabix.
    MOVE sy-tabix TO lv_index.
    AT NEW bukrs.
*Validate Comapny Code
      PERFORM check_comp_code USING gt_level-bukrs
                                    lv_tabix
                           CHANGING p_subrc.
      IF NOT p_subrc IS INITIAL.
* Start of INS VIMI-10151
        IF sy-repid EQ '/OPT/COA_UPLOAD_REPORT'.
          l_tab = 'APL'.
          MOVE-CORRESPONDING gt_level TO ls_error_mgs.
          PERFORM capture_messages USING l_text  l_tab  gt_ncoa-opt_userid.
          CLEAR p_subrc.
          CONTINUE.
        ELSE.
          EXIT.
        ENDIF.
* End of INS VIMI-10151
      ENDIF.

      CLEAR: lv_cnt,
             lv_amt,                                        "VIMI-9049
             lv_alevel.

      lv_cnt = 0.
    ENDAT.

    AT NEW expense_type.
      CLEAR lv_alevel.
    ENDAT.
* Validate approval level.
    PERFORM check_appr_level USING gt_level-appr_level
                                   ''
                                   lv_tabix
*                                   lv_cnt                 "VIMI-10283
                                   ''                       "VIMI-10283
                          CHANGING p_subrc.
    IF NOT p_subrc IS INITIAL.
* Start of INS VIMI-10151.
*      EXIT.
      IF sy-repid EQ '/OPT/COA_UPLOAD_REPORT'.
        l_tab = 'APL'.
        MOVE-CORRESPONDING gt_level TO ls_error_mgs.
        PERFORM capture_messages USING l_text  l_tab  gt_ncoa-opt_userid.
        CLEAR p_subrc.
        CONTINUE.
      ELSE.
        EXIT.
      ENDIF.
* End of INS VIMI-10151.
    ENDIF.
* Validate approval level numbers.
*    IF NOT lv_alevel IS INITIAL.
    PERFORM check_appr_level_num USING gt_level-appr_level
                                       lv_alevel
                                       gt_level-bukrs
                                       lv_tabix
                              CHANGING p_subrc.

*    ENDIF.
    lv_alevel = lv_alevel + 1.
    IF NOT p_subrc IS INITIAL.
*      EXIT.
      IF sy-repid NE '/OPT/COA_UPLOAD_REPORT'.
        EXIT.
      ENDIF.
    ENDIF.

*    lv_alevel = gt_level-appr_level.
* Check for duplicate entry
    READ TABLE lt_duplevel INTO wa_duplevel WITH KEY bukrs        = gt_level-bukrs
                                                     appr_level   = gt_level-appr_level
                                                     expense_type = gt_level-expense_type.
    IF sy-subrc = 0.
      p_subrc = 4.

      CLEAR lv_text.
* Begin of VIMI-9049 - Gaddepal
*      READ TABLE gt_fcat INTO lwa_fcat INDEX 1.
*      CONCATENATE lwa_fcat-scrtext_s
*                  gt_level-bukrs
*                  ','
*             INTO lv_text
*        SEPARATED BY space.
*
*      READ TABLE gt_fcat INTO lwa_fcat INDEX 2.
*      CONCATENATE lv_text
*                  lwa_fcat-scrtext_s
*                  gt_level-appr_level
*                  ','
*             INTO lv_text
*        SEPARATED BY space.
* End of VIMI-9049 - Gaddepal
      PERFORM display_grid_message USING TEXT-t25
                                         lv_tabix
                                         g_tabname "'APPR_LEVEL'
                                         '55'
                                         ''.

********************VIMI-10151**********************
      IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
        l_tab = 'APL'.
*        DELETE gt_level INDEX lv_tabix.
        MOVE-CORRESPONDING gt_level TO ls_error_mgs.
        PERFORM capture_messages USING TEXT-t25  l_tab  gt_ncoa-opt_userid.
        CLEAR p_subrc.
        CONTINUE.
      ELSE.
        EXIT.
      ENDIF.
********************VIMI-10151**********************
*      EXIT.   "VIMI-10151.
    ELSE.
      MOVE-CORRESPONDING gt_level TO wa_duplevel.
      APPEND wa_duplevel TO lt_duplevel.
    ENDIF.
* Validate Expense Type
    PERFORM check_exp_type USING gt_level-expense_type
                                 lv_tabix
                       CHANGING p_subrc.
    IF NOT p_subrc IS INITIAL.
*      EXIT.
      IF sy-repid NE '/OPT/COA_UPLOAD_REPORT'.
        EXIT.
      ENDIF.
    ENDIF.
* Validate amount limit for the coder
    IF gt_level-appr_level     = 0.
      IF   gt_level-approval_limit NE 0.
        p_subrc = 4.

        PERFORM display_grid_message USING TEXT-t13
                                           lv_tabix
                                           g_tabname "'APPROVAL_LIMIT'
                                           '00'
                                           ''. "gt_level-approval_limit.
*        ********************VIMI-10151**********************
        IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
          l_tab = 'APL'.
*          DELETE gt_level INDEX lv_tabix.
          MOVE-CORRESPONDING gt_level TO ls_error_mgs.
          PERFORM capture_messages USING  TEXT-t13  l_tab gt_ncoa-opt_userid.
          CLEAR p_subrc.
          CONTINUE.
        ELSE.
          EXIT.
        ENDIF.
********************VIMI-10151**********************
*        EXIT. "vimi-10151
      ENDIF.
    ELSE.
      IF gt_level-approval_limit = 0.
        p_subrc = 4.
        PERFORM display_grid_message USING TEXT-t26
                                           lv_tabix
                                           g_tabname "'APPROVAL_LIMIT'
                                           '00'
                                           ''. "gt_level-approval_limit'.

********************VIMI-10151**********************
        IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
          l_tab = 'APL'.
*          DELETE gt_level INDEX lv_tabix.
          MOVE-CORRESPONDING gt_level TO ls_error_mgs.
          PERFORM capture_messages USING TEXT-t26  l_tab gt_ncoa-opt_userid.
          CLEAR p_subrc.
          CONTINUE.
        ELSE.
          EXIT.
        ENDIF.
********************VIMI-10151**********************
*        EXIT.      "VIMI-10151
      ENDIF.
    ENDIF.

*    IF gt_level-appr_level NE 'C'.                        "VIMI-9049
    IF gt_level-appr_level NE '0'.                          "VIMI-9049
      IF lv_cnt = 0.

        CLEAR lv_amt.
        lv_amt = gt_level-approval_limit.

      ELSE.

        IF lv_amt GE gt_level-approval_limit.
          p_subrc = 4.
          PERFORM display_grid_message USING TEXT-t27
                                             lv_tabix
                                             g_tabname "'APPROVAL_LIMIT'
                                             '00'
                                             ''."gt_level-approval_limit.
********************VIMI-10151**********************
          IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
            l_tab = 'APL'.
*             DELETE gt_level INDEX lv_tabix.
            MOVE-CORRESPONDING gt_level TO ls_error_mgs.
            PERFORM capture_messages USING TEXT-t27  l_tab gt_ncoa-opt_userid.
            CLEAR lv_amt.
            lv_amt = gt_level-approval_limit.
            CLEAR p_subrc.
            CONTINUE.
          ELSE.
            EXIT.
          ENDIF.
********************VIMI-10151**********************
*        EXIT.      "VIMI-10151
        ELSE.
          CLEAR lv_amt.
          lv_amt = gt_level-approval_limit.
        ENDIF.

      ENDIF.
    ENDIF.

*    AT END OF bukrs.
    AT END OF expense_type.
      CLEAR: lv_amt.
      READ TABLE lt_level INTO lwa_level WITH KEY bukrs     = gt_level-bukrs
                                                 appr_level = '0' "VIMI-9049
                                                 expense_type = gt_level-expense_type.
      IF sy-subrc NE 0.
        p_subrc = 4.
        PERFORM display_grid_message USING TEXT-t12
                                           lv_tabix
                                           g_tabname "'APPR_LEVEL'
                                           '00'
                                           gt_level-bukrs.
********************VIMI-10151**********************
        IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
          l_tab = 'APL'.
*           DELETE gt_level INDEX lv_tabix.
          MOVE-CORRESPONDING gt_level TO ls_error_mgs.
          PERFORM capture_messages USING TEXT-t12  l_tab gt_ncoa-opt_userid.
          CLEAR p_subrc.
          CONTINUE.
        ELSE.
          EXIT.
        ENDIF.
********************VIMI-10151**********************
*        EXIT.      "VIMI-10151
      ENDIF.
    ENDAT.
    lv_cnt = lv_cnt + 1.

  ENDLOOP.
  CLEAR: g_tabname,
         g_tab_desc.

  SORT gt_level BY bukrs expense_type appr_level.


* Start of INS VIMI-8758
  IF sy-repid NE '/OPT/COA_UPLOAD_REPORT'.
    IF p_subrc NE 0.
      CLEAR gv_index.
      CLEAR gt_level1.
      REFRESH gt_level.
      gv_index = lv_tabix.
      gt_level1[] = lt_templevel[].
      SORT gt_level1 BY bukrs expense_type appr_level.


      CHECK p_subrc GT 0.
      SORT gt_level BY bukrs expense_type appr_level.
      CALL METHOD g_protocol->display_protocol( ).
    ENDIF.
* End of INS VIMI-8758
  ELSEIF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
    LOOP AT lt_error_mgs INTO ls_error_mgs WHERE tab = 'APL'.

      DELETE gt_level WHERE bukrs        = ls_error_mgs-bukrs
                        AND expense_type = ls_error_mgs-expense_type.
      IF sy-subrc = 0.
        SELECT *
          FROM /opt/appr_limit
     APPENDING TABLE gt_level
         WHERE bukrs = ls_error_mgs-bukrs
           AND expense_type = ls_error_mgs-expense_type.
      ENDIF.
    ENDLOOP.
    SORT gt_level BY bukrs expense_type appr_level.
  ENDIF.
* ********************VIMI-10151**********************

ENDFORM.                    " VALIDATE_LEVEL_DATE
*&---------------------------------------------------------------------*
*&      Form  CHECK_COMP_CODE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM check_comp_code  USING    p_bukrs
                               p_tabix
                   CHANGING    p_subrc.

  DATA: lv_bukrs TYPE bukrs,
        lv_text  TYPE char100,
        lv_index TYPE sy-tabix.

  IF p_bukrs IS INITIAL.
    p_subrc = 4.

    PERFORM concat_text USING TEXT-m13
                              p_tabix
                     CHANGING lv_text.

    PERFORM display_grid_message USING lv_text
                                       ' '
                                       g_tabname
                                       '00'
                                       ' '.
********************VIMI-10151**********************
    IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
      l_tab = 'COA'.
      ls_error_mgs-bukrs      = gt_ncoa-comp_code.
      ls_error_mgs-appr_level = gt_ncoa-appr_level.
      ls_error_mgs-expense_type = gt_ncoa-expense_type. "VIMI-18191/snittala
      PERFORM capture_messages USING lv_text  l_tab  gt_ncoa-opt_userid.
    ELSE.
      EXIT.
    ENDIF.
********************VIMI-10151**********************
  ELSE.
    IF p_bukrs = '*'.
      p_subrc = 4.
*     begin of VIMI-16148
      PERFORM display_grid_message USING ' '
                                         p_tabix
                                         g_tabname
                                         '094'
                                         ' '.
*      PERFORM display_grid_message USING ' '
*                                         p_tabix
*                                         g_tabname
*                                         '52'
*                                         '*'.
*     end of VIMI-16148
********************VIMI-10151**********************
      IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
        lv_text = ''.
        l_tab = 'COA'.
        ls_error_mgs-bukrs      = gt_ncoa-comp_code.
        ls_error_mgs-appr_level = gt_ncoa-appr_level.
        ls_error_mgs-expense_type = gt_ncoa-expense_type. "VIMI-18191/snittala
        PERFORM capture_messages USING lv_text  l_tab gt_ncoa-opt_userid.
      ELSE.
        EXIT.
      ENDIF.
********************VIMI-10151**********************
    ENDIF.
    CLEAR lv_bukrs.
*   Begin of VIMI-16997/STAMADA
*    SELECT SINGLE bukrs
*             FROM t001
*             INTO lv_bukrs
**            WHERE bukrs = gt_level-bukrs." VIMI-16148
*            WHERE bukrs = p_bukrs. " VIMI-16148
    READ TABLE git_t001 TRANSPORTING NO FIELDS WITH KEY bukrs = p_bukrs.
*   End of VIMI-16997/STAMADA
    IF sy-subrc NE 0.
      p_subrc = 4.
*     begin of VIMI-16148
      PERFORM display_grid_message USING p_bukrs
                                         p_tabix
                                         g_tabname
                                         '093'
                                         ' '.
*      PERFORM display_grid_message USING ' '
*                                         p_tabix
*                                         g_tabname
*                                         '52'
*                                         gt_level-bukrs.
*     end of VIMI-16148
*      EXIT.
********************VIMI-10151**********************
      IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
* Begin of VIMI-25331
*        lv_text = ' '.
        PERFORM concat_text USING TEXT-t46
                                  p_tabix
                         CHANGING lv_text.
* End of VIMI-25331
        l_tab = 'COA'.
        ls_error_mgs-bukrs      = gt_ncoa-comp_code.
        ls_error_mgs-appr_level = gt_ncoa-appr_level.
        ls_error_mgs-expense_type = gt_ncoa-expense_type. "VIMI-18191/snittala
        PERFORM capture_messages USING lv_text  l_tab gt_ncoa-opt_userid.
      ELSE.
        EXIT.
      ENDIF.
********************VIMI-10151**********************
    ENDIF.
  ENDIF.

ENDFORM.                    " CHECK_COMP_CODE
*&---------------------------------------------------------------------*
*&      Form  CHECK_APPR_LEVEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM check_appr_level  USING    p_appr_level
                                p_coa
                                p_tabix
                                p_cnt
                    CHANGING    p_subrc.

  DATA: lv_text TYPE char100,
        l_ctext TYPE char10.                                "VIMI-9049
  DATA: lv_expense_txt  TYPE char20,                         "VIMI-16150
        lv_compcode_txt TYPE char20.                        "VIMI-16150
  CLEAR: lv_expense_txt, lv_compcode_txt.                   "VIMI-16150

*  IF p_appr_level NA '0123456789C'.                       "VIMI-9049
  IF p_appr_level NA '0123456789'.                          "VIMI-9049
    p_subrc = 4.
    PERFORM display_grid_message USING ' '
                                       p_tabix
                                       g_tabname "'APPR_LEVEL'
                                       '52'
                                       p_appr_level.
*    EXIT.
********************VIMI-10151**********************
    IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
      lv_text = 'APPR_LEVEL should contain appr_level in 0123456789'.
      l_tab = 'COA'.
      ls_error_mgs-bukrs      = gt_ncoa-comp_code.
      ls_error_mgs-appr_level = gt_ncoa-appr_level.
      ls_error_mgs-expense_type = gt_ncoa-expense_type. "VIMI-18191/snittala
      PERFORM capture_messages USING lv_text  l_tab gt_ncoa-opt_userid.
    ELSE.
      EXIT.
    ENDIF.
********************VIMI-10151**********************
  ENDIF.

  CONCATENATE TEXT-008 gt_ncoa-comp_code INTO lv_compcode_txt SEPARATED BY space. "VIMI-16150

  IF p_cnt EQ 'X'.
* begin VIMI-11431
*    READ TABLE gt_level WITH KEY bukrs = gt_ncoa-comp_code
**                                 expense_type = gt_ncoa-expense_type
*                                 appr_level = p_appr_level.
    READ TABLE gt_401 WITH KEY fieldname = 'EXPENSE_TYPE'.
    IF sy-subrc <> 0.  "no exp type in COA
      READ TABLE gt_level WITH KEY bukrs = gt_ncoa-comp_code
                                   appr_level = p_appr_level.
    ELSE.
      CONCATENATE TEXT-007 ':' gt_ncoa-expense_type INTO lv_expense_txt. "VIMI-16150
      CONDENSE lv_expense_txt.                              "VIMI-16150
      READ TABLE gt_level WITH KEY bukrs = gt_ncoa-comp_code
                                   expense_type = gt_ncoa-expense_type
                                   appr_level = p_appr_level.
      IF sy-subrc <> 0 AND
         ( gt_ncoa-expense_type IS INITIAL OR gt_ncoa-expense_type = '*' ).
        READ TABLE gt_level WITH KEY bukrs = gt_ncoa-comp_code
                                     expense_type = '*'
                                     appr_level = p_appr_level.
      ENDIF.
    ENDIF.
* end VIMI-11431
    IF sy-subrc NE 0.
      p_subrc = 4.
* begin of VIMI-16148
*      CLEAR lv_text.
*      lv_text = text-t09.
**      REPLACE '&' WITH p_appr_level INTO lv_text.                      "VIMI-16150
*      CONCATENATE p_appr_level '/' lv_expense_txt INTO lv_expense_txt. "VIMI-16150
*      CONDENSE lv_expense_txt.                              "VIMI-16150
*      REPLACE '&' WITH lv_expense_txt INTO lv_text.         "VIMI-16150
      IF p_coa IS INITIAL.                                  "VIMI-9049
        PERFORM display_grid_message USING p_appr_level
                                                  p_tabix
                                                  g_tabname "'APPR_LEVEL'
                                                  '089'
                                                  gt_ncoa-comp_code .

*        PERFORM display_grid_message USING lv_text
*                                          ' '
*                                          g_tabname "'APPR_LEVEL'
*                                          '00'
**                                          gt_ncoa-comp_code.         "VIMI-16150
*                                           lv_compcode_txt. "VIMI-16150
* end of VIMI-16148
********************VIMI-10151**********************
        IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
          l_tab = 'COA'.
          ls_error_mgs-bukrs      = gt_ncoa-comp_code.
          ls_error_mgs-appr_level = gt_ncoa-appr_level.
          ls_error_mgs-expense_type = gt_ncoa-expense_type. "VIMI-18001/snittala
          PERFORM capture_messages USING lv_text  l_tab gt_ncoa-opt_userid.
        ELSE.
*       EXIT.
        ENDIF.
********************VIMI-10151**********************
* Begin of VIMI-9049
      ELSE.
* begin of VIMI-16148
*        BEGIN OF VIMI-16150:ASUTHARA
*        CLEAR:lv_text.
*        lv_text = text-t31.
*        REPLACE '&' WITH lv_expense_txt INTO lv_text.
*        PERFORM display_grid_message USING text-t31
        PERFORM display_grid_message USING p_appr_level
                                                  p_tabix
                                                  g_tabname "'APPR_LEVEL'
                                                  '089'
                                                  gt_ncoa-comp_code .
*        PERFORM display_grid_message USING lv_text
**         END OF VIMI-16150:ASUTHARA
*
*                                         ' '
*                                         g_tabname "'APPR_LEVEL'
*                                         '00'
**                                          gt_ncoa-comp_code. "VIMI-16150
*                                           lv_compcode_txt. "VIMI-16150
* end of of VIMI-16148
********************VIMI-10151**********************
        IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
          l_tab = 'COA'.
          ls_error_mgs-bukrs      = gt_ncoa-comp_code.
          ls_error_mgs-appr_level = gt_ncoa-appr_level.
          ls_error_mgs-expense_type = gt_ncoa-expense_type. "VIMI-18001/snittala
* Begin of VIMI-18191/snittala
*          PERFORM capture_messages USING text-t31  l_tab  gt_ncoa-opt_userid.
          PERFORM capture_messages USING TEXT-t43  l_tab  gt_ncoa-opt_userid.
* End of VIMI-18191/snittala
        ELSE.
          EXIT.
        ENDIF.
********************VIMI-10151**********************

      ENDIF.
* End of VIMI-9049
      EXIT.
    ENDIF.
  ELSE.
* Start of DEL VIMI-9049
*    IF p_appr_level NE 'C'.
*      IF p_cnt NE p_appr_level.
*        p_subrc = 4.
*        PERFORM display_grid_message USING ' '
*                                           p_tabix
*                                           'APPR_LEVEL'
*                                           '52'
*                                           p_appr_level.
*        EXIT.
*      ENDIF.
*    ENDIF.
* End of DEL VIMI-9049
  ENDIF.

ENDFORM.                    " CHECK_APPR_LEVEL
*&---------------------------------------------------------------------*
*&      Form  CHECK_EXP_TYPE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM check_exp_type  USING    p_expense_type
                              p_tabix
                  CHANGING   p_subrc.

  DATA: lv_extyp TYPE /ors/expense.

  IF NOT p_expense_type IS INITIAL.
    IF p_expense_type NE '*'.
      CLEAR lv_extyp.
*      Begin of VIMI-16997/STAMADA
*      SELECT SINGLE expense_type
*               FROM /ors/expense_typ
*               INTO lv_extyp
*              WHERE expense_type = p_expense_type.
      READ TABLE git_expense_typ INTO gwa_expense_typ WITH KEY expense_type = p_expense_type.
*     End of VIMI-16997/STAMADA

      IF sy-subrc NE 0.
        p_subrc = 4.
        PERFORM display_grid_message USING ' '
                                           p_tabix
                                           'EXPENSE_TYPE'
                                           '52'
                                           gt_level-expense_type.

        IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
          l_tab = 'APL'.
          CONCATENATE 'Invalid Expense type' gt_level-expense_type INTO l_text.
          MOVE-CORRESPONDING gt_level TO ls_error_mgs.
          PERFORM capture_messages USING  l_text l_tab gt_ncoa-opt_userid.
        ENDIF.
      ENDIF.
    ENDIF.
* Start of INS VIMI-9049
*  ELSE.
*    p_subrc = 4.
*    PERFORM display_grid_message USING ' '
*                                       p_tabix
*                                       'EXPENSE_TYPE'
*                                       '52'
*                                       gt_level-expense_type.
* End of INS VIMI-9049
  ENDIF.

ENDFORM.                    " CHECK_EXP_TYPE
*&---------------------------------------------------------------------*
*&      Form  CHECK_USEID
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM check_useid  USING    p_opt_userid
                           p_tabix
                  CHANGING p_subrc.

  DATA: lv_userid TYPE /ors/umoid.


  IF p_opt_userid IS INITIAL.
    PERFORM display_grid_message USING TEXT-m16 p_tabix
                                 g_tabname "'OPT_USERID'
                                 '00'
                                 ' '.
********************VIMI-10151**********************
    IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
      l_tab = 'COA'.
      ls_error_mgs-bukrs      = gt_ncoa-comp_code.
      ls_error_mgs-appr_level = gt_ncoa-appr_level.
      ls_error_mgs-expense_type = gt_ncoa-expense_type. "VIMI-18191/snittala
      PERFORM capture_messages USING TEXT-m16  l_tab gt_ncoa-opt_userid.
    ELSE.
      p_subrc = 4.
    ENDIF.
********************VIMI-10151**********************
*    p_subrc = 4.
  ELSE.
* Start of DEL VIMI-9645
*    SELECT SINGLE opt_userid INTO lv_userid
*        FROM /ors/usermap
*        WHERE opt_userid = p_opt_userid
*          AND deleted    EQ space.
**          AND user_type IN ('R','B').
* End of DEL VIMI-9645
* Start of INS VIMI-9645
* Begin of change VIMI-15934
*    READ TABLE gt_usermap WITH KEY opt_userid = p_opt_userid.
*    READ TABLE gt_usermap_unfiltered WITH KEY opt_userid = p_opt_userid.   "VIMI-16997/STAMADA
    READ TABLE gt_usermap_unfiltered WITH KEY opt_userid = p_opt_userid BINARY SEARCH. "VIMI-16997/STAMADA
* End of change VIMI-15934
* End of INS VIMI-9645
    IF sy-subrc NE 0.
      p_subrc = 4.
* Begin of VIMI-24393/AMANGAPA
      READ TABLE gt_usermap_new INTO DATA(ls_usermap) WITH KEY opt_userid = p_opt_userid.
      IF sy-subrc IS INITIAL.
        CLEAR p_subrc.
      ELSE.
* End of VIMI-24393/AMANGAPA
* Begin of VIMI-9049
*      PERFORM display_grid_message USING ' '
*                                         p_tabix
*                                         'OPT_USERID'
*                                         '50'
*                                         p_opt_userid.
* begin of  VIMI-16148
        IF 1 = 0. " for where-use list.
          MESSAGE e088(/opt/vim_701) WITH p_opt_userid.
        ENDIF.
*   User &1 not maintained in tab user details tab
        PERFORM display_grid_message USING p_opt_userid
                                                p_tabix
                                                ' '
                                                '88'
                                                ''.
*      PERFORM display_grid_message USING text-m17
*                                         p_tabix
*                                         g_tabname "'OPT_USERID'
*                                         '00'
*                                         ''.
* end of VIMI-16148

********************VIMI-10151**********************
        IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
          l_tab = 'COA'.
          ls_error_mgs-bukrs      = gt_ncoa-comp_code.
          ls_error_mgs-appr_level = gt_ncoa-appr_level.
          ls_error_mgs-expense_type = gt_ncoa-expense_type. "VIMI-18191/snittala
          PERFORM capture_messages USING TEXT-m17  l_tab gt_ncoa-opt_userid.
        ELSE.
          p_subrc = 4.
        ENDIF.
********************VIMI-10151**********************
* End of VIMI-9049
      ENDIF.                         "VIMI-24393/AMANGAPA
    ENDIF.
  ENDIF.

ENDFORM.                    " CHECK_USEID
*&---------------------------------------------------------------------*
*&      Form  CHECK_COST_ELEM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM check_cost_elem  USING    p_ncoa TYPE /opt/appr_coa
                               p_tabix
                      CHANGING p_subrc.

*  TYPES: BEGIN OF lty_ce_flds,
*         fldnam TYPE fieldname,
*         END OF lty_ce_flds.

  DATA: "lt_ce_flds  TYPE TABLE OF /opt/bl_t401,
    "lwa_ce_flds TYPE /opt/bl_t401,
    lv_cnt           TYPE i,
    lv_type          TYPE char1,
    lv_fldnam        TYPE fieldname,
    lv_txt(73)       TYPE c,
    lv_multi_acctass TYPE /ptgwfi/value.                "VIMI-10121

  FIELD-SYMBOLS: <fs_ce_fld>  TYPE any,
                 <fs_ce_fld2> TYPE any.

*  SELECT *
*    FROM /opt/bl_t401
*    INTO TABLE lt_ce_flds
*   WHERE inv_type = 'N'
*     AND header   = space.

  CLEAR: lv_cnt,
         lv_type.

* begin VIMI-10121
  CALL FUNCTION '/PTGWFI/CP_READCONSTANT'
    EXPORTING
      constname          = 'MULTI_ACCT_ASSIGN'
      productcode        = 'IAP'
    IMPORTING
      constvalue         = lv_multi_acctass
    EXCEPTIONS
      constant_not_found = 1
      OTHERS             = 2.
* end VIMI-10121

*  LOOP AT lt_ce_flds INTO lwa_ce_flds.
  LOOP AT gt_401 WHERE inv_type = 'N' AND
                       header   IS INITIAL.
* begin VIMI-11431
*    IF ( gt_401-fieldname = 'BUKRS' OR
*         gt_401-fieldname = 'EXPENSE_TYPE').
    IF gt_401-fieldname = 'EXPENSE_TYPE'.
      gt_401-ranges = 'X'.
    ENDIF.
    IF gt_401-fieldname = 'BUKRS'.
* end VIMI-11431
    ELSE.
      ASSIGN COMPONENT gt_401-fieldname OF STRUCTURE p_ncoa TO <fs_ce_fld>.
      IF sy-subrc = 0 AND
         NOT <fs_ce_fld> IS INITIAL.
        DESCRIBE FIELD gt_401-fieldname TYPE lv_type.
* Start of DEL VIMI-9049
*        IF lv_type = 'C'.
*          IF <fs_ce_fld> = '*'.
*            p_subrc = 4.
*            PERFORM display_grid_message USING ' '
*                                               p_tabix
*                                               lwa_ce_flds-fldnam
*                                               '54'
*                                               '*'.
*            EXIT.
*          ENDIF.
*        ENDIF.
* End of DEL VIMI-9049
        lv_cnt = lv_cnt + 1.
*        UNASSIGN <fs_ce_fld>.
* begin VIMI-10121
*        IF lv_cnt GT 1.
        IF lv_cnt GT 1 AND lv_multi_acctass IS INITIAL.
* end VIMI-10121
          p_subrc = 4.
          PERFORM display_grid_message USING TEXT-t08
                                             p_tabix
                                             g_tabname "gt_401-fieldname
                                             '00'
                                             ' '.

********************VIMI-10151**********************
          IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
            l_tab = 'COA'.
            ls_error_mgs-bukrs      = gt_ncoa-comp_code.
            ls_error_mgs-appr_level = gt_ncoa-appr_level.
            ls_error_mgs-expense_type = gt_ncoa-expense_type. "VIMI-18191/snittala
            PERFORM capture_messages USING TEXT-t08  l_tab  gt_ncoa-opt_userid.
          ELSE.
            EXIT.
          ENDIF.
********************VIMI-10151**********************
*          EXIT.           " 10151
        ENDIF.
      ENDIF.

    ENDIF.

    IF gt_401-ranges = 'X'.
      CLEAR lv_fldnam.
      CONCATENATE gt_401-fieldname
                  '2'
             INTO lv_fldnam.

      ASSIGN COMPONENT lv_fldnam OF STRUCTURE p_ncoa TO <fs_ce_fld2>.
      IF sy-subrc = 0 AND
         NOT <fs_ce_fld2> IS INITIAL.
        lv_cnt = lv_cnt + 1.
        IF <fs_ce_fld2> LT <fs_ce_fld>.
          CLEAR lv_txt.
          SELECT SINGLE text
                   FROM t100
                   INTO lv_txt
                  WHERE sprsl = sy-langu
                    AND arbgb = 'DB'
                    AND msgnr = '650'.
          p_subrc = 4.
          PERFORM display_grid_message USING lv_txt
                                             p_tabix
                                             g_tabname "gt_401-fieldname
                                             '00'
                                             ' '.
******************VIMI-10151**********************
          IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
            l_tab = 'COA'.
            ls_error_mgs-bukrs      = gt_ncoa-comp_code.
            ls_error_mgs-appr_level = gt_ncoa-appr_level.
            ls_error_mgs-expense_type = gt_ncoa-expense_type. "VIMI-18191/snittala
            PERFORM capture_messages USING lv_txt  l_tab gt_ncoa-opt_userid.
          ELSE.
            EXIT.
          ENDIF.
********************VIMI-10151**********************
*          EXIT.           " 10151
        ENDIF.
      ENDIF.
    ENDIF.
    UNASSIGN:  <fs_ce_fld>,
               <fs_ce_fld2>.
  ENDLOOP.

  IF lv_cnt IS INITIAL .
    p_subrc = 4.
    PERFORM display_grid_message USING TEXT-t10
                                       p_tabix
                                       g_tabname"gt_401-fieldname
                                       '00'
                                       ' '.
********************VIMI-10151**********************
    IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
      l_tab = 'COA'.
      ls_error_mgs-bukrs      = gt_ncoa-comp_code.
      ls_error_mgs-appr_level = gt_ncoa-appr_level.
      ls_error_mgs-expense_type = gt_ncoa-expense_type. "VIMI-18191/snittala
      PERFORM capture_messages USING TEXT-t10  l_tab gt_ncoa-opt_userid.
    ENDIF.
********************VIMI-10151**********************

  ENDIF.

ENDFORM.                    " CHECK_COST_ELE
*&---------------------------------------------------------------------*
*&      Form  CONCAT_TEXT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM concat_text  USING    p_text
                           p_tabix
                  CHANGING p_lv_text.

  DATA: lv_row TYPE char10.

  lv_row = p_tabix.
  CONDENSE lv_row.

  CLEAR p_lv_text.
  CONCATENATE p_text
              ';'
              'row'
              lv_row
         INTO p_lv_text
    SEPARATED BY space.

ENDFORM.                    " CONCAT_TEXT
*&---------------------------------------------------------------------*
*&      Form  GET_COUNTER_DEFLG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM get_counter_deflg TABLES p_lt_ncoa  STRUCTURE /opt/appr_coa
                        USING p_gt_ncoa  TYPE /opt/appr_coa
                     CHANGING p_cnt
                              p_flg
                              p_exit.

  DATA: lwa_ncoa   TYPE /opt/appr_coa,
        lwa_ncoa1  TYPE /opt/appr_coa,
        lv_conter  TYPE /opt/counter,
        lv_dflag   TYPE /opt/default,
        lv_optuser TYPE /ors/umoid.

  DATA: lt_dcoa TYPE STANDARD TABLE OF /opt/appr_coa.       "VIMI-8797

  CLEAR: lv_conter,
         lv_dflag,
         p_exit.

  lt_dcoa[] = gt_ncoa[].                                    "VIMI-8797

  lv_conter  = p_gt_ncoa-counter.
*  lv_dflag   = p_gt_ncoa-default_flag.                    "VIMI-9049
  lv_optuser = p_gt_ncoa-opt_userid.

  CLEAR: p_gt_ncoa-counter,
*         p_gt_ncoa-default_flag,                          "VIMI-9049
         p_gt_ncoa-opt_userid.

* Begin of VIMI-8797
*  DELETE lt_dcoa WHERE default_flag IS INITIAL.           "VIMI-9049
*  MODIFY lt_dcoa FROM p_gt_ncoa TRANSPORTING counter default_flag opt_userid
*                                WHERE default_flag = 'X'.

  READ TABLE p_lt_ncoa FROM p_gt_ncoa INTO lwa_ncoa.
  IF sy-subrc EQ 0.
    READ TABLE lt_dcoa FROM p_gt_ncoa INTO lwa_ncoa.
    IF sy-subrc NE 0.
      p_exit = 'X'.
    ELSE.
      DELETE lt_dcoa INDEX sy-tabix.
      READ TABLE lt_dcoa FROM p_gt_ncoa INTO lwa_ncoa.
      IF sy-subrc EQ 0.
* Multiple default flag records
        p_flg = 2.
      ENDIF.
    ENDIF.
  ENDIF.
*  IF sy-subrc NE 0.
*    IF p_cnt GT 2 AND
*       p_flg IS INITIAL.
*      p_exit = 'X'.
*      EXIT.
*    ENDIF.
*    CLEAR: p_cnt,
*           p_flg.
*    p_cnt = p_cnt + 1.
*    IF lv_dflag = 'X'.
*      p_flg = p_flg + 1.
*    ENDIF.
** Start of INS VIMI-8758
*    p_gt_ncoa-counter      = p_cnt.
*  ELSE.
*    p_gt_ncoa-counter      = lv_conter.
** End of INS VIMI-8758
*  ENDIF.
* End of VIMI-8797

*  p_gt_ncoa-counter      = lv_conter.                     "VIMI-8758
*  p_gt_ncoa-default_flag = lv_dflag.                      "VIMI-9049
  p_gt_ncoa-opt_userid   = lv_optuser.

ENDFORM.                    " GET_COUNTER_DEFLG
*&---------------------------------------------------------------------*
*&      Form  CHECK_CODER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM check_coder  USING    p_opt_userid
                           p_tabix
                  CHANGING p_subrc.

  DATA: lv_val TYPE /ptgwfi/value.

  SELECT zvalue
    FROM /ptgwfi/z_const
    INTO lv_val
      UP TO 1 ROWS
   WHERE zpdcd  = 'IAP'
     AND zconst = 'CODER_DETERMING'.
  ENDSELECT.
  IF NOT lv_val IS INITIAL AND
     lv_val NE 'S'.
    READ TABLE gt_coder WITH KEY coder_id = p_opt_userid.
    IF sy-subrc NE 0.
      p_subrc = 4.
      PERFORM display_grid_message USING TEXT-t15
                                         p_tabix
                                         'OPT_USERID'
                                         '00'
                                         p_opt_userid.
    ENDIF.
  ENDIF.

ENDFORM.                    " CHECK_CODER

*&---------------------------------------------------------------------*
*&      Form  FILL_CELLTAB
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM fill_celltab  USING    VALUE(p_mode)
                            VALUE(p_fldnam)
                   CHANGING pt_celltab TYPE lvc_t_styl.

  DATA: ls_celltab TYPE lvc_s_styl,
        l_mode     TYPE raw4.

  IF p_mode EQ 'D'.
    l_mode = cl_gui_alv_grid=>mc_style_enabled.
  ELSE.
    l_mode = cl_gui_alv_grid=>mc_style_disabled.
  ENDIF.

*  ls_celltab-fieldname = 'MANDT'.
*  ls_celltab-style = cl_gui_alv_grid=>mc_style_disabled.
*  INSERT ls_celltab INTO TABLE pt_celltab.
*
*  ls_celltab-fieldname = 'BUKRS'.
*  ls_celltab-style = cl_gui_alv_grid=>mc_style_disabled.
*  INSERT ls_celltab INTO TABLE pt_celltab.
*
*  ls_celltab-fieldname = 'APPR_LEVEL'.
*  ls_celltab-style = cl_gui_alv_grid=>mc_style_disabled.
*  INSERT ls_celltab INTO TABLE pt_celltab.
*
*  ls_celltab-fieldname = 'EXPENSE_TYPE'.
*  ls_celltab-style = cl_gui_alv_grid=>mc_style_disabled.
*  INSERT ls_celltab INTO TABLE pt_celltab.
*
*  ls_celltab-fieldname = 'DETAILS'.
*  ls_celltab-style = cl_gui_alv_grid=>mc_style_disabled.
*  INSERT ls_celltab INTO TABLE pt_celltab.
*
*  ls_celltab-fieldname = 'APPROVAL_LIMIT'.
*  ls_celltab-style = cl_gui_alv_grid=>mc_style_disabled.
*  INSERT ls_celltab INTO TABLE pt_celltab.
*
*  ls_celltab-fieldname = 'HEAD_LIMIT_CHK'.
*  ls_celltab-style = cl_gui_alv_grid=>mc_style_disabled.
*  INSERT ls_celltab INTO TABLE pt_celltab.

  ls_celltab-fieldname = p_fldnam.
  ls_celltab-style     = l_mode.
  INSERT ls_celltab INTO TABLE pt_celltab.

ENDFORM.                    " FILL_CELLTAB
*&---------------------------------------------------------------------*
*&      Form  EDIT_CELLS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM edit_cells .

* begin VIMI-13155
  CALL METHOD cl_gui_cfw=>flush
    EXCEPTIONS
      OTHERS = 1.
* end VIMI-13155
  IF g_edit = 'X'.
    IF g_grid->is_ready_for_input( ) EQ 0.
      CALL METHOD g_grid->set_ready_for_input
        EXPORTING
          i_ready_for_input = 0.

    ELSE.
      CALL METHOD g_grid->set_ready_for_input
        EXPORTING
          i_ready_for_input = 1.
    ENDIF.
  ENDIF.

ENDFORM.                    " EDIT_CELLS
*&---------------------------------------------------------------------*
*&      Form  CHANGE_EDIT_MODE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM change_edit_mode .

  DATA: lt_celltab TYPE lvc_t_styl,
        lv_index   TYPE sy-tabix.

  LOOP AT gt_level1.
    lv_index = sy-tabix.
    CLEAR: lt_celltab,
           gt_level1-celltab.
    REFRESH: lt_celltab,
             gt_level1-celltab.

    IF gt_level1-head_limit_chk = 'H' OR
       gt_level1-btext+0(1) = 'H'.

      PERFORM fill_celltab USING 'H'
                                 'ADD_PACK_LIMIT'
                         CHANGING lt_celltab.

    ELSE.

      PERFORM fill_celltab USING 'D'
                                 'ADD_PACK_LIMIT'
                        CHANGING lt_celltab.


    ENDIF.
    INSERT LINES OF lt_celltab INTO TABLE gt_level1-celltab.
    MODIFY gt_level1 INDEX lv_index.
  ENDLOOP.

  PERFORM edit_cells.

ENDFORM.                    " CHANGE_EDIT_MODE
* End of INS VIMI-
*&---------------------------------------------------------------------*
*&      Form  REDISP_GRID
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM redisp_grid .

  DATA: lv_value(128) TYPE c,
        lt_fcat       TYPE lvc_t_fcat,
        wa_fcat       TYPE lvc_s_fcat,
        lt_mcell      TYPE lvc_t_modi,
        lt_celltab    TYPE lvc_t_styl,
        ls_layout     TYPE lvc_s_layo,
        lt_fieldcat   TYPE lvc_t_fcat,
        wa_rowid      TYPE lvc_s_modi,

*  LOOP AT gt_rowid INTO wa_rowid.

*    READ TABLE gt_level1 INDEX wa_rowid-row_id.
*    IF sy-subrc = 0.
        lt_level      TYPE TABLE OF /opt/appr_limit,
        wa_level      TYPE /opt/appr_limit,
        wa_level1     TYPE /opt/appr_limit,
        lv_index      TYPE sy-tabix.

  SELECT * FROM /opt/appr_limit INTO TABLE lt_level. "#EC CI_NOWHERE  "VIMI-23560.

  LOOP AT gt_level1.
    lv_index = sy-tabix.
    CLEAR wa_level1.
    IF NOT gt_level1-mandt IS INITIAL.
      MOVE-CORRESPONDING gt_level1 TO wa_level1.
      READ TABLE lt_level INTO wa_level FROM wa_level1.
      IF sy-subrc = 0.
        CLEAR: lt_celltab,
               gt_level1-celltab.
        REFRESH: lt_celltab,
                 gt_level1-celltab.

        IF NOT gt_level1-bukrs IS INITIAL.
          PERFORM fill_celltab USING 'H'
                                     'BUKRS'
                            CHANGING lt_celltab.

          PERFORM fill_celltab USING 'H'
                                     'DESCR'
                            CHANGING lt_celltab.

          PERFORM fill_celltab USING 'H'
                                     'EXTXT'
                            CHANGING lt_celltab.

        ENDIF.
        IF NOT gt_level1-appr_level IS INITIAL.
          IF gt_level1-btext+0(1) = 'H'.

            PERFORM fill_celltab USING 'H'
                                       'ADD_PACK_LIMIT'
                               CHANGING lt_celltab.
            CLEAR gt_level1-add_pack_limit.
          ELSE.

            PERFORM fill_celltab USING 'D'
                                       'ADD_PACK_LIMIT'
                              CHANGING lt_celltab.

          ENDIF.
        ELSE.
          PERFORM fill_celltab USING 'H'
                                     'BTEXT'
                             CHANGING lt_celltab.
*          CLEAR gt_level1-add_pack_limit.
          PERFORM fill_celltab USING 'H'
                                     'ADD_PACK_LIMIT'
                             CHANGING lt_celltab.
          CLEAR gt_level1-add_pack_limit.
        ENDIF.

      ELSE.
        CLEAR: lt_celltab,
               gt_level1-celltab.
        REFRESH: lt_celltab,
                 gt_level1-celltab.

        IF NOT gt_level1-bukrs IS INITIAL.
          PERFORM fill_celltab USING 'D'
                                     'BUKRS'
                            CHANGING lt_celltab.

*      ENDIF.

*      IF NOT gt_level1-appr_level IS INITIAL.
          PERFORM fill_celltab USING 'D'
                                     'DESCR'
                            CHANGING lt_celltab.

          PERFORM fill_celltab USING 'D'
                                     'EXTXT'
                            CHANGING lt_celltab.

        ENDIF.
      ENDIF.
    ELSE.
      CLEAR: lt_celltab,
             gt_level1-celltab.
      REFRESH: lt_celltab,
               gt_level1-celltab.

      gt_level1-appr_level = gt_level1-descr(3).            "VIMI-9496

      IF NOT gt_level1-bukrs IS INITIAL.
        PERFORM fill_celltab USING 'D'
                                   'BUKRS'
                          CHANGING lt_celltab.

        PERFORM fill_celltab USING 'D'
                                   'DESCR'
                          CHANGING lt_celltab.

        PERFORM fill_celltab USING 'D'
                                   'EXTXT'
                          CHANGING lt_celltab.

      ENDIF.

*      READ TABLE gt_rowid INTO wa_rowid WITH KEY row_id = lv_index.
*      IF sy-subrc = 0.
*        CLEAR: gt_level1-btext.
*        gt_level1-btext = wa_rowid-value.
*      ENDIF.
      IF NOT gt_level1-appr_level IS INITIAL.
        IF gt_level1-btext+0(1) = 'H'.

          PERFORM fill_celltab USING 'H'
                                     'ADD_PACK_LIMIT'
                             CHANGING lt_celltab.
          CLEAR gt_level1-add_pack_limit.
        ELSE.

          PERFORM fill_celltab USING 'D'
                                     'ADD_PACK_LIMIT'
                            CHANGING lt_celltab.

        ENDIF.
      ELSE.
*        PERFORM fill_celltab USING 'H'                    "VIMI-9497
        PERFORM fill_celltab USING 'D'                      "VIMI-9497
                                   'BTEXT'
                           CHANGING lt_celltab.
*        CLEAR gt_level1-add_pack_limit.
* Start of INS VIMI-9016
        IF gt_level1-btext+0(1) = 'H'.

          PERFORM fill_celltab USING 'H'
                                     'ADD_PACK_LIMIT'
                             CHANGING lt_celltab.
          CLEAR gt_level1-add_pack_limit.
        ELSE.
* End of INS VIMI-9016
          PERFORM fill_celltab USING 'D'
                                     'ADD_PACK_LIMIT'
                             CHANGING lt_celltab.
        ENDIF.                                              "VIMI-9016
        CLEAR gt_level1-add_pack_limit.
      ENDIF.
    ENDIF.
    INSERT LINES OF lt_celltab INTO TABLE gt_level1-celltab.
    MODIFY gt_level1 INDEX lv_index. "wa_rowid-row_id.

  ENDLOOP.

  CLEAR gt_rowid.

  CALL METHOD g_grid->get_frontend_layout
    IMPORTING
      es_layout = ls_layout.

  CALL METHOD g_grid->get_frontend_fieldcatalog
    IMPORTING
      et_fieldcatalog = lt_fieldcat.

  CALL METHOD g_grid->set_table_for_first_display
    EXPORTING
      i_save          = 'A'
      is_layout       = ls_layout
    CHANGING
      it_fieldcatalog = lt_fieldcat
      it_outtab       = gt_level1[].

ENDFORM.                    " REDISP_GRID

*&---------------------------------------------------------------------*
*&      Form  get_sap_user_group                    Added VIMI-7280
*&---------------------------------------------------------------------*
*       Returns SAP user group from SAP user master
*       Used for authorization checks
*----------------------------------------------------------------------*
*      -->PI_NAME    text
*      -->PO_GROUP   text
*----------------------------------------------------------------------*
FORM get_sap_user_group
  USING pi_name TYPE xubname
  CHANGING po_group TYPE xuclass.

  CLEAR po_group.
  CHECK NOT pi_name IS INITIAL.
* Begin of VIMI-16997/STAMADA
*  SELECT SINGLE class FROM usr02
*    INTO po_group
*    WHERE bname = pi_name.
  READ TABLE git_usr02 INTO gwa_usr02 WITH KEY bname = pi_name.
  IF sy-subrc EQ 0.
    po_group = gwa_usr02-class.
  ENDIF.
  CLEAR gwa_usr02.
* End of VIMI-16997/STAMADA
ENDFORM.                    "get_sap_user_group

*&---------------------------------------------------------------------*
*&      Form  check_usergroup_authorization          Added VIMI-7280
*&---------------------------------------------------------------------*
*       For added user map records, or any changed records,
*       check Create/Change authorization
*----------------------------------------------------------------------*
*      -->P_SUBRC    text
*----------------------------------------------------------------------*
FORM check_usergroup_authorization CHANGING p_subrc TYPE sy-subrc.

  DATA:
    lv_group   TYPE xuclass,
    lv_actvt   TYPE activ_auth VALUE '01',
    lv_tabix   TYPE sytabix,
    lv_usermap TYPE ty_usermap_line.

  CLEAR p_subrc.
  CHECK NOT /opt/vim_auth_check=>is_active IS INITIAL.

* Begin of VIMI-16148
*  IF NOT g_protocol IS INITIAL.
*    CALL METHOD g_protocol->free( ).
*    CLEAR g_protocol.
*  ENDIF.
* end of VIMI-16148

* Check the user map
  LOOP AT gt_usermap.
    lv_tabix = sy-tabix.
    PERFORM get_sap_user_group
      USING gt_usermap-sap_user_id
      CHANGING lv_group.
*   Create
    IF gt_usermap-opt_userid(1) EQ '&'.
      lv_actvt = '01'.
      CALL METHOD /opt/vim_auth_check=>check_appr_usermap
        EXPORTING
          pi_group = lv_group
          pi_actvt = lv_actvt
        EXCEPTIONS
          failed   = 1.
      IF sy-subrc <> 0.
        p_subrc = 4.
        PERFORM display_grid_message USING lv_group lv_tabix
                                              'SAP_USER_ID'
                                              '73' ' '.
      ENDIF.
*   Change - if changed the SAP user ID (group can be different)
*   Note that if the value is not changed, we should have checked it
*   before, when switching into the change mode and the check
*   would pass here too.
    ELSE.
      lv_actvt = '02'.
      CALL METHOD /opt/vim_auth_check=>check_appr_usermap
        EXPORTING
          pi_group = lv_group
          pi_actvt = lv_actvt
        EXCEPTIONS
          failed   = 1.
      IF sy-subrc <> 0.
        p_subrc = 4.
        PERFORM display_grid_message USING lv_group lv_tabix
                                              'SAP_USER_ID'
                                              '74' ' '.
      ENDIF.
    ENDIF.
  ENDLOOP.

  IF sy-repid <> '/OPT/AR_COA'.

* Check the limits
    lv_actvt = '02'.
    LOOP AT gt_coa.
      lv_tabix = sy-tabix.
      READ TABLE gt_usermap INTO lv_usermap
        WITH KEY opt_userid = gt_coa-opt_userid BINARY SEARCH . "VIMI-9640
      IF sy-subrc <> 0.
        READ TABLE gt_usermap_filtered INTO lv_usermap
          WITH KEY opt_userid = gt_coa-opt_userid BINARY SEARCH . "VIMI-9640
      ENDIF.
      IF sy-subrc <> 0.
        CLEAR: lv_group, lv_usermap.
      ELSE.
        PERFORM get_sap_user_group
          USING lv_usermap-sap_user_id
          CHANGING lv_group.
      ENDIF.
      IF gt_coa-bukrs = '*' OR gt_coa-bukrs IS INITIAL.
        CALL METHOD /opt/vim_auth_check=>check_appr_limits
          EXPORTING
            pi_group = lv_group
            pi_bukrs = '    '
            pi_actvt = lv_actvt
          EXCEPTIONS
            failed   = 1.
      ELSE.
        CALL METHOD /opt/vim_auth_check=>check_appr_limits
          EXPORTING
            pi_group = lv_group
            pi_bukrs = gt_coa-bukrs
            pi_actvt = lv_actvt
          EXCEPTIONS
            failed   = 1.
      ENDIF.
      IF sy-subrc <> 0.
        p_subrc = 4.
        PERFORM display_grid_message
          USING lv_usermap-sap_user_id lv_tabix
                'SAP_USER_ID' '78' gt_coa-bukrs.
      ENDIF.
    ENDLOOP.

* check the coder
    lv_actvt = '02'.
    LOOP AT gt_coder.
      lv_tabix = sy-tabix.
      SORT gt_usermap BY opt_userid.                        "VIMI-14042
      READ TABLE gt_usermap INTO lv_usermap
        WITH KEY opt_userid = gt_coder-coder_id BINARY SEARCH. "VIMI-9640
      IF sy-subrc <> 0.
        SORT gt_usermap_filtered BY opt_userid.             "VIMI-14042
        READ TABLE gt_usermap_filtered INTO lv_usermap
          WITH KEY opt_userid = gt_coder-coder_id BINARY SEARCH. "VIMI-9640
      ENDIF.
      IF sy-subrc <> 0.
        CLEAR: lv_group, lv_usermap.
      ELSE.
        PERFORM get_sap_user_group
          USING lv_usermap-sap_user_id
          CHANGING lv_group.
      ENDIF.
      IF g_constant = 'R' OR       " no company code in coder screens
         gt_coder-company_code = '*' OR
         gt_coder-company_code IS INITIAL.
        CALL METHOD /opt/vim_auth_check=>check_appr_coder
          EXPORTING
            pi_group = lv_group
            pi_bukrs = '    '
            pi_actvt = lv_actvt
          EXCEPTIONS
            failed   = 1.
      ELSE.
        CALL METHOD /opt/vim_auth_check=>check_appr_coder
          EXPORTING
            pi_group = lv_group
            pi_bukrs = gt_coder-company_code
            pi_actvt = lv_actvt
          EXCEPTIONS
            failed   = 1.
      ENDIF.
      IF sy-subrc <> 0.
        p_subrc = 4.
        PERFORM display_grid_message
          USING lv_usermap-sap_user_id lv_tabix
                'SAP_USER_ID' '78' gt_coder-company_code.
      ENDIF.
    ENDLOOP.

  ENDIF.

  CHECK p_subrc <> 0.
  CALL METHOD g_protocol->display_protocol( ).

ENDFORM.                    "check_usergroup_authorization

*&---------------------------------------------------------------------*
*&      Form  check_new_rec_auth                  Added VIMI-7280
*&---------------------------------------------------------------------*
*       For the "add records" dialog of the limits and coders tabs,
*       check authorizations on the new entries.
*----------------------------------------------------------------------*
*      -->PO_SUBRC   text
*----------------------------------------------------------------------*
FORM check_new_rec_auth CHANGING po_subrc TYPE sysubrc.

  DATA:
    lv_group   TYPE xuclass,
    lv_actvt   TYPE activ_auth VALUE '01',
    lv_tabix   TYPE sytabix,
    lv_usermap TYPE ty_usermap_line.

  po_subrc = 0.
  CHECK NOT /opt/vim_auth_check=>is_active IS INITIAL.
  CASE g_evt_grid->gridname.
    WHEN c_fcoaview.
*     Check the new limits entries
      LOOP AT gt_coan WHERE NOT opt_userid IS INITIAL.
        READ TABLE gt_usermap INTO lv_usermap
          WITH KEY opt_userid = gt_coan-opt_userid.
        IF sy-subrc <> 0.
          READ TABLE gt_usermap_filtered INTO lv_usermap
            WITH KEY opt_userid = gt_coan-opt_userid.
        ENDIF.
        IF sy-subrc <> 0.
          CLEAR: lv_group, lv_usermap.
        ELSE.
          PERFORM get_sap_user_group
            USING lv_usermap-sap_user_id
            CHANGING lv_group.
        ENDIF.
        IF gt_coan-bukrs = '*' OR gt_coan-bukrs IS INITIAL.
          CALL METHOD /opt/vim_auth_check=>check_appr_limits
            EXPORTING
              pi_group = lv_group
              pi_bukrs = '    '
              pi_actvt = lv_actvt
            EXCEPTIONS
              failed   = 1.
        ELSE.
          CALL METHOD /opt/vim_auth_check=>check_appr_limits
            EXPORTING
              pi_group = lv_group
              pi_bukrs = gt_coan-bukrs
              pi_actvt = lv_actvt
            EXCEPTIONS
              failed   = 1.
        ENDIF.
        IF sy-subrc <> 0.
          po_subrc = 4.
          MESSAGE i077 WITH lv_usermap-sap_user_id
                            gt_coan-bukrs.
          EXIT.
        ENDIF.
      ENDLOOP.
    WHEN c_fcoderview.
*     Check the new coder entries
      LOOP AT gt_codern WHERE NOT coder_id IS INITIAL.
        READ TABLE gt_usermap INTO lv_usermap
          WITH KEY opt_userid = gt_codern-coder_id.
        IF sy-subrc <> 0.
          READ TABLE gt_usermap_filtered INTO lv_usermap
            WITH KEY opt_userid = gt_codern-coder_id.
        ENDIF.
        IF sy-subrc <> 0.
          CLEAR: lv_group, lv_usermap.
        ELSE.
          PERFORM get_sap_user_group
            USING lv_usermap-sap_user_id
            CHANGING lv_group.
        ENDIF.
        IF g_constant = 'R' OR   " no company code in coder screens
           gt_codern-company_code = '*' OR
           gt_codern-company_code IS INITIAL.
          CALL METHOD /opt/vim_auth_check=>check_appr_coder
            EXPORTING
              pi_group = lv_group
              pi_bukrs = '    '
              pi_actvt = lv_actvt
            EXCEPTIONS
              failed   = 1.
        ELSE.
          CALL METHOD /opt/vim_auth_check=>check_appr_coder
            EXPORTING
              pi_group = lv_group
              pi_bukrs = gt_codern-company_code
              pi_actvt = lv_actvt
            EXCEPTIONS
              failed   = 1.
        ENDIF.
        IF sy-subrc <> 0.
          po_subrc = 4.
          MESSAGE i077 WITH lv_usermap-sap_user_id
                            gt_codern-company_code.
          EXIT.
        ENDIF.
      ENDLOOP.
  ENDCASE.

ENDFORM.                    "check_new_rec_auth

*&---------------------------------------------------------------------*
*&      Form  check_liap_authorization     Added VIMI-7280 / VIMI-8064
*&---------------------------------------------------------------------*
*       Checks authorizations for two tabs of the LIAP configuration
*----------------------------------------------------------------------*
*      -->P_SUBRC    text
*----------------------------------------------------------------------*
FORM check_liap_authorization CHANGING p_subrc TYPE sy-subrc.

  DATA:
    lv_group TYPE xuclass,
    lv_actvt TYPE activ_auth VALUE '01',
    lv_tabix TYPE sytabix.

  CLEAR p_subrc.
  CHECK NOT /opt/vim_auth_check=>is_active IS INITIAL.

  IF NOT g_protocol IS INITIAL.
    CALL METHOD g_protocol->free( ).
    CLEAR g_protocol.
  ENDIF.

* LIAP COA limits per company code

  LOOP AT gt_level1.
    lv_tabix = sy-tabix.
    IF gt_level1-mandt IS INITIAL.
      lv_actvt = '01'.
    ELSE.
      lv_actvt = '02'.
    ENDIF.
    CALL METHOD /opt/vim_auth_check=>check_liap_level_limits
      EXPORTING
        pi_bukrs = gt_level1-bukrs
        pi_actvt = lv_actvt
      EXCEPTIONS
        failed   = 1.
    IF sy-subrc <> 0.
      p_subrc = 4.
      IF gt_level1-mandt IS INITIAL.    "create
        PERFORM display_grid_message
          USING gt_level1-bukrs lv_tabix
                'SAP_USER_ID' '80' ''.
      ELSE.
        PERFORM display_grid_message
          USING gt_level1-bukrs lv_tabix
                'SAP_USER_ID' '82' ''.
      ENDIF.
    ENDIF.
  ENDLOOP.

* LIAP COA approvers per company code
  SORT gt_usermap BY opt_userid.  "VIMI-16997/STAMADA
  LOOP AT gt_ncoa1.
    lv_tabix = sy-tabix.
    READ TABLE gt_usermap WITH KEY opt_userid = gt_ncoa1-opt_userid BINARY SEARCH.  "VIMI-16997/STAMADA
    IF sy-subrc <> 0.
      READ TABLE gt_usermap_filtered INTO gt_usermap
        WITH KEY opt_userid = gt_ncoa1-opt_userid.
    ENDIF.
    IF sy-subrc <> 0.
      CLEAR lv_group.
    ELSE.
      PERFORM get_sap_user_group
        USING gt_usermap-sap_user_id
        CHANGING lv_group.
    ENDIF.
    IF gt_ncoa1-mandt IS INITIAL.
      lv_actvt = '01'.
    ELSE.
      lv_actvt = '02'.
    ENDIF.
    CALL METHOD /opt/vim_auth_check=>check_liap_approver
      EXPORTING
        pi_group = lv_group
        pi_bukrs = gt_ncoa1-comp_code
        pi_actvt = lv_actvt
      EXCEPTIONS
        failed   = 1.
    IF sy-subrc <> 0.
      p_subrc = 4.
*     Row number is for the ncoa1 table.
*     This can later be changed to correspond to coa2/3.
      IF gt_ncoa1-mandt IS INITIAL.     "create
        PERFORM display_grid_message
          USING gt_usermap-sap_user_id lv_tabix
               'SAP_USER_ID' '77' gt_ncoa1-comp_code.
      ELSE.
        PERFORM display_grid_message
          USING gt_usermap-sap_user_id lv_tabix
               'SAP_USER_ID' '78' gt_ncoa1-comp_code.
      ENDIF.
    ENDIF.
  ENDLOOP.

* Coders
  LOOP AT gt_coder_lba.
    lv_tabix = sy-tabix.
    READ TABLE gt_usermap WITH KEY opt_userid = gt_coder_lba-coder_id BINARY SEARCH.  "VIMI-16997/STAMADA.
    IF sy-subrc <> 0.
      READ TABLE gt_usermap_filtered INTO gt_usermap
        WITH KEY opt_userid = gt_coder_lba-coder_id.
    ENDIF.
    IF sy-subrc <> 0.
      CLEAR lv_group.
    ELSE.
      PERFORM get_sap_user_group
        USING gt_usermap-sap_user_id
        CHANGING lv_group.
    ENDIF.
    IF gt_coder_lba-mandt IS INITIAL.
      lv_actvt = '01'.
    ELSE.
      lv_actvt = '02'.
    ENDIF.
    IF g_constant = 'R' OR          " no company code in coder screens
       gt_coder_lba-company_code = '*' OR
       gt_coder_lba-company_code IS INITIAL.
      CALL METHOD /opt/vim_auth_check=>check_appr_coder
        EXPORTING
          pi_group = lv_group
          pi_bukrs = '    '
          pi_actvt = lv_actvt
        EXCEPTIONS
          failed   = 1.
    ELSE.
      CALL METHOD /opt/vim_auth_check=>check_appr_coder
        EXPORTING
          pi_group = lv_group
          pi_bukrs = gt_coder_lba-company_code
          pi_actvt = lv_actvt
        EXCEPTIONS
          failed   = 1.
    ENDIF.
    IF sy-subrc <> 0.
      p_subrc = 4.
      IF gt_coder_lba-mandt IS INITIAL.     "create
        PERFORM display_grid_message
          USING gt_usermap-sap_user_id lv_tabix
               'SAP_USER_ID' '77' gt_coder_lba-company_code.
      ELSE.
        PERFORM display_grid_message
          USING gt_usermap-sap_user_id lv_tabix
               'SAP_USER_ID' '78' gt_coder_lba-company_code.
      ENDIF.
    ENDIF.
  ENDLOOP.

  CHECK p_subrc <> 0.
  CALL METHOD g_protocol->display_protocol( ).

ENDFORM.                    "check_liap_authorization

* Start of INS VIMI-7380
*&---------------------------------------------------------------------*
*&      Form  REDISP_300_GRID
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM redisp_300_grid .

  DATA: lt_fcat     TYPE lvc_t_fcat,
        wa_fcat     TYPE lvc_s_fcat,
        lt_mcell    TYPE lvc_t_modi,
        lt_celltab  TYPE lvc_t_styl,
        ls_layout   TYPE lvc_s_layo,
        lt_fieldcat TYPE lvc_t_fcat,
        lv_index    TYPE sy-tabix,
*        lt_ccoa       TYPE TABLE OF /opt/appr_coa,         "D-VIMI-17454
*        lt_acoa       TYPE TABLE OF /opt/appr_coa,         "D-VIMI-17454
        lt_level    TYPE TABLE OF /opt/appr_limit,
        wa_ccoa     TYPE /opt/appr_coa,
        wa_ccoa1    TYPE /opt/appr_coa,
        wa_acoa     TYPE /opt/appr_coa,
        wa_acoa1    TYPE /opt/appr_coa,
        wa_level    TYPE /opt/appr_limit,
        wa_level1   TYPE /opt/appr_limit.

  SELECT * FROM /opt/appr_limit INTO TABLE lt_level. "#EC CI_NOWHERE "VIMI-23560

*Begin D-VIMI-17454
*  SELECT *
*    FROM /opt/appr_coa
*    INTO TABLE lt_ccoa
*   WHERE appr_level LT 2.
*
*  SELECT *
*   FROM /opt/appr_coa
*   INTO TABLE lt_acoa
*  WHERE appr_level GE 2.
*End D-VIMI-17454

  CLEAR: gt_ncoa2,
         gt_ncoa3.
  REFRESH: gt_ncoa2,
           gt_ncoa3.

  LOOP AT gt_ncoa1.
* begin VIMI-8064
*   Filter out records with failed auth check
    READ TABLE gt_ncoa_filtered
      WITH KEY comp_code = gt_ncoa1-comp_code
               appr_level = gt_ncoa1-appr_level
               opt_userid = gt_ncoa1-opt_userid
               counter = gt_ncoa1-counter.
    IF sy-subrc = 0.
      CONTINUE.
    ENDIF.
* end VIMI-8064
    IF gt_ncoa1-appr_level LE 1.
      APPEND gt_ncoa1 TO gt_ncoa2.
      CLEAR gt_ncoa2.
    ELSE.
      APPEND gt_ncoa1 TO gt_ncoa3.
      CLEAR gt_ncoa3.
    ENDIF.
    CLEAR gt_ncoa1.
  ENDLOOP.

  IF NOT g_grid IS INITIAL.
    IF g_evt_grid->gridname = c_applevel.

      LOOP AT gt_level1.
        lv_index = sy-tabix.
        CLEAR wa_level1.
        MOVE-CORRESPONDING gt_level1 TO wa_level1.
        READ TABLE lt_level INTO wa_level FROM wa_level1.
        IF sy-subrc NE 0.
          CONTINUE.
        ENDIF.
        CLEAR: lt_celltab,
               gt_level1-celltab.
        REFRESH: lt_celltab,
                 gt_level1-celltab.

        IF NOT gt_level1-bukrs IS INITIAL.
          PERFORM fill_celltab USING 'H'
                                     'BUKRS'
                            CHANGING lt_celltab.

        ENDIF.

*        IF NOT gt_level1-appr_level IS INITIAL.           "VIMI-9049
        PERFORM fill_celltab USING 'H'
                                   'DESCR'
                          CHANGING lt_celltab.

        PERFORM fill_celltab USING 'H'
                                   'EXTXT'
                          CHANGING lt_celltab.

*        ENDIF.                                            "VIMI-9049

*        IF gt_level1-appr_level = 'C' OR " VIMI-9049
        IF gt_level1-appr_level = '0'." OR                    " VIMI-9049
*           gt_level1-appr_level = '1'.                       "VIMI-9049

          READ TABLE gt_values_h INTO gs_values_h WITH KEY
                                        domvalue_l = 'H'.
          IF sy-subrc = 0.
            CONCATENATE gs_values_h-domvalue_l
                        '-'
                        gs_values_h-ddtext
                   INTO gt_level1-btext.
          ENDIF.

          CLEAR gt_level1-add_pack_limit.

          PERFORM fill_celltab USING 'H'
                                  'BTEXT'
                         CHANGING lt_celltab.
          PERFORM fill_celltab USING 'H'
                                     'ADD_PACK_LIMIT'
                            CHANGING lt_celltab.

        ELSE.
          IF gt_level1-btext+0(1) = 'H'.
            PERFORM fill_celltab USING 'H'
                                       'ADD_PACK_LIMIT'
                              CHANGING lt_celltab.
            CLEAR gt_level1-add_pack_limit.
          ELSE.
            PERFORM fill_celltab USING 'D'
                                       'ADD_PACK_LIMIT'
                              CHANGING lt_celltab.
          ENDIF.
        ENDIF.

        INSERT LINES OF lt_celltab INTO TABLE gt_level1-celltab.
        MODIFY gt_level1 INDEX lv_index.
      ENDLOOP.

      CALL METHOD g_grid->get_frontend_layout
        IMPORTING
          es_layout = ls_layout.

      CALL METHOD g_grid->get_frontend_fieldcatalog
        IMPORTING
          et_fieldcatalog = lt_fieldcat.

      SORT gt_level1 BY bukrs expense_type appr_level.
      CALL METHOD g_grid->set_table_for_first_display
        EXPORTING
          i_save          = 'A'
          is_layout       = ls_layout
        CHANGING
          it_fieldcatalog = lt_fieldcat
          it_outtab       = gt_level1[].

    ELSEIF g_evt_grid->gridname = c_fcoaview.

      LOOP AT gt_ncoa1.
        lv_index = sy-tabix.
        CLEAR: lt_celltab,
               gt_ncoa1-celltab.
        REFRESH: lt_celltab,
                 gt_ncoa1-celltab.

        IF NOT gt_ncoa1-comp_code IS INITIAL.
          PERFORM fill_celltab USING 'H'
                                     'COMP_CODE'
                            CHANGING lt_celltab.
        ENDIF.

        IF NOT gt_ncoa1-appr_level IS INITIAL.
          PERFORM fill_celltab USING 'H'
                                     'APPR_LEVEL'
                            CHANGING lt_celltab.
        ENDIF.

        IF NOT gt_ncoa1-opt_userid IS INITIAL.
          PERFORM fill_celltab USING 'H'
                                     'OPT_USERID'
                            CHANGING lt_celltab.
        ENDIF.

        INSERT LINES OF lt_celltab INTO TABLE gt_ncoa1-celltab.
        MODIFY gt_ncoa1 INDEX lv_index.

      ENDLOOP.

      CALL METHOD g_grid->get_frontend_layout
        IMPORTING
          es_layout = ls_layout.

      CALL METHOD g_grid->get_frontend_fieldcatalog
        IMPORTING
          et_fieldcatalog = lt_fieldcat.

      CALL METHOD g_grid->set_table_for_first_display
        EXPORTING
          i_save          = 'A'
          is_layout       = ls_layout
        CHANGING
          it_fieldcatalog = lt_fieldcat
          it_outtab       = gt_ncoa1[].

* Start of INS VIMI-9049
    ELSEIF g_evt_grid->gridname = c_fapprcoa.
* Begin-D-VIMI-17454
*      LOOP AT gt_ncoa3.
*        lv_index = sy-tabix.
*        gt_ncoa3-line_no = sy-tabix.                        "VIMI-16148
*        CLEAR wa_acoa1.
*        MOVE-CORRESPONDING gt_ncoa3 TO wa_acoa1.
*        READ TABLE lt_acoa INTO wa_acoa FROM wa_acoa1.
*        IF sy-subrc NE 0.
*          CONTINUE.
*        ENDIF.
*
*        CLEAR: lt_celltab,
*               gt_ncoa3-celltab.
*        REFRESH: lt_celltab,
*                 gt_ncoa3-celltab.
*
*        IF NOT gt_ncoa3-comp_code IS INITIAL.
*          PERFORM fill_celltab USING 'H'
*                                     'COMP_CODE'
*                            CHANGING lt_celltab.
*        ENDIF.
*
**        IF NOT gt_ncoa3-appr_level IS INITIAL.
*        PERFORM fill_celltab USING 'H'
*                                   'DESCR'
*                          CHANGING lt_celltab.
**        ENDIF.
*
*        IF NOT gt_ncoa3-opt_userid IS INITIAL.
*          PERFORM fill_celltab USING 'H'
*                                     'OPT_USERID'
*                            CHANGING lt_celltab.
*        ENDIF.
*
*        INSERT LINES OF lt_celltab INTO TABLE gt_ncoa3-celltab.
*        MODIFY gt_ncoa3 INDEX lv_index.
*
*      ENDLOOP.
* End-D-VIMI-17454

* Begin-I-VIMI-17454
      CLEAR: lt_celltab.
      REFRESH: lt_celltab.

      PERFORM fill_celltab USING 'H' 'COMP_CODE'  CHANGING lt_celltab.
      PERFORM fill_celltab USING 'H' 'DESCR'      CHANGING lt_celltab.
      PERFORM fill_celltab USING 'H' 'OPT_USERID' CHANGING lt_celltab.

      LOOP AT gt_ncoa3.
        lv_index = sy-tabix.
        IF gt_ncoa3-celltab[] IS INITIAL.
* Set display ALV Cell Properties for New Records...
          INSERT LINES OF lt_celltab INTO TABLE gt_ncoa3-celltab.
          MODIFY gt_ncoa3 INDEX lv_index TRANSPORTING celltab.
        ENDIF.
      ENDLOOP.
* End-D-VIMI-17454

      CALL METHOD g_grid->get_frontend_layout
        IMPORTING
          es_layout = ls_layout.

      CALL METHOD g_grid->get_frontend_fieldcatalog
        IMPORTING
          et_fieldcatalog = lt_fieldcat.

*      SORT gt_ncoa3 BY comp_code appr_level. "VIMI-16594
      SORT: gt_ncoa3 BY mandt comp_code appr_level opt_userid counter. "VIMI-16594
      PERFORM add_counter_to_ncoa USING gt_ncoa3[].         "VIMI-16594

      CALL METHOD g_grid->set_table_for_first_display
        EXPORTING
          i_save          = 'A'
          is_layout       = ls_layout
        CHANGING
          it_fieldcatalog = lt_fieldcat
          it_outtab       = gt_ncoa3[]
          it_filter       = gt_filter[].                    "VIMI-16582

    ELSEIF g_evt_grid->gridname = c_fcodcoa.
* Begin-D-VIMI-17454
*      LOOP AT gt_ncoa2.
*        lv_index = sy-tabix.
*        gt_ncoa2-line_no = sy-tabix.                        "VIMI-16148
*        CLEAR wa_ccoa1.
*        MOVE-CORRESPONDING gt_ncoa2 TO wa_ccoa1.
*        READ TABLE lt_ccoa INTO wa_ccoa FROM wa_ccoa1.
*        IF sy-subrc NE 0.
*          CONTINUE.
*        ENDIF.
*
*        CLEAR: lt_celltab,
*               gt_ncoa2-celltab.
*        REFRESH: lt_celltab,
*                 gt_ncoa2-celltab.
*
*        IF NOT gt_ncoa2-comp_code IS INITIAL.
*          PERFORM fill_celltab USING 'H'
*                                     'COMP_CODE'
*                            CHANGING lt_celltab.
*        ENDIF.
*
**        IF NOT gt_ncoa2-appr_level IS INITIAL.
*        PERFORM fill_celltab USING 'H'
*                                   'DESCR'
*                          CHANGING lt_celltab.
**        ENDIF.
*
*        IF NOT gt_ncoa2-opt_userid IS INITIAL.
*          PERFORM fill_celltab USING 'H'
*                                     'OPT_USERID'
*                            CHANGING lt_celltab.
*        ENDIF.
*
*        INSERT LINES OF lt_celltab INTO TABLE gt_ncoa2-celltab.
*        MODIFY gt_ncoa2 INDEX lv_index.
*
*      ENDLOOP.
* End-D-VIMI-17454

* Begin-I-VIMI-17454
      CLEAR: lt_celltab.
      REFRESH: lt_celltab.

      PERFORM fill_celltab USING 'H' 'COMP_CODE'  CHANGING lt_celltab.
      PERFORM fill_celltab USING 'H' 'DESCR'      CHANGING lt_celltab.
      PERFORM fill_celltab USING 'H' 'OPT_USERID' CHANGING lt_celltab.

      LOOP AT gt_ncoa2.
        lv_index = sy-tabix.
        IF gt_ncoa2-celltab[] IS INITIAL.
* Set display ALV Cell Properties for New Records(if any)...
          INSERT LINES OF lt_celltab INTO TABLE gt_ncoa2-celltab.
          MODIFY gt_ncoa2 INDEX lv_index TRANSPORTING celltab.
        ENDIF.
      ENDLOOP.
* End-D-VIMI-17454

      CALL METHOD g_grid->get_frontend_layout
        IMPORTING
          es_layout = ls_layout.

      CALL METHOD g_grid->get_frontend_fieldcatalog
        IMPORTING
          et_fieldcatalog = lt_fieldcat.

*      SORT gt_ncoa2 BY comp_code appr_level. "VIMI-16594
      SORT: gt_ncoa2 BY mandt comp_code appr_level opt_userid counter. "VIMI-16594
      PERFORM add_counter_to_ncoa USING gt_ncoa2[].         "VIMI-16594

      CALL METHOD g_grid->set_table_for_first_display
        EXPORTING
          i_save          = 'A'
          is_layout       = ls_layout
        CHANGING
          it_fieldcatalog = lt_fieldcat
          it_outtab       = gt_ncoa2[]
          it_filter       = gt_filter[].                    "VIMI-16582
* End of INS VIMI-9049
    ENDIF.
  ENDIF.

ENDFORM.                    " REDISP_300_GRID

*&---------------------------------------------------------------------*
*&      Form  CHANGEDOC_APPR_LEVEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM changedoc_appr_level.

  DATA: lv_lines_old  TYPE sy-tabix,
        lv_lines_new  TYPE sy-tabix,
        lt_level_ins  TYPE TABLE OF /opt/yappr_limit,
        lt_level_del  TYPE TABLE OF /opt/yappr_limit,
        lt_level_nupd TYPE TABLE OF /opt/yappr_limit,
        lt_level_oupd TYPE TABLE OF /opt/yappr_limit,
        lwa_level     TYPE /opt/yappr_limit,
        lv_date       TYPE sy-datum,
        lv_time       TYPE sy-uzeit,
        lv_timestamp  TYPE timestamp,
        lv_utczone    TYPE tzonref-tzone,
        lv_sys_tzone  TYPE tzonref-tzone.

* Start of INS VIMI-10153
  IF sy-repid = '/OPT/COA_UPLOAD_REPORT' AND
     NOT gv_fmode IS INITIAL
* Begin of VIMI-19181
     AND gv_fmodelog IS INITIAL.
    REFRESH gt_level_old.
*    CLEAR gt_level_old.
* End of VIMI-19181
  ENDIF.
* End of INS VIMI-10153

  DESCRIBE TABLE gt_level_old LINES lv_lines_old.
  DESCRIBE TABLE gt_level LINES lv_lines_new.


  LOOP AT gt_level_old.
* Read with the new table with the key fields
    READ TABLE gt_level WITH KEY bukrs    = gt_level_old-bukrs
                             appr_level   = gt_level_old-appr_level
                             expense_type = gt_level_old-expense_type.
    IF sy-subrc = 0.
* If both the records are same no need write change documents
      IF gt_level = gt_level_old.
        CONTINUE.
      ELSE.
* If both the records are not same that record is changed
* Need to send new record and old record with update indicator
        MOVE-CORRESPONDING gt_level TO lwa_level.
        APPEND lwa_level TO lt_level_nupd.
        CLEAR lwa_level.
        MOVE-CORRESPONDING gt_level_old TO lwa_level.
        APPEND lwa_level TO lt_level_oupd.
        CLEAR lwa_level.
      ENDIF.
    ELSE.
* If the record is not exists in the new record
* Need to send the old record with deletiong indicator
      MOVE-CORRESPONDING gt_level_old TO lwa_level.
      APPEND lwa_level TO lt_level_del.
      CLEAR lwa_level.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_level.
* Read the old values with new values by using key fields
    READ TABLE gt_level_old WITH KEY bukrs = gt_level-bukrs
                                appr_level = gt_level-appr_level
*                              expense_type = gt_levelold-expense_type.                  "VIMI-9530
                              expense_type = gt_level-expense_type. "VIMI-9530
    IF sy-subrc NE 0.
* if no record exist means new record has created
* Send the new values with insert indicator
      MOVE-CORRESPONDING gt_level TO lwa_level.
      APPEND lwa_level TO lt_level_ins.
      CLEAR lwa_level.
    ENDIF.
  ENDLOOP.

*Change into storing time
  SELECT SINGLE tzonesys INTO lv_sys_tzone FROM ttzcu.
  CALL FUNCTION 'IB_CONVERT_INTO_TIMESTAMP'
    EXPORTING
      i_datlo     = sy-datum
      i_timlo     = sy-uzeit
      i_tzone     = lv_sys_tzone
    IMPORTING
      e_timestamp = lv_timestamp.

  CONVERT TIME STAMP lv_timestamp
          TIME  ZONE lv_utczone
          INTO  DATE lv_date
                TIME lv_time.

  IF NOT lt_level_nupd IS INITIAL AND
     NOT lt_level_oupd IS INITIAL.
    PERFORM write_doc TABLES lt_level_nupd
                             lt_level_oupd
                       USING 'U'
                             lv_date
                             lv_time.
  ENDIF.

  CLEAR: lt_level_nupd,
         lt_level_oupd.

  IF NOT lt_level_ins IS INITIAL.
    PERFORM write_doc TABLES lt_level_oupd
                             lt_level_ins
                       USING 'I'
                             lv_date
                             lv_time.
  ENDIF.

  IF NOT lt_level_del IS INITIAL.
    PERFORM write_doc TABLES lt_level_nupd
                             lt_level_del
                       USING 'D'
                             lv_date
                             lv_time.
  ENDIF.

ENDFORM.                    " CHANGEDOC_APPR_LEVEL
*&---------------------------------------------------------------------*
*&      Form  WRITE_DOC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM write_doc TABLES lt_new STRUCTURE /opt/yappr_limit
                      lt_old STRUCTURE /opt/yappr_limit
               USING  p_ind
                      p_date
                      p_time.

  DATA: lt_cdtxt TYPE TABLE OF cdtxt.

* Begin of VIMI-18347/snittala
  IF NOT lt_new[] IS INITIAL.
    SORT lt_new .
    DELETE ADJACENT DUPLICATES FROM lt_new.
  ENDIF.
  IF NOT lt_old[] IS INITIAL.
    SORT lt_old.
    DELETE ADJACENT DUPLICATES FROM lt_old.
  ENDIF.
* End of VIMI-18347/snittala

  CALL FUNCTION '/OPT/VIM_APPLMT_WRITE_DOCUMENT'
    EXPORTING
      objectid                = '/OPT/VIM_APPLMT'
      tcode                   = sy-tcode
      utime                   = p_time
      udate                   = p_date
      username                = sy-uname
*     PLANNED_CHANGE_NUMBER   = ' '
      object_change_indicator = p_ind
*     PLANNED_OR_REAL_CHANGES = ' '
*     NO_CHANGE_POINTERS      = ' '
*     UPD_ICDTXT_VIM_APPLMT   = ' '
      upd_opt_appr_limit      = 'U'
    TABLES
      icdtxt_vim_applmt       = lt_cdtxt
      xopt_appr_limit         = lt_new
      yopt_appr_limit         = lt_old.

ENDFORM.                    " WRITE_DOC
* End of INS VIMI-
*&---------------------------------------------------------------------*
*&      Form  INIT_122
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM init_122.
  IF g_sview IS INITIAL.
    g_sview-prog = sy-repid.
    g_sview-dynr = '0123'.
  ELSE.
    g_sview-prog = sy-repid.
    CASE sy-ucomm.
      WHEN c_fcodcoa.
        g_sview-dynr = '0123'.
      WHEN c_fapprcoa.
        g_sview-dynr = '0124'.
    ENDCASE.
  ENDIF.
ENDFORM.                                                    " INIT_122
*&---------------------------------------------------------------------*
*&      Form  PBO_SUB_TABSTRIP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM pbo_sub_tabstrip .
  CASE sy-ucomm.
    WHEN c_fcodcoa.
      ts_coaview_det1-activetab = c_fcodcoa .
    WHEN c_fapprcoa.
      ts_coaview_det1-activetab = c_fapprcoa .
*    WHEN OTHERS.
*      CLEAR g_evt_grid .
  ENDCASE.
ENDFORM.                    " PBO_SUB_TABSTRIP
*&---------------------------------------------------------------------*
*&      Form  INIT_123
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM init_123 .
  DATA lt_fieldcat TYPE lvc_t_fcat.
  DATA ls_layout   TYPE lvc_s_layo.
  DATA lt_sort     TYPE lvc_t_sort WITH HEADER LINE.
  DATA l_row       TYPE lvc_s_roid.
  DATA l_length    TYPE i.
  DATA: lt_celltab TYPE lvc_t_styl,
        lv_index   TYPE sy-tabix.
  DATA ls_variant  TYPE disvariant.
  CHECK g_cgrid IS INITIAL.

  DESCRIBE TABLE gt_coa LINES l_length.
  IF l_length LT 15.
    l_length = 15.
  ENDIF.

  PERFORM initialize_grid USING l_length.

  g_evt_grid->gridname = c_fcodcoa.

  CALL METHOD g_helper->get_fieldcat
    EXPORTING
      i_gridname = c_fcoaview
    IMPORTING
      t_fcat     = lt_fieldcat.

  ls_layout-grid_title = TEXT-t17.
*  ls_layout-cwidth_opt = 'X'. "VIMI-9049

  lt_sort-spos      = 1.
  lt_sort-fieldname = 'COMP_CODE'.
  lt_sort-up        = 'X'.
  APPEND lt_sort.
  lt_sort-spos      = 2.
  lt_sort-fieldname = 'APPR_LEVEL'.
  lt_sort-up        = 'X'.
  APPEND lt_sort.
*  lt_sort-spos      = 1.
*  lt_sort-fieldname = 'OPT_USERID'.
*  lt_sort-up        = 'X'.
*  APPEND lt_sort.
*  lt_sort-spos      = 2.
*  lt_sort-fieldname = 'COUNTER'.
*  lt_sort-up        = 'X'.
*  APPEND lt_sort.


* Begin of VIMI-2650 - 5.2 HF6 -cnicklas
  ls_variant-report = sy-repid.
  ls_variant-handle = sy-dynnr.
* Begin of VIMI-2650 - 5.2 HF6 -cnicklas
*  IF sy-repid NE '/OPT/AR_COA'.                    "VIMI-7380
*    CALL METHOD g_grid->set_table_for_first_display
*      EXPORTING
*        i_save          = 'A'
*        is_variant      = ls_variant "VIMI-2650 - 5.2 HF6 -cnicklas
*        is_layout       = ls_layout
*      CHANGING
*        it_fieldcatalog = lt_fieldcat
*        it_sort         = lt_sort[]
*        it_outtab       = gt_coa[].
** Start of INS VIMI-7380
*  ELSE.
  ls_layout-stylefname = 'CELLTAB'.
* Start of INS VIMI-9049
*  CLEAR gt_ncoa1.
*  REFRESH gt_ncoa1.
*  gt_ncoa1[] = gt_ncoa2[].
* End of INS VIMI-9049

* Start of DEL VIMI-9049
*  LOOP AT gt_ncoa1.
*    lv_index = sy-tabix.
*    CLEAR: lt_celltab,
*           gt_ncoa1-celltab.
*    REFRESH: lt_celltab,
*             gt_ncoa1-celltab.
*
*    IF NOT gt_ncoa1-comp_code IS INITIAL.
*      PERFORM fill_celltab USING 'H'
*                                 'COMP_CODE'
*                        CHANGING lt_celltab.
**    ENDIF.                                                "VIMI-9049
*
**    IF NOT gt_ncoa1-appr_level IS INITIAL.                "VIMI-9049
*      PERFORM fill_celltab USING 'H'
*                                 'APPR_LEVEL'
*                        CHANGING lt_celltab.
*    ENDIF.
*
*    IF NOT gt_ncoa1-opt_userid IS INITIAL.
*      PERFORM fill_celltab USING 'H'
*                                 'OPT_USERID'
*                        CHANGING lt_celltab.
*    ENDIF.
*
*    INSERT LINES OF lt_celltab INTO TABLE gt_ncoa1-celltab.
*    MODIFY gt_ncoa1 INDEX lv_index.
*
*  ENDLOOP.
* End of DEL VIMI-9049
* Start of INS VIMI-9049
  LOOP AT gt_ncoa2.
    lv_index = sy-tabix.
    CLEAR: lt_celltab,
           gt_ncoa2-celltab.
    REFRESH: lt_celltab,
             gt_ncoa2-celltab.

    IF NOT gt_ncoa2-comp_code IS INITIAL.
      PERFORM fill_celltab USING 'H'
                                 'COMP_CODE'
                        CHANGING lt_celltab.
*    ENDIF.                                                "VIMI-9049

*    IF NOT gt_ncoa1-appr_level IS INITIAL.                "VIMI-9049
      PERFORM fill_celltab USING 'H'
                                 'DESCR'
                        CHANGING lt_celltab.
    ENDIF.

    IF NOT gt_ncoa2-opt_userid IS INITIAL.
      PERFORM fill_celltab USING 'H'
                                 'OPT_USERID'
                        CHANGING lt_celltab.
    ENDIF.

    INSERT LINES OF lt_celltab INTO TABLE gt_ncoa2-celltab.
    MODIFY gt_ncoa2 INDEX lv_index.

  ENDLOOP.
* End of INS VIMI-9049
  SORT: gt_ncoa2 BY mandt comp_code appr_level opt_userid counter. "VIMI-16594
  PERFORM add_counter_to_ncoa CHANGING gt_ncoa2[].          "VIMI-16480

  CALL METHOD g_grid->set_table_for_first_display
    EXPORTING
      i_save          = 'A'
      is_variant      = ls_variant "VIMI-2650 - 5.2 HF6 -cnicklas
      is_layout       = ls_layout
    CHANGING
      it_fieldcatalog = lt_fieldcat
      it_sort         = lt_sort[]
*     it_outtab       = gt_ncoa1[].                       "VIMI-9049
      it_outtab       = gt_ncoa2[]                          "VIMI-9049
      it_filter       = gt_filter[].                        "VIMI-16582
*  ENDIF.
** End of INS VIMI-7380
*  IF sy-repid NE '/OPT/AR_COA'.                    "VIMI-7380
*    READ TABLE gt_coa WITH KEY opt_userid = g_helper->g_userid.
*    IF sy-subrc EQ 0.
*      l_row-row_id = sy-tabix.
*      CALL METHOD g_grid->set_current_cell_via_id
*        EXPORTING
*          is_row_no = l_row.
*    ENDIF.
* Start of INS VIMI-7380
*  ELSE.
  READ TABLE gt_ncoa WITH KEY opt_userid = g_helper->g_userid.
  IF sy-subrc EQ 0.
    l_row-row_id = sy-tabix.
    CALL METHOD g_grid->set_current_cell_via_id
      EXPORTING
        is_row_no = l_row.
  ENDIF.
*  ENDIF.
* End of INS VIMI-7380

* begin VIMI-13155
  CALL METHOD cl_gui_cfw=>flush
    EXCEPTIONS
      OTHERS = 1.
* end VIMI-13155
  CALL METHOD g_grid->set_ready_for_input
    EXPORTING
      i_ready_for_input = '1'.
ENDFORM.                                                    " INIT_123
*&---------------------------------------------------------------------*
*&      Form  INIT_124
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM init_124 .
  DATA lt_fieldcat TYPE lvc_t_fcat.
  DATA ls_layout   TYPE lvc_s_layo.
  DATA lt_sort     TYPE lvc_t_sort WITH HEADER LINE.
  DATA l_row       TYPE lvc_s_roid.
  DATA l_length    TYPE i.
  DATA: lt_celltab TYPE lvc_t_styl,
        lv_index   TYPE sy-tabix.
  DATA ls_variant  TYPE disvariant.
  CHECK g_cgrid IS INITIAL.

  DESCRIBE TABLE gt_coa LINES l_length.
  IF l_length LT 15.
    l_length = 15.
  ENDIF.

  PERFORM initialize_grid USING l_length.

  g_evt_grid->gridname = c_fapprcoa.

  CALL METHOD g_helper->get_fieldcat
    EXPORTING
      i_gridname = c_fcoaview
    IMPORTING
      t_fcat     = lt_fieldcat.

  ls_layout-grid_title = TEXT-t18.
*  ls_layout-cwidth_opt = 'X'. " VIMI-9049
  lt_sort-spos      = 1.
  lt_sort-fieldname = 'COMP_CODE'.
  lt_sort-up        = 'X'.
  APPEND lt_sort.
  lt_sort-spos      = 2.
  lt_sort-fieldname = 'APPR_LEVEL'.
  lt_sort-up        = 'X'.
  APPEND lt_sort.
*  lt_sort-spos      = 1.
*  lt_sort-fieldname = 'OPT_USERID'.
*  lt_sort-up        = 'X'.
*  APPEND lt_sort.
*  lt_sort-spos      = 2.
*  lt_sort-fieldname = 'COUNTER'.
*  lt_sort-up        = 'X'.
*  APPEND lt_sort.                                           "VIMI-7380
* Begin of VIMI-2650 - 5.2 HF6 -cnicklas
  ls_variant-report = sy-repid.
  ls_variant-handle = sy-dynnr.
* Begin of VIMI-2650 - 5.2 HF6 -cnicklas
*  IF sy-repid NE '/OPT/AR_COA'.                    "VIMI-7380
*    CALL METHOD g_grid->set_table_for_first_display
*      EXPORTING
*        i_save          = 'A'
*        is_variant      = ls_variant "VIMI-2650 - 5.2 HF6 -cnicklas
*        is_layout       = ls_layout
*      CHANGING
*        it_fieldcatalog = lt_fieldcat
*        it_sort         = lt_sort[]
*        it_outtab       = gt_coa[].
** Start of INS VIMI-7380
*  ELSE.
  ls_layout-stylefname = 'CELLTAB'.
* Start of INS VIMI-9049
*  CLEAR gt_ncoa1.
*  REFRESH gt_ncoa1.
*  gt_ncoa1[] = gt_ncoa3[].
* End of INS VIMI-9049

* Start of DEL VIMI-9049
*  LOOP AT gt_ncoa1.
*    lv_index = sy-tabix.
*    CLEAR: lt_celltab,
*           gt_ncoa1-celltab.
*    REFRESH: lt_celltab,
*             gt_ncoa1-celltab.
*
*    IF NOT gt_ncoa1-comp_code IS INITIAL.
*      PERFORM fill_celltab USING 'H'
*                                 'COMP_CODE'
*                        CHANGING lt_celltab.
*    ENDIF.
*
*    IF NOT gt_ncoa1-appr_level IS INITIAL.
*      PERFORM fill_celltab USING 'H'
*                                 'APPR_LEVEL'
*                        CHANGING lt_celltab.
*    ENDIF.
*
*    IF NOT gt_ncoa1-opt_userid IS INITIAL.
*      PERFORM fill_celltab USING 'H'
*                                 'OPT_USERID'
*                        CHANGING lt_celltab.
*    ENDIF.
*
*    INSERT LINES OF lt_celltab INTO TABLE gt_ncoa1-celltab.
*    MODIFY gt_ncoa1 INDEX lv_index.
*
*  ENDLOOP.
* End of DEL VIMI-9049

* Start of INS VIMI-9049
  LOOP AT gt_ncoa3.
    lv_index = sy-tabix.
    CLEAR: lt_celltab,
           gt_ncoa3-celltab.
    REFRESH: lt_celltab,
             gt_ncoa3-celltab.

    IF NOT gt_ncoa3-comp_code IS INITIAL.
      PERFORM fill_celltab USING 'H'
                                 'COMP_CODE'
                        CHANGING lt_celltab.
    ENDIF.

    IF NOT gt_ncoa3-appr_level IS INITIAL.
      PERFORM fill_celltab USING 'H'
                                 'DESCR'
                        CHANGING lt_celltab.
    ENDIF.

    IF NOT gt_ncoa3-opt_userid IS INITIAL.
      PERFORM fill_celltab USING 'H'
                                 'OPT_USERID'
                        CHANGING lt_celltab.
    ENDIF.

    INSERT LINES OF lt_celltab INTO TABLE gt_ncoa3-celltab.
    MODIFY gt_ncoa3 INDEX lv_index.

  ENDLOOP.
* End of INS VIMI-9049
*  SORT gt_ncoa3 BY comp_code appr_level. "VIMI-16594
  SORT: gt_ncoa3 BY mandt comp_code appr_level opt_userid counter. "VIMI-16594
  PERFORM add_counter_to_ncoa CHANGING gt_ncoa3[].          "VIMI-16480

  CALL METHOD g_grid->set_table_for_first_display
    EXPORTING
      i_save          = 'A'
      is_variant      = ls_variant "VIMI-2650 - 5.2 HF6 -cnicklas
      is_layout       = ls_layout
    CHANGING
      it_fieldcatalog = lt_fieldcat
      it_sort         = lt_sort[]
*     it_outtab       = gt_ncoa1[].                       "VIMI-9049
      it_outtab       = gt_ncoa3[]                          "VIMI-9049
      it_filter       = gt_filter[].                        "VIMI-16582
*  ENDIF.
** End of INS VIMI-7380
*  IF sy-repid NE '/OPT/AR_COA'.                    "VIMI-7380
*    READ TABLE gt_coa WITH KEY opt_userid = g_helper->g_userid.
*    IF sy-subrc EQ 0.
*      l_row-row_id = sy-tabix.
*      CALL METHOD g_grid->set_current_cell_via_id
*        EXPORTING
*          is_row_no = l_row.
*    ENDIF.
* Start of INS VIMI-7380
*  ELSE.
  READ TABLE gt_ncoa WITH KEY opt_userid = g_helper->g_userid.
  IF sy-subrc EQ 0.
    l_row-row_id = sy-tabix.
    CALL METHOD g_grid->set_current_cell_via_id
      EXPORTING
        is_row_no = l_row.
  ENDIF.
*  ENDIF.
* End of INS VIMI-7380

* begin VIMI-13155
  CALL METHOD cl_gui_cfw=>flush
    EXCEPTIONS
      OTHERS = 1.
* end VIMI-13155
  CALL METHOD g_grid->set_ready_for_input
    EXPORTING
      i_ready_for_input = '1'.
ENDFORM.                                                    " INIT_124
*&---------------------------------------------------------------------*
*&      Form  INIT_400
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM init_400 .

  DATA lt_fieldcat TYPE lvc_t_fcat.
  DATA ls_layout   TYPE lvc_s_layo.
  DATA lt_sort     TYPE lvc_t_sort WITH HEADER LINE.
  DATA l_row       TYPE lvc_s_roid.
  DATA l_length    TYPE i.
  DATA: lt_celltab TYPE lvc_t_styl,
        lv_index   TYPE sy-tabix.
  DATA ls_variant  TYPE disvariant.
  DATA: lv_afs_id TYPE /opt/a_afs_id_de.

* begin VIMI-11026
  IF /opt/afs_coder-afs_id <> gv_afs_id_save.
    PERFORM get_coder_data.
    PERFORM free_objects. "VIMI-25245/szeeshan
  ENDIF.
* end VIMI-11026

  CHECK NOT /opt/afs_coder-afs_id IS INITIAL.

  SELECT SINGLE afs_id coder_det INTO (lv_afs_id , g_constant)
         FROM   /opt/at_afs
         WHERE  afs_id = /opt/afs_coder-afs_id.
  IF sy-subrc NE 0.
    CLEAR g_cgrid.
    MESSAGE s000(/opt/vim_m_class) WITH TEXT-t23 /opt/afs_coder-afs_id.
    EXIT.
  ELSE.
    IF g_constant = 'S'.
      CLEAR: g_cgrid,
             gt_coder_lba.
      REFRESH: gt_coder_lba.
      MESSAGE i000 WITH TEXT-i01 g_constant.
      EXIT.
    ENDIF.
  ENDIF.

  IF g_edit IS INITIAL AND gt_coder_lba[] IS INITIAL.
    MESSAGE s012(/opt/vim_m_class) WITH /opt/afs_coder-afs_id.
    EXIT.
  ENDIF.

  CHECK g_cgrid IS INITIAL.

  DESCRIBE TABLE gt_coder_lba LINES l_length.
  IF l_length LT 15.
    l_length = 15.
  ENDIF.

  PERFORM initialize_grid USING l_length.

  g_evt_grid->gridname = c_fcoderview.

  CALL METHOD g_helper->get_fieldcat
    EXPORTING
      i_gridname = c_fcoderview
    IMPORTING
      t_fcat     = lt_fieldcat.

*  ls_layout-cwidth_opt = 'X'.

*  lt_sort-spos      = 1.
*  lt_sort-fieldname = 'CODER_ID'.
*  lt_sort-up        = 'X'.
*  APPEND lt_sort.
*  lt_sort-spos      = 2.
*  lt_sort-fieldname = 'COUNTER'.
*  lt_sort-up        = 'X'.
*  APPEND lt_sort.

  ls_layout-grid_title = TEXT-t32.
* Begin of VIMI-2650 - 5.2 HF6 -cnicklas
  ls_variant-report = sy-repid.
  ls_variant-handle = sy-dynnr.
* Begin of VIMI-2650 - 5.2 HF6 -cnicklas
  CALL METHOD g_grid->set_table_for_first_display
    EXPORTING
*     i_save          = 'A'
*     is_variant      = ls_variant "VIMI-2650 - 5.2 HF6 -cnicklas
      is_layout       = ls_layout
    CHANGING
      it_fieldcatalog = lt_fieldcat
      it_sort         = lt_sort[]
      it_outtab       = gt_coder_lba[].

* begin VIMI-13155
  CALL METHOD cl_gui_cfw=>flush
    EXCEPTIONS
      OTHERS = 1.
* end VIMI-13155
  CALL METHOD g_grid->set_ready_for_input
    EXPORTING
      i_ready_for_input = '1'.

ENDFORM.                                                    " INIT_400
*&---------------------------------------------------------------------*
*&      Form  GET_DOCTYPE_F4
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM get_doctype_f4 .

  DATA: BEGIN OF lt_afs_id OCCURS 0,
          afs_id TYPE  /opt/afs_coder-afs_id,
          descr  TYPE text50,
        END OF lt_afs_id,
        wa_afs_id TYPE /opt/afs_coder-afs_id.
  DATA: lt_return TYPE TABLE OF ddshretval WITH HEADER LINE.

  SELECT afs_id
         description
    FROM /opt/at_afst
    INTO TABLE lt_afs_id
   WHERE spras = sy-langu.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'AFS_ID'
      dynpprog        = sy-repid
      dynpnr          = sy-dynnr
      dynprofield     = '/OPT/AFS_CODER-AFS_ID'
      value_org       = 'S'
    TABLES
      value_tab       = lt_afs_id
      return_tab      = lt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3.
  IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.                    " GET_DOCTYPE_F4
*&---------------------------------------------------------------------*
*&      Form  CHANGE_TEXT
*&---------------------------------------------------------------------*
*       VIMI-9049
*----------------------------------------------------------------------*
FORM change_text  USING p_text
               CHANGING p_col_head.

  CONCATENATE p_col_head
              p_text
         INTO p_col_head
    SEPARATED BY space.

ENDFORM.                    " CHANGE_TEXT
*&---------------------------------------------------------------------*
*&      Form  VALIDATE_LCODER_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM validate_lcoder_data  CHANGING p_subrc.
  DATA: l_msg     TYPE text132,
        l_cnt     TYPE i,
        l_subrc   TYPE sy-subrc,
        ls_coder  TYPE /opt/afs_coder,
        ls_coder1 TYPE /opt/afs_coder,
        l_tabx1   TYPE sy-tabix,
        l_flag    TYPE c,
        lt_coder  LIKE TABLE OF /opt/afs_coder INITIAL SIZE 0.

  DATA:
    lt_coder_save TYPE STANDARD TABLE OF /opt/afs_coder,
    lv_tabix      TYPE sytabix,
    lv_maxtabix   TYPE sytabix.

  DATA: l_dflag TYPE c.                                "patch 560/2

* The global GT_TABLE will contain temporarily all the lines
* including those filtered out. When issuing messages that show
* the coder table index, in case the entry is one of those filtered,
* the table index in the message will be set to 99999.
* lv_maxtabix keeps the index boundary of the original, shown entries.
  DESCRIBE TABLE gt_coder_lba LINES lv_maxtabix.
  lt_coder_save[] = gt_coder_lba[].
  APPEND LINES OF gt_lcoder_filtered TO gt_coder_lba.

  CHECK NOT gt_coder_lba[] IS INITIAL.

  APPEND LINES OF gt_coder_lba TO lt_coder.

  DATA lt_unique_tab_r LIKE SORTED TABLE OF gt_coder_lba WITH UNIQUE KEY coder_id requester_id.
  DATA lt_unique_tab_b LIKE SORTED TABLE OF gt_coder_lba WITH UNIQUE KEY coder_id company_code requester_id.
  DATA lt_unique_tab_c LIKE SORTED TABLE OF gt_coder_lba WITH UNIQUE KEY coder_id company_code.
  DATA lt_default_tab_r LIKE SORTED TABLE OF gt_coder_lba WITH UNIQUE KEY default_flag requester_id.
  DATA lt_default_tab_b LIKE SORTED TABLE OF gt_coder_lba WITH UNIQUE KEY default_flag company_code requester_id.
  DATA lt_default_tab_c LIKE SORTED TABLE OF gt_coder_lba WITH UNIQUE KEY default_flag company_code.
  FIELD-SYMBOLS <fs_unique_tab> TYPE ANY TABLE.
  FIELD-SYMBOLS <fs_default_tab> TYPE ANY TABLE.
  FIELD-SYMBOLS <fs_value> TYPE any.
  DATA lv_msg(80) TYPE c.
  DATA lv_field_name(80) TYPE c.
  DATA lv_field_name2(80) TYPE c.
  DATA lv_value(80) TYPE c.

  CLEAR: g_tabname,                                         " VIMI-9049
         g_tab_desc.                                        " VIMI-9049
  g_tabname = c_fcoderview.
  g_tab_desc = TEXT-t32.
  IF g_constant = 'R'.
    ASSIGN lt_unique_tab_r TO <fs_unique_tab>.
    ASSIGN lt_default_tab_r TO <fs_default_tab>.
    lv_field_name = 'REQUESTER_ID'.
    READ TABLE gt_coder_lba WITH KEY requester_id = space.
    IF sy-subrc = 0.
      lv_tabix = sy-tabix.
      IF lv_tabix > lv_maxtabix.
        lv_tabix = 99999.
      ENDIF.
      PERFORM display_grid_message USING lv_field_name lv_tabix
                                                     g_tabname"'REQUESTER_ID'
                                                     '52'
                                                     ' ' .
      p_subrc = 4.
    ENDIF.
  ELSEIF g_constant = 'B'.
    ASSIGN lt_unique_tab_b TO <fs_unique_tab>.
    ASSIGN lt_default_tab_b TO <fs_default_tab>.
    lv_field_name = 'REQUESTER_ID'.
    lv_field_name2 = 'COMPANY_CODE'.
    READ TABLE gt_coder_lba WITH KEY requester_id = space.
    IF sy-subrc = 0.
      lv_tabix = sy-tabix.
      IF lv_tabix > lv_maxtabix.
        lv_tabix = 99999.
      ENDIF.
      PERFORM display_grid_message USING lv_field_name lv_tabix
                                                     g_tabname "'REQUESTER_ID'
                                                      '52'
                                                     ' ' .
      p_subrc = 4.
    ENDIF.
    READ TABLE gt_coder_lba WITH KEY company_code = space.
    IF sy-subrc = 0.
      lv_tabix = sy-tabix.
      IF lv_tabix > lv_maxtabix.
        lv_tabix = 99999.
      ENDIF.
      PERFORM display_grid_message USING lv_field_name2 lv_tabix
                                                     g_tabname "'COMPANY_CODE'
                                                     '52'
                                                     ' ' .
      p_subrc = 4.
    ENDIF.
  ELSEIF g_constant = 'C'.
    ASSIGN lt_unique_tab_c TO <fs_unique_tab>.
    ASSIGN lt_default_tab_c TO <fs_default_tab>.
    lv_field_name = 'COMPANY_CODE'.
    READ TABLE gt_coder_lba WITH KEY company_code = space.
    IF sy-subrc = 0.
*      PERFORM display_grid_message USING lv_field_name sy-tabix
      lv_tabix = sy-tabix.
      IF lv_tabix > lv_maxtabix.
        lv_tabix = 99999.
      ENDIF.
      PERFORM display_grid_message USING lv_field_name lv_tabix
* end VIMI-7280
                                                     g_tabname "'COMPANY_CODE'
                                                     '52'
                                                     ' ' .
      p_subrc = 4.
    ENDIF.
  ENDIF.
  IF p_subrc GT 0.
    gt_coder_lba[] = lt_coder_save[].
    CALL METHOD g_protocol->display_protocol( ).
    EXIT.
  ENDIF.
* Check duplicate coder
  IF NOT <fs_unique_tab> IS ASSIGNED.
    gt_coder_lba[] = lt_coder_save[].
    EXIT.
  ENDIF.
  CLEAR <fs_unique_tab>.
  LOOP AT gt_coder_lba.
    lv_tabix = sy-tabix.
    IF g_constant = 'R'.
      READ TABLE gt_ncoa2 WITH KEY appr_level = 0
                                   opt_userid = gt_coder_lba-coder_id.
* begin VIMI-10937
      IF sy-subrc <> 0.
        READ TABLE gt_ncoa_filtered
          WITH KEY appr_level = 0
                   opt_userid = gt_coder_lba-coder_id.
      ENDIF.
* end VIMI-10937
      IF sy-subrc NE 0.
        PERFORM display_grid_message USING TEXT-t15 lv_tabix
                                           g_tabname
                                           '00' ''.
        p_subrc = 4.
        EXIT.
      ENDIF.
      READ TABLE gt_ncoa2 WITH KEY appr_level = 1
                                   opt_userid = gt_coder_lba-requester_id.
* begin VIMI-10937
      IF sy-subrc <> 0.
        READ TABLE gt_ncoa_filtered
          WITH KEY appr_level = 1
                   opt_userid = gt_coder_lba-requester_id.
      ENDIF.
* end VIMI-10937
      IF sy-subrc NE 0.
        PERFORM display_grid_message USING TEXT-t35 lv_tabix
                                           g_tabname
                                           '00' ''.
        p_subrc = 4.
        EXIT.
      ENDIF.
    ELSEIF g_constant = 'C'.
      READ TABLE gt_ncoa2 WITH KEY appr_level = 0
                                   comp_code  = gt_coder_lba-company_code
                                   opt_userid = gt_coder_lba-coder_id.
* begin VIMI-10937
      IF sy-subrc <> 0.
        READ TABLE gt_ncoa_filtered
          WITH KEY appr_level = 0
                   comp_code  = gt_coder_lba-company_code
                   opt_userid = gt_coder_lba-coder_id.
      ENDIF.
* end VIMI-10937
      IF sy-subrc NE 0.
        PERFORM display_grid_message USING TEXT-t15 lv_tabix
                                           g_tabname
                                           '00' ''.
        p_subrc = 4.
        EXIT.
      ENDIF.
    ELSEIF g_constant = 'B'.
      READ TABLE gt_ncoa2 WITH KEY appr_level = 0
                                   comp_code  = gt_coder_lba-company_code
                                   opt_userid = gt_coder_lba-coder_id.
* begin VIMI-10937
      IF sy-subrc <> 0.
        READ TABLE gt_ncoa_filtered
          WITH KEY appr_level = 0
                   comp_code  = gt_coder_lba-company_code
                   opt_userid = gt_coder_lba-coder_id.
      ENDIF.
* end VIMI-10937
      IF sy-subrc NE 0.
        PERFORM display_grid_message USING TEXT-t15 lv_tabix
                                           g_tabname
                                           '00' ''.
        p_subrc = 4.
        EXIT.
      ENDIF.
      READ TABLE gt_ncoa2 WITH KEY appr_level = 1
                                   comp_code  = gt_coder_lba-company_code
                                   opt_userid = gt_coder_lba-requester_id.
* begin VIMI-10937
      IF sy-subrc <> 0.
        READ TABLE gt_ncoa_filtered
          WITH KEY appr_level = 1
                   comp_code  = gt_coder_lba-company_code
                   opt_userid = gt_coder_lba-requester_id.
      ENDIF.
* end VIMI-10937
      IF sy-subrc NE 0.
        PERFORM display_grid_message USING TEXT-t35 lv_tabix
                                           g_tabname
                                           '00' ''.
        p_subrc = 4.
        EXIT.
      ENDIF.
    ENDIF.
    INSERT gt_coder_lba INTO TABLE <fs_unique_tab>.
    IF sy-subrc <> 0.
      CLEAR lv_value.
      ASSIGN COMPONENT lv_field_name OF STRUCTURE gt_coder_lba TO <fs_value>.
      IF sy-subrc = 0.
        lv_value = <fs_value>.
      ENDIF.
      CONCATENATE lv_field_name ':' lv_value TEXT-t33
             INTO lv_msg SEPARATED BY space.                "#EC NOTEXT
      IF g_constant = 'B'.
        CLEAR lv_value.
        ASSIGN COMPONENT lv_field_name2 OF STRUCTURE gt_coder_lba TO <fs_value>.
        IF sy-subrc = 0.
          lv_value = <fs_value>.
        ENDIF.
        CONCATENATE lv_msg  lv_field_name2 ':' lv_value TEXT-t33
               INTO lv_msg SEPARATED BY space.              "#EC NOTEXT

      ENDIF.
* begin VIMI-7280
*      PERFORM display_grid_message USING lv_msg sy-tabix

      IF lv_tabix > lv_maxtabix.
        lv_tabix = 99999.
      ENDIF.
      PERFORM display_grid_message USING lv_msg lv_tabix
* end VIMI-7280
                                          g_tabname
                                           '55' ' '.
      p_subrc = 4.
      EXIT.
    ENDIF.
* Only one default coder is allowed.
    IF gt_coder_lba-default_flag <> space.
      INSERT gt_coder_lba INTO TABLE <fs_default_tab>.
      IF sy-subrc <> 0.
        CLEAR lv_value.
        ASSIGN COMPONENT lv_field_name OF STRUCTURE gt_coder_lba TO <fs_value>.
        IF sy-subrc = 0.
          lv_value = <fs_value>.
        ENDIF.
        CONCATENATE lv_field_name ':' lv_value TEXT-t33
               INTO lv_msg SEPARATED BY space.              "#EC NOTEXT
        IF g_constant = 'B'.
          CLEAR lv_value.
          ASSIGN COMPONENT lv_field_name2 OF STRUCTURE gt_coder_lba TO <fs_value>.
          IF sy-subrc = 0.
            lv_value = <fs_value>.
          ENDIF.
          CONCATENATE lv_msg  lv_field_name2 ':' lv_value TEXT-t33
                 INTO lv_msg SEPARATED BY space.            "#EC NOTEXT

        ENDIF.
        PERFORM display_grid_message USING lv_msg ' '
                                          g_tabname
                                           '57' ' '.
        p_subrc = 4.
        EXIT.
      ENDIF.
* At lease one default coder is required for every
* requester/company code if there are some coders.
    ELSE.
      IF g_constant = 'R'.
        DELETE lt_coder WHERE coder_id = gt_coder_lba-coder_id
        AND requester_id = gt_coder_lba-requester_id.
        READ TABLE lt_coder TRANSPORTING NO FIELDS
             WITH KEY requester_id = gt_coder_lba-requester_id.
        IF sy-subrc = 0.
          READ TABLE lt_coder TRANSPORTING NO FIELDS
            WITH KEY requester_id = gt_coder_lba-requester_id
                     default_flag = 'X'.
          IF sy-subrc <> 0.
            p_subrc = 4.
          ENDIF.
        ENDIF.
      ELSEIF g_constant = 'B'.
        DELETE lt_coder WHERE coder_id = gt_coder_lba-coder_id
        AND requester_id = gt_coder_lba-requester_id
        AND company_code = gt_coder_lba-company_code.
        READ TABLE lt_coder TRANSPORTING NO FIELDS
             WITH KEY requester_id = gt_coder_lba-requester_id
             company_code = gt_coder_lba-company_code.
        IF sy-subrc = 0.
          READ TABLE lt_coder TRANSPORTING NO FIELDS
               WITH KEY requester_id = gt_coder_lba-requester_id
                        company_code = gt_coder_lba-company_code
                        default_flag = 'X'.
          IF sy-subrc <> 0.
            p_subrc = 4.
          ENDIF.
        ENDIF.
      ELSEIF g_constant = 'C'.
        DELETE lt_coder WHERE coder_id = gt_coder_lba-coder_id
               AND company_code = gt_coder_lba-company_code.
        READ TABLE lt_coder TRANSPORTING NO FIELDS
             WITH KEY company_code = gt_coder_lba-company_code.
        IF sy-subrc = 0.
          READ TABLE lt_coder TRANSPORTING NO FIELDS
               WITH KEY company_code = gt_coder_lba-company_code
               default_flag = 'X'.
          IF sy-subrc <> 0.
            p_subrc = 4.
          ENDIF.
        ENDIF.
      ENDIF.
      IF p_subrc <> 0.
        CLEAR lv_value.
        ASSIGN COMPONENT lv_field_name OF STRUCTURE gt_coder_lba TO <fs_value>.
        IF sy-subrc = 0.
          lv_value = <fs_value>.
        ENDIF.
        CONCATENATE lv_field_name ':' lv_value TEXT-t33
               INTO lv_msg SEPARATED BY space.              "#EC NOTEXT
        IF g_constant = 'B'.
          CLEAR lv_value.
          ASSIGN COMPONENT lv_field_name2 OF STRUCTURE gt_coder_lba TO <fs_value>.
          IF sy-subrc = 0.
            lv_value = <fs_value>.
          ENDIF.
          CONCATENATE lv_msg  lv_field_name2 ':' lv_value TEXT-t33
                 INTO lv_msg SEPARATED BY space.            "#EC NOTEXT

        ENDIF.
        PERFORM display_grid_message USING lv_msg ' '
                                           g_tabname
                                           '56' ' '.
        p_subrc = 4.
        EXIT.
      ENDIF.
    ENDIF.
  ENDLOOP.
  IF p_subrc GT 0.
    gt_coder_lba[] = lt_coder_save[].
    CALL METHOD g_protocol->display_protocol( ).
    EXIT.
  ENDIF.
  CLEAR: g_tabname,
         g_tab_desc.
  gt_coder_lba[] = lt_coder_save[].

ENDFORM.                    " VALIDATE_LCODER_DATA
*&---------------------------------------------------------------------*
*&      Form  GET_CODER_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM get_coder_data .

* begin VIMI-8064
  DATA:
    lv_group TYPE xuclass,
    lv_actvt TYPE activ_auth.
* end VIMI-8064

  CLEAR: gt_coder_lba,
         g_afs_desc.
  REFRESH gt_coder_lba.

  SELECT *
    FROM /opt/afs_coder
    INTO CORRESPONDING FIELDS OF TABLE gt_coder_lba
   WHERE afs_id = /opt/afs_coder-afs_id.

* begin VIMI-10937
  REFRESH gt_lcoder_filtered[].

  SELECT SINGLE coder_det INTO g_constant
         FROM   /opt/at_afs
         WHERE  afs_id = /opt/afs_coder-afs_id.
* end VIMI-10937

  SELECT SINGLE description INTO g_afs_desc
    FROM /opt/at_afst
   WHERE afs_id = /opt/afs_coder-afs_id AND
         spras  = sy-langu.

* begin VIMI-8064 - Authorization checks
  IF NOT /opt/vim_auth_check=>is_active IS INITIAL.
* begin VIMI-9285
*    SORT gt_coder_lba BY afs_id coder_id counter.
    SORT gt_coder_lba BY afs_id coder_id coder_otype coder_actorid counter.
* end VIMI-9285
    IF g_edit IS INITIAL.
      lv_actvt = '03'.
    ELSE.
      lv_actvt = '02'.
    ENDIF.
    LOOP AT gt_coder_lba.
      AT NEW coder_id.
        READ TABLE gt_usermap WITH KEY opt_userid = gt_coder_lba-coder_id.
        IF sy-subrc <> 0.
          CLEAR lv_group.
        ELSE.
          PERFORM get_sap_user_group
            USING gt_usermap-sap_user_id
            CHANGING lv_group.
        ENDIF.
      ENDAT.
      IF g_constant = 'R' OR          " no company code in coder screens
         gt_coder_lba-company_code = '*' OR
         gt_coder_lba-company_code IS INITIAL.
        CALL METHOD /opt/vim_auth_check=>check_appr_coder
          EXPORTING
            pi_group = lv_group
            pi_bukrs = '    '
            pi_actvt = lv_actvt
          EXCEPTIONS
            failed   = 1.
      ELSE.
        CALL METHOD /opt/vim_auth_check=>check_appr_coder
          EXPORTING
            pi_group = lv_group
            pi_bukrs = gt_coder_lba-company_code
            pi_actvt = lv_actvt
          EXCEPTIONS
            failed   = 1.
      ENDIF.
      IF sy-subrc <> 0.
        INSERT gt_coder_lba INTO TABLE gt_lcoder_filtered.
        DELETE gt_coder_lba.
      ENDIF.
    ENDLOOP.
  ENDIF.
* end VIMI-8064

  gv_afs_id_save = /opt/afs_coder-afs_id.                   "VIMI-11026

  IF g_okcode IS INITIAL.
    g_okcode = c_fcoderview.
  ENDIF.

ENDFORM.                    " GET_CODER_DATA
*&---------------------------------------------------------------------*
*&      Form  GET_INDEX
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM get_index    USING p_tabix
               CHANGING p_index.
  IF gt_ncoa-appr_level = 0 OR
     gt_ncoa-appr_level = 1.
    READ TABLE gt_ncoa1 INDEX p_tabix.
    IF sy-subrc = 0.
      READ TABLE gt_ncoa2 FROM gt_ncoa1.
      IF sy-subrc = 0.
        p_index = sy-tabix.
      ENDIF.
    ENDIF.
  ELSE.
    READ TABLE gt_ncoa1 INDEX p_tabix.
    IF sy-subrc = 0.
      READ TABLE gt_ncoa3 FROM gt_ncoa1.
      IF sy-subrc = 0.
        p_index = sy-tabix.
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.                    " GET_INDEX
*&---------------------------------------------------------------------*
*&      Form  CHECK_APPR_LEVEL_NUM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM check_appr_level_num  USING    p_level
                                    p_alevel
                                    p_ccode
                                    p_tabix
                           CHANGING p_subrc.


*  DATA: lv_tlevel TYPE /opt/a_appr_level_de.
*  lv_tlevel = p_alevel + 1.

  IF p_alevel <> p_level.
    p_subrc = 4.
    PERFORM display_grid_message USING TEXT-t24
                                       p_tabix
                                       'APPR_LEVEL'
                                       '00'
                                       ''. "p_ccode. "VIMI-18019
********************VIMI-10151**********************
    IF sy-repid = '/OPT/COA_UPLOAD_REPORT'.
      l_tab = 'APL'.
*      CONCATENATE 'APPR_LEVEL' text-t24 INTO l_text.
      MOVE-CORRESPONDING gt_level TO ls_error_mgs.
      PERFORM capture_messages USING TEXT-t24 l_tab gt_ncoa-opt_userid.

    ELSE.
      EXIT.
    ENDIF.
*    EXIT. "vimi-10151
  ENDIF.


ENDFORM.                    " CHECK_APPR_LEVEL_NU
*&---------------------------------------------------------------------*
*&      Form  CHANGEDOC_NCOA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM changedoc_ncoa .

  DATA: lv_lines_old TYPE sy-tabix,
        lv_lines_new TYPE sy-tabix,
        lt_ncoa_ins  TYPE TABLE OF /opt/yappr_coa,
        lt_ncoa_del  TYPE TABLE OF /opt/yappr_coa,
        lt_ncoa_nupd TYPE TABLE OF /opt/yappr_coa,
        lt_ncoa_oupd TYPE TABLE OF /opt/yappr_coa,
        lwa_ncoa     TYPE /opt/yappr_coa,
        lv_date      TYPE sy-datum,
        lv_time      TYPE sy-uzeit,
        lv_timestamp TYPE timestamp,
        lv_utczone   TYPE tzonref-tzone,
        lv_sys_tzone TYPE tzonref-tzone.

* Begin of VIMI-22104
  DATA : lt_ncoa_old TYPE TABLE OF /opt/appr_coa WITH HEADER LINE,
         ls_ncoa     TYPE /opt/appr_coa,
         lv_counter  TYPE i.
  REFRESH  lt_ncoa_old.
* End of VIMI-22104

* Start of INS VIMI-10153
  IF sy-repid = '/OPT/COA_UPLOAD_REPORT' AND
     NOT gv_fmode IS INITIAL
* Begin of VIMI-19181
     AND gv_fmodelog IS INITIAL.
    REFRESH gt_ncoa_old.
*    CLEAR gt_ncoa_old.
* End of VIMI-19181
  ENDIF.
* End of INS VIMI-10153

  DESCRIBE TABLE gt_ncoa_old LINES lv_lines_old.
  DESCRIBE TABLE gt_ncoa LINES lv_lines_new.

*  Begin of VIMI-16997/STAMADA
  SORT gt_ncoa BY comp_code
                  appr_level
                  opt_userid
                  counter.
  SORT gt_ncoa_old BY   comp_code
                        appr_level
                        opt_userid
                        counter.
*  End of VIMI-16997/STAMADA

* Begin of VIMI-22104
*  LOOP AT gt_ncoa_old.
** Read with the new table with the key fields
**    READ TABLE gt_ncoa WITH KEY bukrs = gt_ncoa_old-bukrs
*    READ TABLE gt_ncoa WITH KEY comp_code = gt_ncoa_old-comp_code
*                           appr_level = gt_ncoa_old-appr_level
**                           opt_userid = gt_ncoa-opt_userid
**                           counter    = gt_ncoa-counter.
*                           opt_userid = gt_ncoa_old-opt_userid
*                           counter    = gt_ncoa_old-counter
*                           BINARY SEARCH .                           "VIMI-16997/STAMADA
*    IF sy-subrc = 0.
** If both the records are same no need write change documents
*      IF gt_ncoa = gt_ncoa_old.
*        CONTINUE.
*      ELSE.
** If both the records are not same that record is changed
** Need to send new record and old record with update indicator
*          MOVE-CORRESPONDING gt_ncoa TO lwa_ncoa.
*          APPEND lwa_ncoa TO lt_ncoa_nupd.
*          APPEND lwa_ncoa TO gt_ncoa_mod_rec.                     "I-VIMI-17454
*          CLEAR lwa_ncoa.
*          MOVE-CORRESPONDING gt_ncoa_old TO lwa_ncoa.
*          APPEND lwa_ncoa TO lt_ncoa_oupd.
*          CLEAR lwa_ncoa.
*      ENDIF.
*    ELSE.
** If the record is not exists in the new record
** Need to send the old record with deletiong indicator
*      MOVE-CORRESPONDING gt_ncoa_old TO lwa_ncoa.
*      APPEND lwa_ncoa TO lt_ncoa_del.
*      APPEND lwa_ncoa TO gt_ncoa_del_rec.                       "I-VIMI-17454
*      CLEAR lwa_ncoa.
*    ENDIF.
*  ENDLOOP.

  lt_ncoa_old[] = gt_ncoa_old[].
  lt_ncoa_del[] = gt_ncoa_del_rec[].
* End of VIMI-22104

  LOOP AT gt_ncoa.
* Read the old values with new values by using key fields
    READ TABLE gt_ncoa_old WITH KEY comp_code = gt_ncoa-comp_code
                                   appr_level = gt_ncoa-appr_level
                                   opt_userid = gt_ncoa-opt_userid
                                   counter    = gt_ncoa-counter
                                   BINARY SEARCH .                     "VIMI-16997/STAMADA
* Begin of VIMI-22104
*   IF sy-subrc NE 0.
    IF sy-subrc EQ 0.
      IF gt_ncoa = gt_ncoa_old.
        CONTINUE.
      ELSE.
        lv_counter = gt_ncoa-counter + 1.
        READ TABLE lt_ncoa_old WITH KEY comp_code  = gt_ncoa-comp_code
                                        appr_level = gt_ncoa-appr_level
                                        opt_userid = gt_ncoa-opt_userid
                                        counter    = lv_counter
                                        BINARY SEARCH .
        IF sy-subrc EQ 0.
          ls_ncoa = gt_ncoa.
          CLEAR: lt_ncoa_old-counter, ls_ncoa-counter.
          IF ls_ncoa = lt_ncoa_old.
            CONTINUE.
          ELSE.
            MOVE-CORRESPONDING gt_ncoa TO lwa_ncoa.
            APPEND lwa_ncoa TO lt_ncoa_nupd.
            APPEND lwa_ncoa TO gt_ncoa_mod_rec.
            CLEAR lwa_ncoa.
            MOVE-CORRESPONDING gt_ncoa_old TO lwa_ncoa.
            APPEND lwa_ncoa TO lt_ncoa_oupd.
            CLEAR lwa_ncoa.
          ENDIF.
          CLEAR lv_counter.
        ELSE.
          MOVE-CORRESPONDING gt_ncoa TO lwa_ncoa.
          APPEND lwa_ncoa TO lt_ncoa_nupd.
          APPEND lwa_ncoa TO gt_ncoa_mod_rec.
          CLEAR lwa_ncoa.
          MOVE-CORRESPONDING gt_ncoa_old TO lwa_ncoa.
          APPEND lwa_ncoa TO lt_ncoa_oupd.
          CLEAR lwa_ncoa.
        ENDIF.
      ENDIF.
    ELSE.
* End of VIMI-22104
* if no record exist means new record has created
* Send the new values with insert indicator
      MOVE-CORRESPONDING gt_ncoa TO lwa_ncoa.
      APPEND lwa_ncoa TO lt_ncoa_ins.
      APPEND lwa_ncoa TO gt_ncoa_mod_rec.                       "I-VIMI-17454
      CLEAR lwa_ncoa.
    ENDIF.
  ENDLOOP.


*Change into storing time
  SELECT SINGLE tzonesys INTO lv_sys_tzone FROM ttzcu.
  CALL FUNCTION 'IB_CONVERT_INTO_TIMESTAMP'
    EXPORTING
      i_datlo     = sy-datum
      i_timlo     = sy-uzeit
      i_tzone     = lv_sys_tzone
    IMPORTING
      e_timestamp = lv_timestamp.

  CONVERT TIME STAMP lv_timestamp
          TIME  ZONE lv_utczone
          INTO  DATE lv_date
                TIME lv_time.

  IF NOT lt_ncoa_nupd IS INITIAL AND
     NOT lt_ncoa_oupd IS INITIAL.
    PERFORM write_coa_doc TABLES lt_ncoa_nupd
                             lt_ncoa_oupd
                       USING 'U'
                             lv_date
                             lv_time.
  ENDIF.

  CLEAR: lt_ncoa_nupd,
         lt_ncoa_oupd.

  IF NOT lt_ncoa_ins IS INITIAL.
* Begin of D-VIMI-17244
*    PERFORM write_coa_doc TABLES lt_ncoa_oupd
*                             lt_ncoa_ins
*                       USING 'I'
*                             lv_date
*                             lv_time.
* End of D-VIMI-17244

* Begin of I-VIMI-17244
    PERFORM write_coa_doc TABLES lt_ncoa_ins
                             lt_ncoa_oupd
                       USING 'I'
                             lv_date
                             lv_time.
* End of I-VIMI-17244

  ENDIF.

  IF NOT lt_ncoa_del IS INITIAL.
    PERFORM write_coa_doc TABLES lt_ncoa_nupd
                             lt_ncoa_del
                       USING 'D'
                             lv_date
                             lv_time.
  ENDIF.

* Begin of insert - VIMI-16763
* reset coa_old data with recent changes, to generate change docs acurately during next save
  REFRESH: gt_ncoa_old.
  LOOP AT gt_ncoa1.
    MOVE-CORRESPONDING gt_ncoa1 TO gt_ncoa_old.
    APPEND gt_ncoa_old.
  ENDLOOP.
* End of insert - VIMI-16763

ENDFORM.                    " CHANGEDOC_NCOA
*&---------------------------------------------------------------------*
*&      Form  WRITE_COA_DOC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM write_coa_doc TABLES lt_new STRUCTURE /opt/yappr_coa
                          lt_old STRUCTURE /opt/yappr_coa
                   USING  p_ind
                          p_date
                          p_time.

  DATA: lt_cdtxt TYPE TABLE OF cdtxt.
* Begin of VIMI-18347/snittala
  IF NOT lt_new[] IS INITIAL.
    SORT lt_new.
    DELETE ADJACENT DUPLICATES FROM lt_new.
  ENDIF.
  IF NOT lt_old[] IS INITIAL.
    SORT lt_old.
    DELETE ADJACENT DUPLICATES FROM lt_old.
  ENDIF.
* End of VIMI-18347/snittala


  CALL FUNCTION '/OPT/VIM_LBACOA_WRITE_DOCUMENT'
    EXPORTING
      objectid                = '/OPT/VIM_LBACOA'
      tcode                   = sy-tcode
      utime                   = p_time
      udate                   = p_date
      username                = sy-uname
*     PLANNED_CHANGE_NUMBER   = ' '
      object_change_indicator = p_ind
*     PLANNED_OR_REAL_CHANGES = ' '
*     NO_CHANGE_POINTERS      = ' '
*     UPD_ICDTXT_VIM_LBACOA   = ' '
      upd_opt_appr_coa        = 'U'
    TABLES
      icdtxt_vim_lbacoa       = lt_cdtxt
      xopt_appr_coa           = lt_new
      yopt_appr_coa           = lt_old.

*  CALL FUNCTION '/OPT/VIM_LBACOA_WRITE_DOCUMENT'
*    EXPORTING
*      objectid                      =
*      tcode                         =
*      utime                         =
*      udate                         =
*      username                      =
**   PLANNED_CHANGE_NUMBER         = ' '
*     object_change_indicator       =
**   PLANNED_OR_REAL_CHANGES       = ' '
**   NO_CHANGE_POINTERS            = ' '
**   UPD_ICDTXT_VIM_APPLMT         = ' '
*     upd_opt_appr_limit            = 'U'
*    TABLES
*      icdtxt_vim_applmt             =
*      xopt_appr_limit               =
*      yopt_appr_limit               = .

ENDFORM.                    " WRITE_COA_DOC
*&---------------------------------------------------------------------*
*&      Form  REDISP_NCOA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM redisp_ncoa .

  DATA: ls_layout   TYPE lvc_s_layo,
        lt_fieldcat TYPE lvc_t_fcat.

  IF NOT g_grid IS INITIAL.
    IF g_evt_grid->gridname = c_fapprcoa.

      CALL METHOD g_grid->get_frontend_layout
        IMPORTING
          es_layout = ls_layout.

      CALL METHOD g_grid->get_frontend_fieldcatalog
        IMPORTING
          et_fieldcatalog = lt_fieldcat.

      CALL METHOD g_grid->set_table_for_first_display
        EXPORTING
          i_save          = 'A'
          is_layout       = ls_layout
        CHANGING
          it_fieldcatalog = lt_fieldcat
          it_outtab       = gt_ncoa3[].

    ELSEIF g_evt_grid->gridname = c_fcodcoa.

      CALL METHOD g_grid->get_frontend_layout
        IMPORTING
          es_layout = ls_layout.

      CALL METHOD g_grid->get_frontend_fieldcatalog
        IMPORTING
          et_fieldcatalog = lt_fieldcat.

      CALL METHOD g_grid->set_table_for_first_display
        EXPORTING
          i_save          = 'A'
          is_layout       = ls_layout
        CHANGING
          it_fieldcatalog = lt_fieldcat
          it_outtab       = gt_ncoa2[].

    ELSEIF g_evt_grid->gridname = c_fumview.

      CALL METHOD g_grid->get_frontend_layout
        IMPORTING
          es_layout = ls_layout.

      CALL METHOD g_grid->get_frontend_fieldcatalog
        IMPORTING
          et_fieldcatalog = lt_fieldcat.

      CALL METHOD g_grid->set_table_for_first_display
        EXPORTING
          i_save          = 'A'
          is_layout       = ls_layout
        CHANGING
          it_fieldcatalog = lt_fieldcat
          it_outtab       = gt_usermap[].

    ENDIF.
  ENDIF.
ENDFORM.                    " REDISP_NCOA
*&---------------------------------------------------------------------*
*&      Form  REDISP_CODER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM redisp_coder .

  DATA: ls_layout   TYPE lvc_s_layo,
        lt_fieldcat TYPE lvc_t_fcat.

  CALL METHOD g_grid->get_frontend_layout
    IMPORTING
      es_layout = ls_layout.

  CALL METHOD g_grid->get_frontend_fieldcatalog
    IMPORTING
      et_fieldcatalog = lt_fieldcat.

  CALL METHOD g_grid->set_table_for_first_display
    EXPORTING
      i_save          = 'A'
      is_layout       = ls_layout
    CHANGING
      it_fieldcatalog = lt_fieldcat
      it_outtab       = gt_coder_lba[].

ENDFORM.                    " REDISP_CODER
*&---------------------------------------------------------------------*
*&      Form  CAPTURE_MESSAGES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_TEXT  text
*      -->P_LV_OPT_USERID  text
*----------------------------------------------------------------------*
FORM capture_messages  USING    p_text   TYPE c
                                p_tab    TYPE c
                                p_lv_opt_userid TYPE /ors/umoid.

*data : lw_error_mgs type /opt/appr_limit.

*  CLEAR : ls_error_mgs.
  IF NOT p_text IS INITIAL OR NOT p_lv_opt_userid IS INITIAL.
    ls_error_mgs-message = p_text.
    ls_error_mgs-tab     = p_tab.
    ls_error_mgs-userid =  p_lv_opt_userid.
    APPEND ls_error_mgs TO lt_error_mgs.
    CLEAR : ls_error_mgs.
  ELSE.
    EXIT.
  ENDIF.

ENDFORM.                    " CAPTURE_MESSAGES

*&---------------------------------------------------------------------*
*&      Form  VALIDATE_NCOA_with_coder
*&---------------------------------------------------------------------*
*       VIMI-15825
*----------------------------------------------------------------------*
FORM validate_ncoa_with_coder CHANGING p_subrc.

  DATA:
    lt_coder TYPE STANDARD TABLE OF /opt/afs_coder WITH HEADER LINE,
    lt_ncoa  TYPE STANDARD TABLE OF /opt/appr_coa  WITH HEADER LINE,
    lv_afs   TYPE /opt/afs_coder-afs_id,
    lt_afs   TYPE STANDARD TABLE OF /opt/at_afs WITH HEADER LINE,
    lv_msg   TYPE c.

  CHECK sy-repid = '/OPT/AR_COA'.

  lt_coder[] = gt_coder_lba[].
  APPEND LINES OF gt_lcoder_filtered TO gt_coder_lba.

* merge entries from coder tab and DB
  IF NOT /opt/afs_coder-afs_id IS INITIAL.   "if coder tab is being processed, add from DB except those with same AFS ID
    lv_afs = /opt/afs_coder-afs_id.
    SELECT * FROM /opt/afs_coder APPENDING TABLE lt_coder WHERE afs_id <> lv_afs. "#EC CI_NOFIELD  "VIMI-23560.
  ELSE.          "get all
    SELECT * FROM /opt/afs_coder INTO TABLE lt_coder. "#EC CI_NOWHERE  "VIMI-23560.
  ENDIF.
  SORT lt_coder.          "VIMI-23882
* consider only LBA
  DELETE lt_coder WHERE afs_id = 0.

  SELECT * FROM /opt/at_afs INTO TABLE lt_afs. "#EC CI_NOWHERE  "VIMI-23560.
* drop eventual unneeded coder entries where coder=requester
  LOOP AT lt_afs WHERE coder_det = 'S'.   "use requester
    DELETE lt_coder WHERE afs_id = lt_afs-afs_id.
  ENDLOOP.

  SORT lt_afs BY afs_id.

  lt_ncoa[] = gt_ncoa[].
* drop non-coders in COA
  DELETE lt_ncoa WHERE appr_level > 0.

  SORT lt_ncoa BY comp_code appr_level opt_userid.

* first loop with checks of company code
  LOOP AT lt_coder.
* VIMI-16201
    IF gt_authorized_cc IS NOT INITIAL.
      READ TABLE gt_authorized_cc TRANSPORTING NO FIELDS WITH KEY bukrs = lt_coder-company_code.
      IF sy-subrc <> 0.
        CONTINUE.
      ENDIF.
    ENDIF.
* end of VIMI-16201
    AT NEW afs_id.
      READ TABLE lt_afs WITH KEY afs_id = lt_coder-afs_id BINARY SEARCH.
      IF sy-subrc <> 0.
        CLEAR lt_afs.
      ENDIF.
    ENDAT.
    CASE lt_afs-coder_det.
      WHEN 'B'.
        READ TABLE lt_ncoa WITH KEY comp_code = lt_coder-company_code
                                    appr_level = 0
                                    opt_userid = lt_coder-coder_id BINARY SEARCH.
        IF sy-subrc <> 0.
          g_tab_desc = TEXT-t34.
          PERFORM display_coder_warning USING lt_coder-coder_id lt_coder-afs_id.
          lv_msg = 'X'.
        ENDIF.
        DELETE lt_coder.  "delete this - not needed for the 2nd loop
    ENDCASE.
  ENDLOOP.

  IF gv_simple_mode = space. "added VIMI-16201
* second loop with checks without company code
    lt_ncoa-comp_code = ''.
    MODIFY lt_ncoa TRANSPORTING comp_code WHERE comp_code <> ''.
    SORT lt_ncoa BY comp_code appr_level opt_userid.

    LOOP AT lt_coder.
      AT NEW afs_id.
        READ TABLE lt_afs WITH KEY afs_id = lt_coder-afs_id BINARY SEARCH.
        IF sy-subrc <> 0.
          CLEAR lt_afs.
        ENDIF.
      ENDAT.
      CASE lt_afs-coder_det.
        WHEN 'C' OR 'R'.
          READ TABLE lt_ncoa WITH KEY comp_code = '    '
                                      appr_level = 0
                                      opt_userid = lt_coder-coder_id BINARY SEARCH.
          IF sy-subrc <> 0.
            g_tab_desc = TEXT-t34.
            PERFORM display_coder_warning USING lt_coder-coder_id lt_coder-afs_id.
            lv_msg = 'X'.
          ENDIF.
      ENDCASE.
    ENDLOOP.
  ENDIF. "added VIMI-16201
  IF NOT lv_msg IS INITIAL.
    CALL METHOD g_protocol->display_protocol( ).
  ENDIF.

ENDFORM.                    "VALIDATE_NCOA_with_coder

*&---------------------------------------------------------------------*
*&      Form  DISPLAY_CODER_WARNING
*&---------------------------------------------------------------------*
*       VIMI-15825
*----------------------------------------------------------------------*
FORM display_coder_warning  USING   p_coder p_afsid.

  DATA: lwa_fcat   TYPE lvc_s_fcat.

  IF g_protocol IS INITIAL.
    CREATE OBJECT g_protocol
      EXPORTING
        i_calling_alv = g_grid.
  ENDIF.

  IF sy-repid = '/OPT/AR_COA'.
    CLEAR: gt_nfcat,
           lwa_fcat.
    lwa_fcat-outputlen = 25.
    lwa_fcat-seltext   = g_tab_desc.
    APPEND lwa_fcat TO gt_nfcat.
    g_protocol->mt_fieldcatalog = gt_nfcat.
  ENDIF.


  CALL METHOD g_protocol->add_protocol_entry
    EXPORTING
      i_msgid     = '/OPT/VIM_701'
      i_msgty     = 'W'
      i_msgno     = '086'
      i_msgv1     = p_coder
      i_msgv2     = p_afsid
      i_fieldname = ''.
ENDFORM.                    " DISPLAY_CODER_WARNING
*&---------------------------------------------------------------------*
*&      Form  LOCK_COMPANY_CODE_DATA
*&---------------------------------------------------------------------*
*      VIMI-16201
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM lock_company_code_data CHANGING ev_lock_error TYPE c .
  DATA: ls_authorized_cc LIKE LINE OF gt_authorized_cc,
        lt_t001          TYPE TABLE OF t001,
        ls_t001          LIKE LINE OF lt_t001,
        lv_group         TYPE xuclass,
        lv_actvt         TYPE activ_auth.

* Lock one of the tables to generate lock for "normal" COA transaction
  CALL FUNCTION 'ENQUEUE_E_TABLEE'
    EXPORTING
      tabname = '/OPT/BL_T401'
      varkey  = gv_varkey
      _scope  = 1
    EXCEPTIONS
      OTHERS  = 1.
  IF sy-subrc <> 0.
* Use one (random) Lock table to check if the "normal" transaction locked all tables
    CALL FUNCTION 'ENQUEUE_E_TABLEE'
      EXPORTING
        tabname = '/OPT/BL_T402'
        varkey  = gv_varkey
        _scope  = 1
      EXCEPTIONS
        OTHERS  = 1.
    IF sy-subrc = 0. "just another S-transaction is locking
      PERFORM unlock_table USING: '/OPT/BL_T402'.
    ELSE. "normal transaction is locking
      MESSAGE ID sy-msgid TYPE 'I' NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      g_edit = space.
      EXIT.
    ENDIF.
  ENDIF.

  PERFORM get_authorized_cc CHANGING gt_authorized_cc.

  LOOP AT  gt_authorized_cc INTO ls_authorized_cc.
    CALL FUNCTION 'ENQUEUE_/OPT/ES_COA_CC'
      EXPORTING
*       MODE_/OPT/APPR_COA       = 'E'
*       MANDT          = SY-MANDT
        comp_code      = ls_authorized_cc-bukrs
*       X_COMP_CODE    = ' '
*       _SCOPE         = '2'
*       _WAIT          = ' '
*       _COLLECT       = ' '
      EXCEPTIONS
        foreign_lock   = 1
        system_failure = 2
        OTHERS         = 3.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE 'I' NUMBER sy-msgno
        WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ev_lock_error = 'X'.
      EXIT.
    ENDIF.
  ENDLOOP.
ENDFORM.                    " LOCK_COMPANY_CODE_DATA
*&---------------------------------------------------------------------*
*&      Form  unlock_company_code_data
*&---------------------------------------------------------------------*
*       VIMI-16201
*----------------------------------------------------------------------*
FORM unlock_company_code_data.
  DATA: ls_authorized_cc LIKE LINE OF gt_authorized_cc.

  LOOP AT  gt_authorized_cc INTO ls_authorized_cc.
    CALL FUNCTION 'DEQUEUE_/OPT/ES_COA_CC'
      EXPORTING
        comp_code = ls_authorized_cc-bukrs.


  ENDLOOP.
ENDFORM.                    "unlock_company_code_data
*&---------------------------------------------------------------------*
*&      Form  DELETE_ROW_AR_COA
*&---------------------------------------------------------------------*
*       VIMI-16201
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM delete_row_ar_coa .
  DATA: lt_rows        TYPE lvc_t_roid,
        ls_rows        LIKE LINE OF lt_rows,
        ls_ncoa_del    LIKE LINE OF  gt_ncoa3[],
        lt_appr_coa    TYPE TABLE OF /opt/appr_coa,
        ls_appr_coa    LIKE LINE OF lt_appr_coa,
        lv_answer      TYPE c,
        lt_chg_coa_old TYPE TABLE OF /opt/yappr_coa,
        lt_chg_coa_del TYPE TABLE OF /opt/yappr_coa,
        ls_chg_coa_del LIKE LINE OF lt_chg_coa_del.
  DATA lt_coa TYPE TABLE OF /opt/bl_appcoa.       "VIMI-16264/STAMADA

  CALL METHOD g_grid->get_selected_rows
    IMPORTING
      et_row_no = lt_rows[].
  IF lt_rows[] IS INITIAL.
    MESSAGE s000 WITH 'Select at least one row'(m06).
    EXIT.
  ENDIF.
  SORT lt_rows[] BY row_id DESCENDING.
  CLEAR lv_answer.
  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      text_question  = 'Entry is deleted from table. Do you want to continue'(006)
      text_button_1  = 'Yes'(003)
      text_button_2  = 'No'(005)
    IMPORTING
      answer         = lv_answer
    EXCEPTIONS
      text_not_found = 1
      OTHERS         = 2.
  IF sy-subrc <> 0 OR lv_answer = 'A' OR lv_answer = '2'.
    RETURN.
  ENDIF.
  CLEAR: lt_chg_coa_del.
  LOOP AT lt_rows INTO ls_rows.
    IF ts_coaview_det1-activetab = 'COAAPRVIEW'.
      READ TABLE gt_ncoa3 INTO ls_ncoa_del INDEX ls_rows-row_id.
      IF sy-subrc = 0.

        IF ls_ncoa_del-mandt IS NOT INITIAL.
          MOVE-CORRESPONDING ls_ncoa_del TO ls_appr_coa.
          APPEND ls_appr_coa TO lt_appr_coa.
          MOVE-CORRESPONDING ls_ncoa_del TO ls_chg_coa_del.
          APPEND ls_chg_coa_del TO lt_chg_coa_del.
        ENDIF.

        DELETE TABLE gt_ncoa3 FROM ls_ncoa_del.
      ENDIF.
    ELSEIF ts_coaview_det1-activetab = 'COACRVIEW'.
      READ TABLE gt_ncoa2 INTO ls_ncoa_del INDEX ls_rows-row_id.
      IF sy-subrc = 0.

        IF ls_ncoa_del-mandt IS NOT INITIAL.
          MOVE-CORRESPONDING ls_ncoa_del TO ls_appr_coa.
          APPEND ls_appr_coa TO lt_appr_coa.
          MOVE-CORRESPONDING ls_ncoa_del TO ls_chg_coa_del.
          APPEND ls_chg_coa_del TO lt_chg_coa_del.
        ENDIF.

        DELETE TABLE gt_ncoa2 FROM ls_ncoa_del.
      ENDIF.
    ENDIF.
*  Begin of VIMI-16264/STAMADA
    IF sy-repid EQ '/OPT/BL_APPRBASELINE' AND g_evt_grid->gridname EQ 'COAVIEW'.
      READ TABLE gt_coa INDEX ls_rows-row_id.
      IF sy-subrc EQ 0.
        DELETE gt_coa[] INDEX sy-tabix.
        APPEND gt_coa TO lt_coa.
      ENDIF.
    ENDIF.
*  End of VIMI-16264/STAMADA
  ENDLOOP.
  IF lt_appr_coa IS NOT INITIAL.
    PERFORM write_coa_doc TABLES  lt_chg_coa_old
                                  lt_chg_coa_del
                       USING 'D'
                             sy-datum
                             sy-uzeit.
    DELETE /opt/appr_coa FROM TABLE lt_appr_coa.
    IF sy-subrc = 0.
      COMMIT WORK.
    ENDIF.
  ENDIF.
*  Begin of VIMI-16264/STAMADA
  IF lt_coa IS NOT INITIAL.
    DELETE /opt/bl_appcoa FROM TABLE lt_coa..
    IF sy-subrc = 0.
      COMMIT WORK.
    ENDIF.
  ENDIF.
*  End of VIMI-16264/STAMADA
ENDFORM.                    " DELETE_ROW_AR_COA

*&---------------------------------------------------------------------*
*&      Form  GET_AUTHORIZED_CC
*&---------------------------------------------------------------------*
*       VIMI-16201
*----------------------------------------------------------------------*
*      <--P_GT_AUTHORIZED_CC  text
*----------------------------------------------------------------------*
FORM get_authorized_cc  CHANGING ct_authorized_cc LIKE gt_authorized_cc.

  DATA: ls_authorized_cc LIKE LINE OF gt_authorized_cc,
        lt_t001          TYPE TABLE OF t001,
        ls_t001          LIKE LINE OF lt_t001,
        lv_group         TYPE xuclass,
        lv_actvt         TYPE activ_auth.

* begin VIMI-20305
  IF g_edit IS INITIAL.
    lv_actvt = '03'.
  ELSE.
    lv_actvt = '02'.
  ENDIF.
* end VIMI-20305

  IF gt_authorized_cc IS INITIAL.
*    SELECT * FROM t001 INTO TABLE lt_t001. "VIMI-16997/STAMADA
    SELECT * FROM t001 INTO TABLE git_t001. "VIMI-16997/STAMADA
    CLEAR lv_group.
*    LOOP AT lt_t001 INTO ls_t001.          "VIMI-16997/STAMADA
    LOOP AT git_t001 INTO ls_t001.          "VIMI-16997/STAMADA
      IF /opt/vim_auth_check=>is_active = 'X'.
        AUTHORITY-CHECK OBJECT 'J_6NIM_CA5'
         ID 'BUKRS' FIELD ls_t001-bukrs
         ID 'ACTVT' FIELD lv_actvt.

        IF sy-subrc = 0.
          ls_authorized_cc-bukrs = ls_t001-bukrs.
          APPEND ls_authorized_cc TO ct_authorized_cc.
        ENDIF.
      ELSE.
        ls_authorized_cc-bukrs = ls_t001-bukrs.
        APPEND ls_authorized_cc TO ct_authorized_cc.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.                    " GET_AUTHORIZED_CC
*&---------------------------------------------------------------------*
*&      Form  VALIDATE_WBS_ELEMENT
*&---------------------------------------------------------------------*
*       VIMI-16229
*----------------------------------------------------------------------*
*      -->P_L_MCELL  text
*      <--P_L_VALID  text
*----------------------------------------------------------------------*
FORM validate_wbs_element  USING    iv_mcell
                           CHANGING cv_valid.

  DATA: lv_posid    TYPE bapi_prps_key-externalitemnumber,
        lv_internal TYPE bapi_prps_key-internalitemnumber,
        ls_return   TYPE  bapireturn1.

  IF iv_mcell IS INITIAL OR iv_mcell = '*'.
    CLEAR cv_valid.
    RETURN.
  ELSE.
    lv_posid = iv_mcell.
  ENDIF.

  CLEAR ls_return.

  CALL FUNCTION 'BAPI_PROJECT_EXISTENCECHECK' "Check Existence of a WBS Element
    EXPORTING
      internalitemnumber = lv_internal
      externalitemnumber = lv_posid
    IMPORTING
      return             = ls_return.
  IF ls_return-type = 'E'.
    cv_valid = 'N'.
  ENDIF.



ENDFORM.                    " VALIDATE_WBS_ELEMENT

*&---------------------------------------------------------------------*
*&      Form  ADD_COUNTER_TO_NCOA
*&---------------------------------------------------------------------*
*              VIMI-16148
*----------------------------------------------------------------------*
*      -->P_GT_NCOA2  text
*----------------------------------------------------------------------*
FORM add_counter_to_ncoa  USING    p_ncoa LIKE gt_ncoa1[].
  FIELD-SYMBOLS: <ls_coa> LIKE LINE OF p_ncoa.

  "VIMI-16148
  LOOP AT p_ncoa[] ASSIGNING <ls_coa>.
    <ls_coa>-line_no = sy-tabix.
  ENDLOOP.
ENDFORM.                    " ADD_COUNTER_TO_NCOA
* Begin of VIMI-18019/snittala
*&---------------------------------------------------------------------*
*&      Form  DISP_DUP_WARN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GT_NCO_COMP_CODE  text
*      -->P_GT_NCOA_APPR_LEVEL  text
*      -->P_GT_NCOA_EXPENSE_TYPE  text
*----------------------------------------------------------------------*
FORM disp_dup_warn  USING    p_gt_ncoa_opt_userid
                             p_gt_ncoa_comp_code
                             p_gt_ncoa_appr_level
                             p_gt_ncoa_expense_type.
  DATA: lwa_fcat   TYPE lvc_s_fcat.
  IF g_protocol IS INITIAL.
    CREATE OBJECT g_protocol
      EXPORTING
        i_calling_alv = g_grid.
  ENDIF.

  IF sy-repid = '/OPT/AR_COA'.
    CLEAR: gt_nfcat,
           lwa_fcat.
    lwa_fcat-outputlen = 25.
    lwa_fcat-seltext   = 'COA Details'.
    APPEND lwa_fcat TO gt_nfcat.
    g_protocol->mt_fieldcatalog = gt_nfcat.
  ENDIF.


  CALL METHOD g_protocol->add_protocol_entry
    EXPORTING
      i_msgid     = '/OPT/VIM_701'
      i_msgty     = 'W'
      i_msgno     = '122'
      i_msgv1     = p_gt_ncoa_opt_userid
      i_msgv2     = p_gt_ncoa_comp_code
      i_msgv3     = p_gt_ncoa_appr_level
      i_msgv4     = p_gt_ncoa_expense_type
      i_fieldname = ''.

ENDFORM.                    " DISP_DUP_WARN
* End of VIMI-18019/snittala
*&---------------------------------------------------------------------*
*&      Form  DISPLAY_WARNING_MSG
*&---------------------------------------------------------------------*
*       VIMI-21108
*----------------------------------------------------------------------*
FORM add_warning_msg  USING  p_value p_rowid p_msgno.
  gs_msg_tab-msgid = '/OPT/VIM_701'.
  gs_msg_tab-msgty = 'W'.
  gs_msg_tab-msgno = p_msgno.
  gs_msg_tab-msgv1 = p_value.
  gs_msg_tab-msgv2 = p_rowid.
  CONDENSE gs_msg_tab-msgv2.
  APPEND gs_msg_tab TO gt_msg_tab.
  CLEAR gs_msg_tab.
  DELETE ADJACENT DUPLICATES FROM gt_msg_tab COMPARING ALL FIELDS.
ENDFORM.                    " DISPLAY_WARNING_MSG
*&---------------------------------------------------------------------*
*& Form GET_DATA_NEW
*&---------------------------------------------------------------------*
*  VIMI-23560/AMANGAPA Performance optimization
*&---------------------------------------------------------------------*
FORM get_data_new .
  DATA: lv_group TYPE xuclass,
        lv_actvt TYPE activ_auth,
        lv_tabix TYPE sy-tabix,
        lv_value TYPE /ptgwfi/value.

  CLEAR: gt_values_b, gs_values_b, gt_values, gs_values,gv_bobj_display,gt_level_old.
  REFRESH : gt_usermap,gt_ncoa2,gt_ncoa3,gt_ncoa_old,gt_level_old,gt_level1.

  IF g_edit IS INITIAL.
    lv_actvt = '03'.
  ELSE.
    lv_actvt = '02'.
  ENDIF.

  CALL FUNCTION '/OPT/VIM_READ_CONSTANT'
    EXPORTING
      prod_code   = '005'
      param_name  = 'COA_BOBJ_REPORT_TAB'
    IMPORTING
      param_value = lv_value
    EXCEPTIONS
      not_found   = 1
      OTHERS      = 2.
  IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  MOVE lv_value TO gv_bobj_display.

*-- Domain values for User type
  CALL FUNCTION 'DDUT_DOMVALUES_GET'
    EXPORTING
      name          = '/OPT/USER_TYPE_DO'
      langu         = sy-langu
    TABLES
      dd07v_tab     = gt_values
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

*-- Domain values for Bulk approval type
  CALL FUNCTION 'DDUT_DOMVALUES_GET'
    EXPORTING
      name          = '/OPT/ABULK_APPR_TYPE_DO'
      langu         = sy-langu
    TABLES
      dd07v_tab     = gt_values_b
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  CALL FUNCTION 'DDUT_DOMVALUES_GET'
    EXPORTING
      name          = '/OPT/DO_HEAD_LIMIT_CHK'
      langu         = sy-langu
    TABLES
      dd07v_tab     = gt_values_h
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

* Select authorized company codes only
  PERFORM get_auth_bukrs USING lv_actvt CHANGING gt_authorized_cc gt_bukrs.                                     .

  SELECT * FROM /ors/usermap     INTO TABLE gt_usermap. "#EC CI_NOWHERE
  SELECT * FROM /opt/appr_limit  INTO TABLE @DATA(gt_level_temp). "#EC CI_NOWHERE
  SELECT * FROM /opt/appr_coa    INTO TABLE @DATA(gt_ncoa_temp) WHERE comp_code IN @gt_bukrs.
  SELECT * FROM /opt/bl_rpt_auth INTO TABLE gt_authn.   "#EC CI_NOWHERE
  SELECT * FROM /ors/expense_dec INTO TABLE gt_extype WHERE language = sy-langu.
  SELECT * FROM /opt/at_levelt   INTO TABLE gt_lvltxt WHERE spras = sy-langu.
  SELECT * FROM /opt/bl_appcoa   INTO TABLE gt_coa.     "#EC CI_NOWHERE
  SELECT * FROM /opt/bl_ap_coder INTO TABLE gt_coder.   "#EC CI_NOWHERE
  SELECT * FROM /opt/bl_t401     INTO TABLE gt_401.     "#EC CI_NOWHERE
  SELECT * FROM /opt/bl_t402     INTO TABLE gt_402.     "#EC CI_NOWHERE

  IF gt_coa[] IS NOT INITIAL.
    SORT gt_coa BY opt_userid counter.
    gt_coa_old[] = gt_coa[].
  ENDIF.
  IF gt_401[] IS NOT INITIAL.
    gt_401_old[] = gt_401[].
  ENDIF.

*--Approval Limit/Level
  LOOP AT gt_level_temp INTO DATA(ls_level_temp).
    MOVE-CORRESPONDING ls_level_temp TO gt_level1.

    READ TABLE gt_extype INTO gs_extype WITH KEY expense_type = gt_level1-expense_type.
    IF sy-subrc = 0.
      IF gs_extype-expense_type IS INITIAL.
        gt_level1-extxt = gs_extype-expense_desc.
      ELSE.
        CONCATENATE gs_extype-expense_type '-' gs_extype-expense_desc INTO gt_level1-extxt
          SEPARATED BY space.
      ENDIF.
    ENDIF.

    READ TABLE gt_lvltxt INTO gs_lvltxt WITH KEY appr_level = gt_level1-appr_level.
    IF sy-subrc = 0.
      CONCATENATE gs_lvltxt-appr_level '-' gs_lvltxt-descr INTO gt_level1-descr SEPARATED BY space.
    ENDIF.

    READ TABLE gt_values_h INTO gs_values_h WITH KEY domvalue_l = gt_level1-head_limit_chk.
    IF sy-subrc = 0.
      CONCATENATE gs_values_h-domvalue_l '-' gs_values_h-ddtext INTO gt_level1-btext.
    ENDIF.
    MOVE-CORRESPONDING gt_level1 TO gt_level_old.
    APPEND gt_level_old.

    IF NOT /opt/vim_auth_check=>is_active IS INITIAL.
      IF sy-repid = '/OPT/AR_COA'.
        CALL METHOD /opt/vim_auth_check=>check_liap_level_limits
          EXPORTING
            pi_bukrs = gt_level1-bukrs
            pi_actvt = lv_actvt
          EXCEPTIONS
            failed   = 1.
        IF sy-subrc <> 0.
          INSERT gt_level1 INTO TABLE gt_level_filtered.
        ELSE.
          APPEND gt_level1.
        ENDIF.
      ELSE.
        APPEND gt_level1.
      ENDIF.
    ELSE.
      APPEND gt_level1.
    ENDIF.
    CLEAR: gt_level1,ls_level_temp,gs_lvltxt,gs_values_h,gs_extype.
  ENDLOOP.

  SORT gt_level1 BY bukrs expense_type appr_level.
  SORT gt_usermap BY opt_userid.                            "VIMI-25628
*--COA Details
  LOOP AT gt_ncoa_temp INTO DATA(ls_ncoa_temp).
    IF ls_ncoa_temp-appr_level GT 1.
      MOVE-CORRESPONDING ls_ncoa_temp TO gt_ncoa3.

      READ TABLE gt_lvltxt INTO gs_lvltxt WITH KEY appr_level = ls_ncoa_temp-appr_level.
      IF sy-subrc = 0.
        IF gs_lvltxt-appr_level IS INITIAL.
          gt_ncoa3-descr = gs_lvltxt-descr.
        ELSE.
          CONCATENATE gs_lvltxt-appr_level '-' gs_lvltxt-descr INTO gt_ncoa3-descr SEPARATED BY space.
        ENDIF.
      ENDIF.

      MOVE-CORRESPONDING gt_ncoa3 TO gt_ncoa_old.
      APPEND gt_ncoa_old.

      IF NOT /opt/vim_auth_check=>is_active IS INITIAL.
        READ TABLE gt_usermap WITH KEY opt_userid = ls_ncoa_temp-opt_userid BINARY SEARCH.
        IF sy-subrc <> 0.
          CLEAR lv_group.
        ELSE.
          READ TABLE git_usr02 INTO gwa_usr02 WITH KEY bname = gt_usermap-sap_user_id.
          IF sy-subrc EQ 0.
            lv_group = gwa_usr02-class.
          ENDIF.
        ENDIF.
        IF sy-repid = '/OPT/AR_COA'.
          CALL METHOD /opt/vim_auth_check=>check_liap_approver
            EXPORTING
              pi_group = lv_group
              pi_bukrs = ls_ncoa_temp-comp_code
              pi_actvt = lv_actvt
            EXCEPTIONS
              failed   = 1.
          IF sy-subrc <> 0.
            INSERT gt_ncoa3 INTO TABLE gt_ncoa_filtered.
          ELSE.
            APPEND gt_ncoa3.
          ENDIF.
        ELSE.
          APPEND gt_ncoa3.
        ENDIF.
      ELSE.
        APPEND gt_ncoa3.
      ENDIF.
    ELSE.
      MOVE-CORRESPONDING ls_ncoa_temp TO gt_ncoa2.

      READ TABLE gt_lvltxt INTO gs_lvltxt WITH KEY appr_level = ls_ncoa_temp-appr_level.
      IF sy-subrc = 0.
        IF gs_lvltxt-appr_level IS INITIAL.
          gt_ncoa2-descr = gs_lvltxt-descr.
        ELSE.
          CONCATENATE gs_lvltxt-appr_level '-' gs_lvltxt-descr INTO gt_ncoa2-descr SEPARATED BY space.
        ENDIF.
      ENDIF.

      MOVE-CORRESPONDING gt_ncoa2 TO gt_ncoa_old.
      APPEND gt_ncoa_old.

      IF NOT /opt/vim_auth_check=>is_active IS INITIAL.
        READ TABLE gt_usermap WITH KEY opt_userid = ls_ncoa_temp-opt_userid BINARY SEARCH.
        IF sy-subrc <> 0.
          CLEAR lv_group.
        ELSE.
          READ TABLE git_usr02 INTO gwa_usr02 WITH KEY bname = gt_usermap-sap_user_id.
          IF sy-subrc EQ 0.
            lv_group = gwa_usr02-class.
          ENDIF.
        ENDIF.
        IF sy-repid = '/OPT/AR_COA'.
          CALL METHOD /opt/vim_auth_check=>check_liap_approver
            EXPORTING
              pi_group = lv_group
              pi_bukrs = ls_ncoa_temp-comp_code
              pi_actvt = lv_actvt
            EXCEPTIONS
              failed   = 1.
          IF sy-subrc <> 0.
            INSERT gt_ncoa2 INTO TABLE gt_ncoa_filtered.
          ELSE.
            APPEND gt_ncoa2.
          ENDIF.
        ELSE.
          APPEND gt_ncoa2.
        ENDIF.
      ELSE.
        APPEND gt_ncoa2.
      ENDIF.
    ENDIF.

    CLEAR: gt_usermap,ls_ncoa_temp,gs_lvltxt,gwa_usr02.
  ENDLOOP.

  SORT gt_ncoa_filtered BY comp_code appr_level opt_userid otype actorid counter.

*--User Details
  IF gt_usermap[] IS NOT INITIAL.
*    SORT gt_usermap BY opt_userid.                         "VIMI-25628
    gt_usermap_old[] =  gt_usermap_unfiltered[] = gt_sapuser[] = gt_usermap[].

    IF NOT /opt/vim_auth_check=>is_active IS INITIAL.
      DELETE gt_sapuser WHERE sap_user_id IS INITIAL.
      SORT   gt_sapuser BY sap_user_id.
      DELETE ADJACENT DUPLICATES FROM gt_sapuser COMPARING sap_user_id.
      IF gt_sapuser[] IS NOT INITIAL.
        SELECT bname class FROM  usr02 INTO TABLE git_usr02 FOR ALL ENTRIES IN gt_sapuser
                                                            WHERE bname EQ gt_sapuser-sap_user_id.
      ENDIF.

      LOOP AT gt_usermap.
        lv_tabix = sy-tabix.
        READ TABLE git_usr02 INTO gwa_usr02 WITH KEY bname = gt_usermap-sap_user_id.
        IF sy-subrc EQ 0.
          lv_group = gwa_usr02-class.
        ENDIF.
        CALL METHOD /opt/vim_auth_check=>check_appr_usermap
          EXPORTING
            pi_group = lv_group
            pi_actvt = lv_actvt
          EXCEPTIONS
            failed   = 1.
        IF sy-subrc <> 0.
          INSERT gt_usermap INTO TABLE gt_usermap_filtered.
          DELETE gt_usermap INDEX lv_tabix.
        ELSE.
*-- Bulk approval text
          READ TABLE gt_values_b INTO gs_values_b WITH KEY domvalue_l = gt_usermap-bulkapproval.
          IF sy-subrc EQ 0.
            IF gt_usermap-bulkapproval = ' '.
              CONCATENATE 'N' '-' gs_values_b-ddtext INTO gt_usermap-btext.
            ELSE.
              CONCATENATE gt_usermap-bulkapproval '-' gs_values_b-ddtext INTO gt_usermap-btext.
            ENDIF.
          ENDIF.

*-- User type text
          READ TABLE gt_values INTO gs_values WITH KEY domvalue_l = gt_usermap-user_type.
          IF sy-subrc EQ 0.
            IF gt_usermap-user_type = ' '.
              CONCATENATE 'A' '-' gs_values-ddtext INTO gt_usermap-utext.
            ELSE.
              CONCATENATE gt_usermap-user_type '-' gs_values-ddtext INTO gt_usermap-utext.
            ENDIF.
          ENDIF.

*-- Populate manager id
          READ TABLE gt_coa WITH KEY opt_userid = gt_usermap-opt_userid BINARY SEARCH.
          IF sy-subrc EQ 0.
            gt_usermap-manager_id = gt_coa-manager_id.
          ENDIF.

          MODIFY gt_usermap INDEX lv_tabix TRANSPORTING btext utext manager_id.
        ENDIF.
        CLEAR: gwa_usr02,lv_tabix,gs_values,gs_values_b.
      ENDLOOP.
    ELSE.
      LOOP AT gt_usermap.
        lv_tabix = sy-tabix.

*-- Bulk approval text
        READ TABLE gt_values_b INTO gs_values_b WITH KEY domvalue_l = gt_usermap-bulkapproval.
        IF sy-subrc EQ 0.
          IF gt_usermap-bulkapproval = ' '.
            CONCATENATE 'N' '-' gs_values_b-ddtext INTO gt_usermap-btext.
          ELSE.
            CONCATENATE gt_usermap-bulkapproval '-' gs_values_b-ddtext INTO gt_usermap-btext.
          ENDIF.
        ENDIF.

*-- User type text
        READ TABLE gt_values INTO gs_values WITH KEY domvalue_l = gt_usermap-user_type.
        IF sy-subrc EQ 0.
          IF gt_usermap-user_type = ' '.
            CONCATENATE 'A' '-' gs_values-ddtext INTO gt_usermap-utext.
          ELSE.
            CONCATENATE gt_usermap-user_type '-' gs_values-ddtext INTO gt_usermap-utext.
          ENDIF.
        ENDIF.

*-- Populate manager id
        READ TABLE gt_coa WITH KEY opt_userid = gt_usermap-opt_userid BINARY SEARCH.
        IF sy-subrc EQ 0.
          gt_usermap-manager_id = gt_coa-manager_id.
        ENDIF.

        MODIFY gt_usermap INDEX lv_tabix TRANSPORTING btext utext manager_id.
        CLEAR : gs_values,gs_values_b,lv_tabix.
      ENDLOOP.
    ENDIF.
  ENDIF.

  IF NOT /opt/vim_auth_check=>is_active IS INITIAL.
    IF sy-repid NE '/OPT/AR_COA'.
* COA limits
      SORT gt_coa BY opt_userid counter.
      LOOP AT gt_coa.
        AT NEW opt_userid.
          READ TABLE gt_usermap WITH KEY opt_userid = gt_coa-opt_userid BINARY SEARCH.
          IF sy-subrc <> 0.
            CLEAR lv_group.
          ELSE.
            READ TABLE git_usr02 INTO gwa_usr02 WITH KEY bname = gt_usermap-sap_user_id.
            IF sy-subrc EQ 0.
              lv_group = gwa_usr02-class.
            ENDIF.
          ENDIF.
        ENDAT.
        IF gt_coa-bukrs = '*' OR gt_coa-bukrs IS INITIAL.
          CALL METHOD /opt/vim_auth_check=>check_appr_limits
            EXPORTING
              pi_group = lv_group
              pi_bukrs = '    '
              pi_actvt = lv_actvt
            EXCEPTIONS
              failed   = 1.
        ELSE.
          CALL METHOD /opt/vim_auth_check=>check_appr_limits
            EXPORTING
              pi_group = lv_group
              pi_bukrs = gt_coa-bukrs
              pi_actvt = lv_actvt
            EXCEPTIONS
              failed   = 1.
        ENDIF.
        IF sy-subrc <> 0.
          INSERT gt_coa INTO TABLE gt_coa_filtered.
          DELETE gt_coa.
        ENDIF.
      ENDLOOP.

* COA coders

      SORT gt_coder BY coder_id counter.
      LOOP AT gt_coder.
        AT NEW coder_id.
          READ TABLE gt_usermap WITH KEY opt_userid = gt_coder-coder_id BINARY SEARCH.
          IF sy-subrc <> 0.
            CLEAR lv_group.
          ELSE.
            READ TABLE git_usr02 INTO gwa_usr02 WITH KEY bname = gt_usermap-sap_user_id.
            IF sy-subrc EQ 0.
              lv_group = gwa_usr02-class.
            ENDIF.
          ENDIF.
        ENDAT.
        IF g_constant = 'R' OR gt_coder-company_code = '*' OR gt_coder-company_code IS INITIAL.
          CALL METHOD /opt/vim_auth_check=>check_appr_coder
            EXPORTING
              pi_group = lv_group
              pi_bukrs = '    '
              pi_actvt = lv_actvt
            EXCEPTIONS
              failed   = 1.
        ELSE.
          CALL METHOD /opt/vim_auth_check=>check_appr_coder
            EXPORTING
              pi_group = lv_group
              pi_bukrs = gt_coder-company_code
              pi_actvt = lv_actvt
            EXCEPTIONS
              failed   = 1.
        ENDIF.
        IF sy-subrc <> 0.
          INSERT gt_coder INTO TABLE gt_coder_filtered.
          DELETE gt_coder.
        ENDIF.
      ENDLOOP.
    ENDIF.

    IF ( NOT gt_usermap_filtered[] IS INITIAL ) OR
       ( NOT gt_coder_filtered[] IS INITIAL ) OR
       ( NOT gt_ncoa_filtered[] IS INITIAL ) OR
       ( NOT gt_level_filtered[] IS INITIAL ) OR
       ( NOT gt_lcoder_filtered[] IS INITIAL ) OR
       ( NOT gt_coa_filtered[] IS INITIAL ).
      MESSAGE s076.
    ENDIF.
  ENDIF.

  REFRESH : gt_level_temp,gt_ncoa_temp.
  FREE    : gt_level_temp,gt_ncoa_temp.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_AUTH_BUKRS
*&---------------------------------------------------------------------*
*       VIMI-23560
*----------------------------------------------------------------------*
*      <--P_GT_AUTHORIZED_CC  text
*      <--P_GT_BUKRS  text
*----------------------------------------------------------------------*
FORM get_auth_bukrs USING p_actvt CHANGING ct_authorized_cc LIKE gt_authorized_cc
                                           ct_bukrs         LIKE gt_bukrs.
  DATA: ls_authorized_cc LIKE LINE OF gt_authorized_cc,
        ls_t001          LIKE LINE OF git_t001,
        ls_bukrs         LIKE LINE OF gt_bukrs.

  IF gt_authorized_cc IS INITIAL.
    SELECT * FROM t001 INTO TABLE git_t001.

    LOOP AT git_t001 INTO ls_t001.
      IF /opt/vim_auth_check=>is_active = 'X'.
        AUTHORITY-CHECK OBJECT 'J_6NIM_CA5'
         ID 'BUKRS' FIELD ls_t001-bukrs
         ID 'ACTVT' FIELD p_actvt.

        IF sy-subrc = 0.
          ls_authorized_cc-bukrs = ls_t001-bukrs.
          APPEND ls_authorized_cc TO ct_authorized_cc.
          ls_bukrs-sign   = 'I'.
          ls_bukrs-option = 'EQ'.
          ls_bukrs-low    = ls_authorized_cc-bukrs.
          APPEND ls_bukrs TO ct_bukrs.
        ENDIF.
      ELSE.
        ls_authorized_cc-bukrs = ls_t001-bukrs.
        APPEND ls_authorized_cc TO ct_authorized_cc.
        ls_bukrs-sign   = 'I'.
        ls_bukrs-option = 'EQ'.
        ls_bukrs-low    = ls_authorized_cc-bukrs.
        APPEND ls_bukrs TO ct_bukrs.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.                    " GET_AUTH_BUKRS



*******************************************************************************************************************


<<<<<ZVIM_COA_UPLCFG_REPORTF01 >>>>>

*&---------------------------------------------------------------------*
*&  Include           /OPT/COA_UPLCFG_REPORTF01
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  UPLOAD
*&---------------------------------------------------------------------*
*      To Upload the data from file
*----------------------------------------------------------------------*
*      -->P_I_TAB_RAW_DATA   The records uploaded from file
*      -->P_P_FILE1          The file to be uploaded
*----------------------------------------------------------------------*
FORM upload  TABLES   p_i_tab_raw_data  TYPE truxs_t_text_data
* Begin of VIMI-16125 Replace
             USING    p_file1
                      p_ps.
*             USING    p_file1.
**                      p_ps.    "VIMI-14339
* End of VIMI-16125

  DATA :wa_tab_dataset(1000) TYPE c.
* To upload the data from the presentation
* Begin of VIMI-16125 Replace
  IF NOT p_ps IS INITIAL.
*  IF NOT p_ps IS INITIAL. "VIMI-14339
* End of VIMI-16125

* to upload the file into table
    CALL FUNCTION 'GUI_UPLOAD'
      EXPORTING
        filename                = p_file1
        filetype                = 'ASC'
      TABLES
        data_tab                = p_i_tab_raw_data
      EXCEPTIONS
        file_open_error         = 1
        file_read_error         = 2
        no_batch                = 3
        gui_refuse_filetransfer = 4
        invalid_type            = 5
        no_authority            = 6
        unknown_error           = 7
        bad_data_format         = 8
        header_not_allowed      = 9
        separator_not_allowed   = 10
        header_too_long         = 11
        unknown_dp_error        = 12
        access_denied           = 13
        dp_out_of_memory        = 14
        disk_full               = 15
        dp_timeout              = 16
        OTHERS                  = 17.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE 'I' NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      EXIT.
    ENDIF.

* Begin of VIMI-16125 Replace
  ELSE.
*   Begin of VIMI-16299 Replace
*    OPEN DATASET p_file1 FOR INPUT IN TEXT MODE ENCODING DEFAULT .
*    IF sy-subrc EQ 0.
*      DO.
*        READ DATASET  p_file1 INTO wa_tab_dataset.
*        IF sy-subrc NE 0.
*          EXIT.
*        ELSE.
*          APPEND wa_tab_dataset TO p_i_tab_raw_data.
*        ENDIF.
*      ENDDO.
*      CLOSE DATASET p_file1.
*    ELSE.
*      CLOSE DATASET p_file1.
*      MESSAGE text-t40 TYPE 'I'.
*    ENDIF.
    DATA: lt_raw_coa TYPE truxs_t_text_data.
    DATA: lt_raw_usr TYPE truxs_t_text_data.
    DATA: lt_raw_apl TYPE truxs_t_text_data.

    LOOP AT gt_file INTO gs_file.
      CLEAR: lt_raw_usr, lt_raw_coa, lt_raw_apl.
      OPEN DATASET gs_file-filename FOR INPUT IN TEXT MODE ENCODING DEFAULT WITH SMART LINEFEED .  "@001
      IF sy-subrc EQ 0.
        DO.
          READ DATASET  gs_file-filename INTO wa_tab_dataset.
          IF sy-subrc NE 0.
            EXIT.
          ELSE.
            IF wa_tab_dataset(3) = c_usr.
              APPEND wa_tab_dataset TO lt_raw_usr.
            ENDIF.
            IF wa_tab_dataset(3) = c_coa.
              APPEND wa_tab_dataset TO lt_raw_coa.
            ENDIF.
            IF wa_tab_dataset(3) = c_apl.
              APPEND wa_tab_dataset TO lt_raw_apl.
            ENDIF.
          ENDIF.
        ENDDO.
        CLOSE DATASET gs_file-filename.
        CLEAR p_i_tab_raw_data.
        APPEND LINES OF lt_raw_usr TO p_i_tab_raw_data.
        APPEND LINES OF lt_raw_coa TO p_i_tab_raw_data.
        APPEND LINES OF lt_raw_apl TO p_i_tab_raw_data.
      ELSE.
        CLOSE DATASET gs_file-filename.
        MESSAGE TEXT-t40 TYPE 'I'.
      ENDIF.
    ENDLOOP.
*   End of VIMI-16299
  ENDIF.

*Begin 7.5 VIMI-14339 comment out
*  ELSE.
*    OPEN DATASET p_file1 FOR INPUT IN TEXT MODE ENCODING DEFAULT .
*    IF sy-subrc EQ 0.
*      DO.
*        READ DATASET  p_file1 INTO wa_tab_dataset.
*        IF sy-subrc NE 0.
*          EXIT.
*        ELSE.
*          APPEND wa_tab_dataset TO p_i_tab_raw_data.
*        ENDIF.
*      ENDDO.
*      CLOSE DATASET p_file1.
*    ELSE.
*      CLOSE DATASET p_file1.
*      MESSAGE text-t40 TYPE 'I'.
*    ENDIF.
*   ENDIF.
*End 7.5 VIMI-14339 comment out
* End of VIMI-16125

ENDFORM.                    " UPLOAD
*&---------------------------------------------------------------------*
*&      Form  DOWNLOAD
*&---------------------------------------------------------------------*
*    Download the data from COA tables
*----------------------------------------------------------------------*
*      -->P_I_TAB_RAW_DATA   The records downloaded to the file
*      -->P_P_FILE1          The file where the data is downloaded
*----------------------------------------------------------------------*
FORM download  TABLES   p_i_tab_raw_data  TYPE truxs_t_text_data
* Begin of VIMI-16125 Replace
               USING    p_file1
                        p_ps.
*               USING    p_file1.
**                        p_ps.    "VIMI-14339
* End of VIMI-16125

  gv_param_name = 'COA_UPLOAD_EXIT_DW'.
  PERFORM custom_exit USING gv_param_name
                      CHANGING fm_exit.

  IF NOT fm_exit IS INITIAL.
*    Begin of VIMI-16299 Replace
*    PERFORM exit_fm TABLES gt_usermap_coa
*                           gt_appr_coa
*                           gt_appr_limit
*                    USING  fm_exit
*                           p_dmode
*                           p_fmode
*                           p_upload
*                           p_dwload
*                           p_file1
*                 CHANGING  g_success
*                           rc .

    LOOP AT gt_file INTO gs_file.
      p_file1 = gs_file-filename.
      PERFORM exit_fm TABLES gt_usermap_coa
                             gt_appr_coa
                             gt_appr_limit
                      USING  fm_exit
                             p_dmode
                             p_fmode
                             p_upload
                             p_dwload
                             p_file1
                   CHANGING  g_success
                             rc .
    ENDLOOP.
*   End of VIMI-16299
  ELSE.
    PERFORM download_get_data.
  ENDIF.

ENDFORM.                    " DOWNLOAD
*&---------------------------------------------------------------------*
*&      Form  UPLOAD_DATA
*&---------------------------------------------------------------------*
*    Distribute the data based on the tab type
*----------------------------------------------------------------------*
*      -->P_I_TAB_RAW_DATA  The uploaded records from the file
*      -->P_gt_coa_upload   The uploaded records from the file
*----------------------------------------------------------------------*
FORM upload_data  TABLES   p_i_tab_raw_data TYPE truxs_t_text_data
                           p_gt_coa_upload  LIKE gt_coa_upload.

  DATA : p1_i_tab_raw_data   TYPE LINE OF truxs_t_text_data,
         i_tab_raw_data_usr  TYPE truxs_t_text_data,
         i_tab_raw_data_coa  TYPE truxs_t_text_data,
         i_tab_raw_data_appl TYPE truxs_t_text_data.

  CHECK NOT gt_coa_upload IS INITIAL.

* To seperate the data into repective tab from the file
  IF NOT p_i_tab_raw_data[] IS INITIAL.

    LOOP AT  p_i_tab_raw_data INTO p1_i_tab_raw_data .
      IF  p1_i_tab_raw_data+0(3) = c_usr.
        APPEND  p1_i_tab_raw_data TO i_tab_raw_data_usr .

      ELSEIF  p1_i_tab_raw_data+0(3) = c_coa.
        APPEND  p1_i_tab_raw_data TO i_tab_raw_data_coa .

      ELSEIF  p1_i_tab_raw_data+0(3) = c_apl.
        APPEND  p1_i_tab_raw_data TO i_tab_raw_data_appl .

      ENDIF.
    ENDLOOP.

* User Tab
    IF NOT  i_tab_raw_data_usr IS INITIAL.
      gv_changedoc_usermap = 'X'.            "VIMI-22104
* To create the dynamic table with the fields in the respective coa tables.
      PERFORM dynamic_table TABLES i_tab_raw_data_usr
                                   p_gt_coa_upload.
    ENDIF.

* COA Tab
    IF NOT  i_tab_raw_data_coa IS INITIAL.
      gv_changedoc_coa = 'X'.             "VIMI-22104
      PERFORM dynamic_table TABLES i_tab_raw_data_coa
                                   p_gt_coa_upload.
    ENDIF.

* Approver level Tab
    IF NOT  i_tab_raw_data_appl IS INITIAL.
      gv_changedoc_applimit = 'X'.       "VIMI-22104
      PERFORM dynamic_table TABLES i_tab_raw_data_appl
                                   p_gt_coa_upload.
    ENDIF.
  ELSE.
    MESSAGE TEXT-t37 TYPE 'E'.
    EXIT.
  ENDIF.



ENDFORM.                    " UPLOAD_DATA
*&---------------------------------------------------------------------*
*&      Form  DYNAMIC_TABLE
*&---------------------------------------------------------------------*
*   To fill the internal tables from the file
*----------------------------------------------------------------------*
*      -->P_I_TAB_RAW_DATA_USR   The uploaded records from the file
*      -->P_P_gt_coa_upload      The config table for COA_UPLOAD
*----------------------------------------------------------------------*
FORM dynamic_table  TABLES   p_i_tab_raw_data1 TYPE truxs_t_text_data
                             p_gt_coa_upload LIKE gt_coa_upload.
  CLEAR : wa_it_fldcat.
  REFRESH : t_fldcat1.

  DATA : lv_lines TYPE i.    "VIMI-18139/snittala
  DATA : ls_tab_raw_data TYPE LINE OF truxs_t_text_data,
         p_gs_coa_upload LIKE LINE OF gt_coa_upload,
         lv_table_name   TYPE ddobjname,
         i_tab_raw_data  TYPE truxs_t_text_data.
* Begin of VIMI-18588/snittala
  FIELD-SYMBOLS : <f2>, <f3>.
  DATA : wl_counter(10)  TYPE n,
         wl_apprlevel(5) TYPE n.
* End of VIMI-18588/snittala

* begin of VIMI-16244
  DATA: lv_wbs_element LIKE gs_app_coa-wbs_element.
  DATA: mess_typ TYPE sy-msgty VALUE 'S'.

  EXPORT mess_typ TO MEMORY ID 'EXT_MESS_TYP'.

* end of VIMI-16244

* begin of VIMI-16273
  DATA: BEGIN OF ls_del_flag,
          delete_flag TYPE c,
        END OF ls_del_flag.
* end of VIMI-16273

  READ TABLE p_i_tab_raw_data1 INTO ls_tab_raw_data INDEX 1.
  IF sy-subrc = 0.
    READ TABLE p_gt_coa_upload INTO p_gs_coa_upload WITH KEY tab = ls_tab_raw_data+0(3).
    IF sy-subrc = 0.
      lv_table_name = p_gs_coa_upload-table_name.

      CALL FUNCTION 'DDIF_FIELDINFO_GET'
        EXPORTING
          tabname        = lv_table_name
          langu          = sy-langu
        TABLES
          dfies_tab      = dtab
        EXCEPTIONS
          not_found      = 1
          internal_error = 2
          OTHERS         = 3.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE 'I' NUMBER sy-msgno
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.

      LOOP AT p_gt_coa_upload INTO p_gs_coa_upload WHERE tab = ls_tab_raw_data+0(3).
        AT NEW tab.
          CLEAR wa_it_fldcat.
          wa_it_fldcat-fieldname =  'TAB'.
          wa_it_fldcat-datatype = 'CHAR'.
          wa_it_fldcat-intlen = '30'.
          APPEND wa_it_fldcat TO t_fldcat1.

*          CLEAR wa_it_fldcat.
*          wa_it_fldcat-fieldname =  'TABLE_NAME'.
*          wa_it_fldcat-datatype = 'CHAR'.
*          wa_it_fldcat-intlen = '30'.
*          APPEND wa_it_fldcat TO t_fldcat1.
        ENDAT.
        READ TABLE dtab INTO dtab WITH  KEY fieldname = p_gs_coa_upload-fields.
* begin of VIMI-16273
        IF sy-subrc = 0.
          wa_it_fldcat-datatype = dtab-datatype.
          wa_it_fldcat-intlen = dtab-intlen.
        ELSE.
          CLEAR wa_it_fldcat-datatype.
          CLEAR wa_it_fldcat-intlen.
        ENDIF.
        wa_it_fldcat-fieldname =  p_gs_coa_upload-fields.
*        wa_it_fldcat-datatype = dtab-datatype.
*        wa_it_fldcat-intlen = dtab-intlen.
* end of VIMI-16273
        APPEND wa_it_fldcat TO t_fldcat1.
      ENDLOOP.

* crete dynamic table
      CALL METHOD cl_alv_table_create=>create_dynamic_table
        EXPORTING
          it_fieldcatalog = t_fldcat1
        IMPORTING
          ep_table        = t_newtable.

      ASSIGN t_newtable->* TO <t_dyntable>.

* Create dynamic work area and assign to FS

      CREATE DATA t_newline LIKE LINE OF <t_dyntable>.
      ASSIGN t_newline->* TO <fs_dyntable>.

      LOOP AT p_i_tab_raw_data1 INTO ls_tab_raw_data.
        APPEND ls_tab_raw_data TO  i_tab_raw_data.
      ENDLOOP.

*Convert csv format to internal table
      CALL FUNCTION 'TEXT_CONVERT_TEX_TO_SAP'
        EXPORTING
          i_field_seperator    = ','
*         I_LINE_HEADER        =
          i_tab_raw_data       = i_tab_raw_data
*         I_FILENAME           =
        TABLES
          i_tab_converted_data = <t_dyntable>
        EXCEPTIONS
          conversion_failed    = 1
          OTHERS               = 2.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE 'I' NUMBER sy-msgno DISPLAY LIKE 'E'
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        STOP.
      ENDIF.

*     Begin of Insert VIMI-16538
      DATA: lv_validate TYPE c.
      DATA: lv_valid TYPE c.
      DATA: lv_mcell TYPE lvc_s_modi.
      DATA: ls_appr_coa LIKE LINE OF gt_appr_coa_protocol.
      CALL FUNCTION '/OPT/VIM_READ_CONSTANT'
        EXPORTING
          prod_code   = 'IAP'
          param_name  = 'COA_VAL_INPUT_FLDS'
        IMPORTING
          param_value = lv_validate
        EXCEPTIONS
          OTHERS      = 0.
      IF sy-subrc <> 0.
        lv_validate = abap_false.
      ENDIF.
*     End of Insert VIMI-16538

      CASE ls_tab_raw_data+0(3).
        WHEN c_usr.
          LOOP AT <t_dyntable> INTO <fs_dyntable>.
            MOVE-CORRESPONDING <fs_dyntable> TO gs_usermap_coa.
            TRANSLATE gs_usermap_coa-opt_userid TO UPPER CASE.
            TRANSLATE gs_usermap_coa TO UPPER CASE.
            APPEND gs_usermap_coa TO gt_usermap_coa.
          ENDLOOP.

        WHEN c_coa.
          LOOP AT <t_dyntable> INTO <fs_dyntable>.
* Begin of VIMI-18588/snittala
* If input file counter value is greater than 99999.
            CLEAR : wl_counter,wl_apprlevel.
            ASSIGN COMPONENT 'COUNTER' OF STRUCTURE <fs_dyntable> TO <f2>.
            MOVE <f2> TO wl_counter.
            ASSIGN COMPONENT 'APPR_LEVEL' OF STRUCTURE <fs_dyntable> TO <f3>.
            MOVE <f3> TO wl_apprlevel.
            UNASSIGN : <f2>,<f3>.
            IF wl_counter > 99999.
              MOVE-CORRESPONDING <fs_dyntable> TO gs_app_coa.
              ls_appr_coa-comp_code = gs_app_coa-comp_code.
              ls_appr_coa-appr_level = wl_apprlevel+2(3).
              ls_appr_coa-opt_userid = gs_app_coa-opt_userid.
              ls_appr_coa-msg = 'Max counter limit exceeded.Record ignored.'(046).
              APPEND ls_appr_coa TO gt_appr_coa_val_error.
              CLEAR ls_appr_coa.
              CONTINUE.
            ENDIF.
* End of  VIMI-18588/snittala

            MOVE-CORRESPONDING <fs_dyntable> TO gs_app_coa.

            TRANSLATE gs_app_coa TO UPPER CASE.
* Start of INS VIMI-25735
            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
              EXPORTING
                input  = gs_app_coa-comp_code
              IMPORTING
                output = gs_app_coa-comp_code.
* End of INS VIMI-25735

            IF p_conv IS INITIAL. "added VIMI-16244
*             Begin of Insert VIMI-16538
              CLEAR l_valid.
*             End of Insert VIMI-16538

*             Begin of Insert VIMI-12622/STAMADA
              IF gs_app_coa-kostl IS NOT INITIAL.  "added VIMI-16244
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = gs_app_coa-kostl
                  IMPORTING
                    output = gs_app_coa-kostl.
*               Begin of Insert VIMI-16538
                IF lv_validate = abap_true AND
                   gs_app_coa-kostl NE space.
                  MOVE gs_app_coa-kostl TO lv_mcell-value.
                  PERFORM validate_fields USING lv_mcell 'CSKS' 'KOSTL'
                                          CHANGING l_valid.
                  IF l_valid = 'N'.
                    CLEAR ls_appr_coa.
                    MOVE-CORRESPONDING gs_app_coa TO ls_appr_coa.
                    CONCATENATE
                      'Error validating'(m18) 'KOSTL'
                      gs_app_coa-kostl
                      INTO ls_appr_coa-msg SEPARATED BY space.
                    APPEND ls_appr_coa TO gt_appr_coa_val_error.
                    CONTINUE.
                  ENDIF.
                ENDIF.
*               End of Insert VIMI-16538
              ENDIF."added VIMI-16244
              IF gs_app_coa-kostl2 IS NOT INITIAL.  "added VIMI-16244
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = gs_app_coa-kostl2
                  IMPORTING
                    output = gs_app_coa-kostl2.
*               Begin of Insert VIMI-16538
                IF lv_validate = abap_true AND
                   gs_app_coa-kostl2 NE space.
                  MOVE gs_app_coa-kostl2 TO lv_mcell-value.
                  PERFORM validate_fields USING lv_mcell 'CSKS' 'KOSTL'
                                          CHANGING l_valid.
                  IF l_valid = 'N'.
                    CLEAR ls_appr_coa.
                    MOVE-CORRESPONDING gs_app_coa TO ls_appr_coa.
                    CONCATENATE
                      'Error validating'(m18) 'KOSTL2'
                      gs_app_coa-kostl2
                      INTO ls_appr_coa-msg SEPARATED BY space.
                    APPEND ls_appr_coa TO gt_appr_coa_val_error.
                    CONTINUE.
                  ENDIF.
                ENDIF.
*               End of Insert VIMI-16538
*           End of insert VIMI-12622/STAMADA
*           begin of VIMI-16244
              ENDIF.
              IF gs_app_coa-wbs_element IS NOT INITIAL AND gs_app_coa-wbs_element <> '*'.
                lv_wbs_element = gs_app_coa-wbs_element.
                CALL FUNCTION 'CONVERSION_EXIT_ABPSN_INPUT'
                  EXPORTING
                    input  = lv_wbs_element
                  IMPORTING
                    output = lv_wbs_element.
                IF lv_wbs_element IS INITIAL.
                  APPEND  gs_app_coa TO gt_appr_coa_conv_error.
                  CONTINUE.
                ELSE.
                  CALL FUNCTION 'CONVERSION_EXIT_ABPSN_INPUT'
                    EXPORTING
                      input  = gs_app_coa-wbs_element
                    IMPORTING
                      output = gs_app_coa-wbs_element.
                ENDIF.
*               Begin of Insert VIMI-16538
                IF lv_validate = abap_true AND
                   gs_app_coa-wbs_element NE space.
                  MOVE gs_app_coa-wbs_element TO lv_mcell-value.
                  PERFORM validate_wbs_element USING lv_mcell-value
                                               CHANGING l_valid.
                  IF l_valid = 'N'.
                    CLEAR ls_appr_coa.
                    MOVE-CORRESPONDING gs_app_coa TO ls_appr_coa.
                    CONCATENATE
                       'Error validating'(m18) 'WBS_ELEMENT'
                      gs_app_coa-wbs_element
                      INTO ls_appr_coa-msg SEPARATED BY space.
                    APPEND ls_appr_coa TO gt_appr_coa_val_error.
                    CONTINUE.
                  ENDIF.
                ENDIF.
*               End of Insert VIMI-16538
              ENDIF.
              IF gs_app_coa-wbs_element2 IS NOT INITIAL AND gs_app_coa-wbs_element2 <> '*'.
                lv_wbs_element = gs_app_coa-wbs_element2.
                CALL FUNCTION 'CONVERSION_EXIT_ABPSN_INPUT'
                  EXPORTING
                    input  = lv_wbs_element
                  IMPORTING
                    output = lv_wbs_element.
                IF lv_wbs_element IS INITIAL.
                  APPEND  gs_app_coa TO gt_appr_coa_conv_error.
                  CONTINUE.
                ELSE.
                  CALL FUNCTION 'CONVERSION_EXIT_ABPSN_INPUT'
                    EXPORTING
                      input  = gs_app_coa-wbs_element2
                    IMPORTING
                      output = gs_app_coa-wbs_element2.
                ENDIF.
*               Begin of Insert VIMI-16538
                IF lv_validate = abap_true AND
                   gs_app_coa-wbs_element2 NE space.
                  MOVE gs_app_coa-wbs_element2 TO lv_mcell-value.
                  PERFORM validate_wbs_element USING lv_mcell-value
                                               CHANGING l_valid.
                  IF l_valid = 'N'.
                    CLEAR ls_appr_coa.
                    MOVE-CORRESPONDING gs_app_coa TO ls_appr_coa.
                    CONCATENATE
                       'Error validating'(m18) 'WBS_ELEMENT2'
                      gs_app_coa-wbs_element2
                      INTO ls_appr_coa-msg SEPARATED BY space.
                    APPEND ls_appr_coa TO gt_appr_coa_val_error.
                    CONTINUE.
                  ENDIF.
                ENDIF.
*               End of Insert VIMI-16538
              ENDIF.
              IF gs_app_coa-internal_order IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = gs_app_coa-internal_order
                  IMPORTING
                    output = gs_app_coa-internal_order.
*               Begin of Insert VIMI-16538
                IF lv_validate = abap_true AND
                   gs_app_coa-internal_order NE space.
                  MOVE gs_app_coa-internal_order TO lv_mcell-value.
                  PERFORM validate_fields USING lv_mcell 'AUFK' 'AUFNR'
                                          CHANGING l_valid.
                  IF l_valid = 'N'.
                    CLEAR ls_appr_coa.
                    MOVE-CORRESPONDING gs_app_coa TO ls_appr_coa.
                    CONCATENATE
                       'Error validating'(m18) 'INTERNAL_ORDER'
                      gs_app_coa-internal_order
                      INTO ls_appr_coa-msg SEPARATED BY space.
                    APPEND ls_appr_coa TO gt_appr_coa_val_error.
                    CONTINUE.
                  ENDIF.
                ENDIF.
*               End of Insert VIMI-16538
              ENDIF.
              IF gs_app_coa-internal_order2 IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = gs_app_coa-internal_order2
                  IMPORTING
                    output = gs_app_coa-internal_order2.
*               Begin of Insert VIMI-16538
                IF lv_validate = abap_true AND
                   gs_app_coa-internal_order2 NE space.
                  MOVE gs_app_coa-internal_order2 TO lv_mcell-value.
                  PERFORM validate_fields USING lv_mcell 'AUFK' 'AUFNR'
                                          CHANGING l_valid.
                  IF l_valid = 'N'.
                    CLEAR ls_appr_coa.
                    MOVE-CORRESPONDING gs_app_coa TO ls_appr_coa.
                    CONCATENATE
                       'Error validating'(m18) 'INTERNAL_ORDER2'
                      gs_app_coa-internal_order2
                      INTO ls_appr_coa-msg SEPARATED BY space.
                    APPEND ls_appr_coa TO gt_appr_coa_val_error.
                    CONTINUE.
                  ENDIF.
                ENDIF.
*               End of Insert VIMI-16538
              ENDIF.
*             Begin of Insert VIMI-16538
              IF gs_app_coa-expense_type IS NOT INITIAL.
                IF lv_validate = abap_true AND
                   gs_app_coa-expense_type NE space.
                  MOVE gs_app_coa-expense_type TO lv_mcell-value.
                  PERFORM validate_fields USING lv_mcell '/ORS/EXPENSE_TYP'
                                                         'EXPENSE_TYPE'
                                          CHANGING l_valid.
                  IF l_valid = 'N'.
                    CLEAR ls_appr_coa.
                    MOVE-CORRESPONDING gs_app_coa TO ls_appr_coa.
                    CONCATENATE
                       'Error validating'(m18) 'EXPENSE TYPE'
                      gs_app_coa-expense_type
                      INTO ls_appr_coa-msg SEPARATED BY space.
                    APPEND ls_appr_coa TO gt_appr_coa_val_error.
                    CONTINUE.
                  ENDIF.
                ENDIF.
              ENDIF.
              IF gs_app_coa-expense_type2 IS NOT INITIAL.
                IF lv_validate = abap_true AND
                   gs_app_coa-expense_type2 NE space.
                  MOVE gs_app_coa-expense_type2 TO lv_mcell-value.
                  PERFORM validate_fields USING lv_mcell '/ORS/EXPENSE_TYP'
                                                         'EXPENSE_TYPE'
                                          CHANGING l_valid.
                  IF l_valid = 'N'.
                    CLEAR ls_appr_coa.
                    MOVE-CORRESPONDING gs_app_coa TO ls_appr_coa.
                    CONCATENATE
                       'Error validating'(m18) 'EXPENSE_TYPE2'
                      gs_app_coa-expense_type2
                      INTO ls_appr_coa-msg SEPARATED BY space.
                    APPEND ls_appr_coa TO gt_appr_coa_val_error.
                    CONTINUE.
                  ENDIF.
                ENDIF.
              ENDIF.
              IF gs_app_coa-plant IS NOT INITIAL.
                IF lv_validate = abap_true AND
                   gs_app_coa-plant NE space.
                  MOVE gs_app_coa-plant TO lv_mcell-value.
                  PERFORM validate_fields USING lv_mcell 'T001W' 'WERKS'
                                          CHANGING l_valid.
                  IF l_valid = 'N'.
                    CLEAR ls_appr_coa.
                    MOVE-CORRESPONDING gs_app_coa TO ls_appr_coa.
                    CONCATENATE
                       'Error validating'(m18) 'PLANT'
                      gs_app_coa-plant
                      INTO ls_appr_coa-msg SEPARATED BY space.
                    APPEND ls_appr_coa TO gt_appr_coa_val_error.
                    CONTINUE.
                  ENDIF.
                ENDIF.
              ENDIF.
              IF gs_app_coa-plant2 IS NOT INITIAL.
                IF lv_validate = abap_true AND
                   gs_app_coa-plant2 NE space.
                  MOVE gs_app_coa-plant2 TO lv_mcell-value.
                  PERFORM validate_fields USING lv_mcell 'T001W' 'WERKS'
                                          CHANGING l_valid.
                  IF l_valid = 'N'.
                    CLEAR ls_appr_coa.
                    MOVE-CORRESPONDING gs_app_coa TO ls_appr_coa.
                    CONCATENATE
                       'Error validating'(m18) 'PLANT2'
                      gs_app_coa-plant2
                      INTO ls_appr_coa-msg SEPARATED BY space.
                    APPEND ls_appr_coa TO gt_appr_coa_val_error.
                    CONTINUE.
                  ENDIF.
                ENDIF.
              ENDIF.
              IF gs_app_coa-fund_center IS NOT INITIAL.
                IF lv_validate = abap_true AND
                   gs_app_coa-fund_center NE space.
                  MOVE gs_app_coa-fund_center TO lv_mcell-value.
                  PERFORM validate_fields USING lv_mcell 'FMFCTR' 'FICTR'
                                          CHANGING l_valid.
                  IF l_valid = 'N'.
                    CLEAR ls_appr_coa.
                    MOVE-CORRESPONDING gs_app_coa TO ls_appr_coa.
                    CONCATENATE
                       'Error validating'(m18) 'FUND_CENTER'
                      gs_app_coa-fund_center
                      INTO ls_appr_coa-msg SEPARATED BY space.
                    APPEND ls_appr_coa TO gt_appr_coa_val_error.
                    CONTINUE.
                  ENDIF.
                ENDIF.
              ENDIF.
              IF gs_app_coa-fund_center2 IS NOT INITIAL.
                IF lv_validate = abap_true AND
                   gs_app_coa-fund_center2 NE space.
                  MOVE gs_app_coa-fund_center2 TO lv_mcell-value.
                  PERFORM validate_fields USING lv_mcell 'FMFCTR' 'FICTR'
                                          CHANGING l_valid.
                  IF l_valid = 'N'.
                    CLEAR ls_appr_coa.
                    MOVE-CORRESPONDING gs_app_coa TO ls_appr_coa.
                    CONCATENATE
                       'Error validating'(m18) 'FUND_CENTER2'
                      gs_app_coa-fund_center2
                      INTO ls_appr_coa-msg SEPARATED BY space.
                    APPEND ls_appr_coa TO gt_appr_coa_val_error.
                    CONTINUE.
                  ENDIF.
                ENDIF.
              ENDIF.
              IF gs_app_coa-business_area IS NOT INITIAL.
                IF lv_validate = abap_true AND
                   gs_app_coa-business_area NE space.
                  MOVE gs_app_coa-business_area TO lv_mcell-value.
                  PERFORM validate_fields USING lv_mcell 'TGSB' 'GSBER'
                                          CHANGING l_valid.
                  IF l_valid = 'N'.
                    CLEAR ls_appr_coa.
                    MOVE-CORRESPONDING gs_app_coa TO ls_appr_coa.
                    CONCATENATE
                       'Error validating'(m18) 'BUSINESS_AREA'
                      gs_app_coa-business_area
                      INTO ls_appr_coa-msg SEPARATED BY space.
                    APPEND ls_appr_coa TO gt_appr_coa_val_error.
                    CONTINUE.
                  ENDIF.
                ENDIF.
              ENDIF.
              IF gs_app_coa-business_area2 IS NOT INITIAL.
                IF lv_validate = abap_true AND
                   gs_app_coa-business_area2 NE space.
                  MOVE gs_app_coa-business_area2 TO lv_mcell-value.
                  PERFORM validate_fields USING lv_mcell 'TGSB' 'GSBER'
                                          CHANGING l_valid.
                  IF l_valid = 'N'.
                    CLEAR ls_appr_coa.
                    MOVE-CORRESPONDING gs_app_coa TO ls_appr_coa.
                    CONCATENATE
                       'Error validating'(m18) 'BUSINESS_AREA2'
                      gs_app_coa-business_area2
                      INTO ls_appr_coa-msg SEPARATED BY space.
                    APPEND ls_appr_coa TO gt_appr_coa_val_error.
                    CONTINUE.
                  ENDIF.
                ENDIF.
              ENDIF.
              IF gs_app_coa-activity_type IS NOT INITIAL.
                IF lv_validate = abap_true AND
                   gs_app_coa-activity_type NE space.
                  MOVE gs_app_coa-activity_type TO lv_mcell-value.
                  PERFORM validate_fields USING lv_mcell 'CSLA' 'LSTAR'
                                          CHANGING l_valid.
                  IF l_valid = 'N'.
                    CLEAR ls_appr_coa.
                    MOVE-CORRESPONDING gs_app_coa TO ls_appr_coa.
                    CONCATENATE
                       'Error validating'(m18) 'ACTIVITY_TYPE'
                      gs_app_coa-activity_type
                      INTO ls_appr_coa-msg SEPARATED BY space.
                    APPEND ls_appr_coa TO gt_appr_coa_val_error.
                    CONTINUE.
                  ENDIF.
                ENDIF.
              ENDIF.
              IF gs_app_coa-activity_type2 IS NOT INITIAL.
                IF lv_validate = abap_true AND
                   gs_app_coa-activity_type2 NE space.
                  MOVE gs_app_coa-activity_type2 TO lv_mcell-value.
                  PERFORM validate_fields USING lv_mcell 'CSLA' 'LSTAR'
                                          CHANGING l_valid.
                  IF l_valid = 'N'.
                    CLEAR ls_appr_coa.
                    MOVE-CORRESPONDING gs_app_coa TO ls_appr_coa.
                    CONCATENATE
                       'Error validating'(m18) 'ACTIVITY_TYPE2'
                      gs_app_coa-activity_type2
                      INTO ls_appr_coa-msg SEPARATED BY space.
                    APPEND ls_appr_coa TO gt_appr_coa_val_error.
                    CONTINUE.
                  ENDIF.
                ENDIF.
              ENDIF.
*             added VIMI-16818
              IF gs_app_coa-comp_code IS NOT INITIAL.
                IF lv_validate = abap_true AND
                   gs_app_coa-comp_code NE space.
                  MOVE gs_app_coa-comp_code TO lv_mcell-value.
                  PERFORM validate_fields USING lv_mcell 'T001' 'BUKRS'
                                          CHANGING l_valid.
                  IF l_valid = 'N'.
                    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                      EXPORTING
                        input  = gs_app_coa-comp_code
                      IMPORTING
                        output = gs_app_coa-comp_code.
                    IF gs_app_coa-comp_code NE space.
                      MOVE gs_app_coa-comp_code TO lv_mcell-value.
                      CLEAR: l_valid.
                      PERFORM validate_fields USING lv_mcell 'T001' 'BUKRS'
                                              CHANGING l_valid.
                      IF l_valid = 'N'.
                        CLEAR ls_appr_coa.
                        MOVE-CORRESPONDING gs_app_coa TO ls_appr_coa.
                        CONCATENATE
                           'Error validating'(m18) 'COMP_CODE'
                          gs_app_coa-comp_code
                          INTO ls_appr_coa-msg SEPARATED BY space.
                        APPEND ls_appr_coa TO gt_appr_coa_val_error.
                        CONTINUE.
                      ENDIF.
                    ENDIF.
                  ENDIF.
                ENDIF.
              ENDIF.
*             end of VIMI-16818
              IF gs_app_coa-bukrs IS NOT INITIAL.
                IF lv_validate = abap_true AND
                   gs_app_coa-bukrs NE space.
                  MOVE gs_app_coa-bukrs TO lv_mcell-value.
                  PERFORM validate_fields USING lv_mcell 'T001' 'BUKRS'
                                          CHANGING l_valid.
                  IF l_valid = 'N'.
                    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                      EXPORTING
                        input  = gs_app_coa-bukrs
                      IMPORTING
                        output = gs_app_coa-bukrs.
                    IF gs_app_coa-bukrs NE space.
                      MOVE gs_app_coa-bukrs TO lv_mcell-value.
                      CLEAR: l_valid.                       "VIMI-16818
                      PERFORM validate_fields USING lv_mcell 'T001' 'BUKRS'
                                              CHANGING l_valid.
                      IF l_valid = 'N'.
                        CLEAR ls_appr_coa.
                        MOVE-CORRESPONDING gs_app_coa TO ls_appr_coa.
                        CONCATENATE
                           'Error validating'(m18) 'BUKRS'
                          gs_app_coa-bukrs
                          INTO ls_appr_coa-msg SEPARATED BY space.
                        APPEND ls_appr_coa TO gt_appr_coa_val_error.
                        CONTINUE.
                      ENDIF.
                    ENDIF.
                  ENDIF.
                ENDIF.
              ENDIF.
              IF gs_app_coa-bukrs2 IS NOT INITIAL.
                IF lv_validate = abap_true AND
                   gs_app_coa-bukrs2 NE space.
                  MOVE gs_app_coa-bukrs2 TO lv_mcell-value.
                  PERFORM validate_fields USING lv_mcell 'T001' 'BUKRS'
                                          CHANGING l_valid.
                  IF l_valid = 'N'.
                    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                      EXPORTING
                        input  = gs_app_coa-bukrs2
                      IMPORTING
                        output = gs_app_coa-bukrs2.
                    IF gs_app_coa-bukrs2 NE space.
                      MOVE gs_app_coa-bukrs2 TO lv_mcell-value.
                      CLEAR: l_valid.                       "VIMI-16818
                      PERFORM validate_fields USING lv_mcell 'T001' 'BUKRS'
                                              CHANGING l_valid.
                      IF l_valid = 'N'.
                        CLEAR ls_appr_coa.
                        MOVE-CORRESPONDING gs_app_coa TO ls_appr_coa.
                        CONCATENATE
                           'Error validating'(m18) 'BUKRS2'
                          gs_app_coa-bukrs2
                          INTO ls_appr_coa-msg SEPARATED BY space.
                        APPEND ls_appr_coa TO gt_appr_coa_val_error.
                        CONTINUE.
                      ENDIF.
                    ENDIF.
                  ENDIF.
                ENDIF.
              ENDIF.
*             End of Insert VIMI-16538
              IF gs_app_coa-gl_acct IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = gs_app_coa-gl_acct
                  IMPORTING
                    output = gs_app_coa-gl_acct.
*               Begin of Insert VIMI-16538
                IF lv_validate = abap_true AND
                   gs_app_coa-gl_acct NE space.
                  MOVE gs_app_coa-gl_acct TO lv_mcell-value.
                  PERFORM validate_fields USING lv_mcell 'SKA1' 'SAKNR'
                                          CHANGING l_valid.
                  IF l_valid = 'N'.
                    CLEAR ls_appr_coa.
                    MOVE-CORRESPONDING gs_app_coa TO ls_appr_coa.
                    CONCATENATE
                       'Error validating'(m18) 'GL_ACCOUNT'
                      gs_app_coa-gl_acct
                      INTO ls_appr_coa-msg SEPARATED BY space.
                    APPEND ls_appr_coa TO gt_appr_coa_val_error.
                    CONTINUE.
                  ENDIF.
                ENDIF.
*               End of Insert VIMI-16538
              ENDIF.
              IF gs_app_coa-gl_acct2 IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = gs_app_coa-gl_acct2
                  IMPORTING
                    output = gs_app_coa-gl_acct2.
*               Begin of Insert VIMI-16538
                IF lv_validate = abap_true AND
                   gs_app_coa-gl_acct2 NE space.
                  MOVE gs_app_coa-gl_acct2 TO lv_mcell-value.
                  PERFORM validate_fields USING lv_mcell 'SKA1' 'SAKNR'
                                          CHANGING l_valid.
                  IF l_valid = 'N'.
                    CLEAR ls_appr_coa.
                    MOVE-CORRESPONDING gs_app_coa TO ls_appr_coa.
                    CONCATENATE
                       'Error validating'(m18) 'GL_ACCOUNT2'
                      gs_app_coa-gl_acct2
                      INTO ls_appr_coa-msg SEPARATED BY space.
                    APPEND ls_appr_coa TO gt_appr_coa_val_error.
                    CONTINUE.
                  ENDIF.
                ENDIF.
*               End of Insert VIMI-16538
              ENDIF.
              IF gs_app_coa-network_no IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = gs_app_coa-network_no
                  IMPORTING
                    output = gs_app_coa-network_no.
*               Begin of Insert VIMI-16538
                IF lv_validate = abap_true AND
                   gs_app_coa-network_no NE space.
                  MOVE gs_app_coa-network_no TO lv_mcell-value.
                  PERFORM validate_fields USING lv_mcell 'AUFK' 'AUFNR'
                                          CHANGING l_valid.
                  IF l_valid = 'N'.
                    CLEAR ls_appr_coa.
                    MOVE-CORRESPONDING gs_app_coa TO ls_appr_coa.
                    CONCATENATE
                       'Error validating'(m18) 'NETWORK_NO'
                      gs_app_coa-network_no
                      INTO ls_appr_coa-msg SEPARATED BY space.
                    APPEND ls_appr_coa TO gt_appr_coa_val_error.
                    CONTINUE.
                  ENDIF.
                ENDIF.
*               End of Insert VIMI-16538
              ENDIF.
              IF gs_app_coa-network_no2 IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = gs_app_coa-network_no2
                  IMPORTING
                    output = gs_app_coa-network_no2.
*               Begin of Insert VIMI-16538
                IF lv_validate = abap_true AND
                   gs_app_coa-network_no2 NE space.
                  MOVE gs_app_coa-network_no2 TO lv_mcell-value.
                  PERFORM validate_fields USING lv_mcell 'AUFK' 'AUFNR'
                                          CHANGING l_valid.
                  IF l_valid = 'N'.
                    CLEAR ls_appr_coa.
                    MOVE-CORRESPONDING gs_app_coa TO ls_appr_coa.
                    CONCATENATE
                       'Error validating'(m18) 'NETWORK_NO2'
                      gs_app_coa-network_no2
                      INTO ls_appr_coa-msg SEPARATED BY space.
                    APPEND ls_appr_coa TO gt_appr_coa_val_error.
                    CONTINUE.
                  ENDIF.
                ENDIF.
*               End of Insert VIMI-16538
              ENDIF.
              IF gs_app_coa-profit_center IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = gs_app_coa-profit_center
                  IMPORTING
                    output = gs_app_coa-profit_center.
*               Begin of Insert VIMI-16538
                IF lv_validate = abap_true AND
                   gs_app_coa-profit_center NE space.
                  MOVE gs_app_coa-profit_center TO lv_mcell-value.
                  PERFORM validate_fields USING lv_mcell 'CEPC' 'PRCTR'
                                          CHANGING l_valid.
                  IF l_valid = 'N'.
                    CLEAR ls_appr_coa.
                    MOVE-CORRESPONDING gs_app_coa TO ls_appr_coa.
                    CONCATENATE
                       'Error validating'(m18) 'PROFIT_CENTER'
                      gs_app_coa-profit_center
                      INTO ls_appr_coa-msg SEPARATED BY space.
                    APPEND ls_appr_coa TO gt_appr_coa_val_error.
                    CONTINUE.
                  ENDIF.
                ENDIF.
*               End of Insert VIMI-16538
              ENDIF.
              IF gs_app_coa-profit_center2 IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = gs_app_coa-profit_center2
                  IMPORTING
                    output = gs_app_coa-profit_center2.
*               Begin of Insert VIMI-16538
                IF lv_validate = abap_true AND
                   gs_app_coa-profit_center2 NE space.
                  MOVE gs_app_coa-profit_center2 TO lv_mcell-value.
                  PERFORM validate_fields USING lv_mcell 'CEPC' 'PRCTR'
                                          CHANGING l_valid.
                  IF l_valid = 'N'.
                    CLEAR ls_appr_coa.
                    MOVE-CORRESPONDING gs_app_coa TO ls_appr_coa.
                    CONCATENATE
                       'Error validating'(m18) 'PROFIT_CENTER2'
                      gs_app_coa-profit_center2
                      INTO ls_appr_coa-msg SEPARATED BY space.
                    APPEND ls_appr_coa TO gt_appr_coa_val_error.
                    CONTINUE.
                  ENDIF.
                ENDIF.
*               End of Insert VIMI-16538
              ENDIF.
              IF gs_app_coa-real_estate_con IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = gs_app_coa-real_estate_con
                  IMPORTING
                    output = gs_app_coa-real_estate_con.
              ENDIF.
              IF gs_app_coa-real_estate_con2 IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = gs_app_coa-real_estate_con2
                  IMPORTING
                    output = gs_app_coa-real_estate_con2.
              ENDIF.
              IF gs_app_coa-earmarked_fund  IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = gs_app_coa-earmarked_fund
                  IMPORTING
                    output = gs_app_coa-earmarked_fund.
*               Begin of Insert VIMI-16538
                IF lv_validate = abap_true AND
                   gs_app_coa-earmarked_fund NE space.
                  MOVE gs_app_coa-earmarked_fund TO lv_mcell-value.
                  PERFORM validate_fields USING lv_mcell 'KBLK' 'BELNR'
                                          CHANGING l_valid.
                  IF l_valid = 'N'.
                    CLEAR ls_appr_coa.
                    MOVE-CORRESPONDING gs_app_coa TO ls_appr_coa.
                    CONCATENATE
                       'Error validating'(m18) 'EARMARKED_FUND'
                      gs_app_coa-earmarked_fund
                      INTO ls_appr_coa-msg SEPARATED BY space.
                    APPEND ls_appr_coa TO gt_appr_coa_val_error.
                    CONTINUE.
                  ENDIF.
                ENDIF.
*               End of Insert VIMI-16538
              ENDIF.
              IF gs_app_coa-earmarked_fund2  IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = gs_app_coa-earmarked_fund2
                  IMPORTING
                    output = gs_app_coa-earmarked_fund2.
*               Begin of Insert VIMI-16538
                IF lv_validate = abap_true AND
                   gs_app_coa-earmarked_fund2 NE space.
                  MOVE gs_app_coa-earmarked_fund2 TO lv_mcell-value.
                  PERFORM validate_fields USING lv_mcell 'KBLK' 'BELNR'
                                          CHANGING l_valid.
                  IF l_valid = 'N'.
                    CLEAR ls_appr_coa.
                    MOVE-CORRESPONDING gs_app_coa TO ls_appr_coa.
                    CONCATENATE
                       'Error validating'(m18) 'EARMARKED_FUND'
                      gs_app_coa-earmarked_fund2
                      INTO ls_appr_coa-msg SEPARATED BY space.
                    APPEND ls_appr_coa TO gt_appr_coa_val_error.
                    CONTINUE.
                  ENDIF.
                ENDIF.
                IF gs_app_coa-expense_type IS NOT INITIAL.
                  PERFORM validate_fields USING lv_mcell '/ORS/EXPENSE_TYP'
                                                        'EXPENSE_TYPE'
                                          CHANGING l_valid.
                  IF l_valid = 'N'.
                    CLEAR ls_appr_coa.
                    MOVE-CORRESPONDING gs_app_coa TO ls_appr_coa.
                    CONCATENATE
                       'Error validating'(m18) 'EXPENSE_TYPE'
                      gs_app_coa-earmarked_fund2
                      INTO ls_appr_coa-msg SEPARATED BY space.
                    APPEND ls_appr_coa TO gt_appr_coa_val_error.
                    CONTINUE.
                  ENDIF.
                ENDIF.
*               End of Insert VIMI-16538
              ENDIF.
            ENDIF.
*           end of VIMI-16244

* VIMI-16273: Enable Delete-Flag
            CLEAR ls_del_flag.
            MOVE-CORRESPONDING <fs_dyntable> TO ls_del_flag.
            IF sy-subrc = 0 AND ls_del_flag-delete_flag = 'X'.
              IF ls_del_flag-delete_flag IS NOT INITIAL.

* begin of VIMI-16813
                MOVE-CORRESPONDING gs_app_coa TO ls_appr_coa.
                APPEND ls_appr_coa TO gt_appr_coa_del.
*                APPEND gs_app_coa TO gt_appr_coa_del.
* end of VIMI-16813
                CONTINUE.
              ENDIF.
            ENDIF.
* end of VIMI-16273
            APPEND gs_app_coa TO gt_appr_coa.
          ENDLOOP.
* Begin of VIMI-18139/snittala
* taking actual record count from file and in the output
* we use this count for showing error record count
          DESCRIBE TABLE gt_appr_coa_conv_error LINES lv_lines.
          ADD lv_lines TO gv_coa_act.
          DESCRIBE TABLE gt_appr_coa_val_error LINES lv_lines.
          ADD lv_lines TO gv_coa_act.
          DESCRIBE TABLE gt_appr_coa_del LINES lv_lines.
          ADD lv_lines TO gv_coa_act.
          DESCRIBE TABLE gt_appr_coa LINES lv_lines.
          ADD lv_lines TO gv_coa_act.
*End of VIMI-18139/snittala
        WHEN c_apl.
          LOOP AT <t_dyntable> INTO <fs_dyntable>.
            MOVE-CORRESPONDING <fs_dyntable> TO gs_app_limit.
            TRANSLATE: gs_app_limit-bukrs          TO UPPER CASE,
                       gs_app_limit-expense_type   TO UPPER CASE,
                       gs_app_limit-head_limit_chk TO UPPER CASE.
            APPEND gs_app_limit TO gt_appr_limit.
          ENDLOOP.
* Begin of VIMI-18191/snittala
          DESCRIBE TABLE gt_appr_limit LINES lv_lines.
          ADD lv_lines TO gv_apprlmt_act.
* End of VIMI-18191/snittala
*Begin of VIMI-18347/snittala
          IF NOT gt_appr_limit[] IS INITIAL.
            SORT gt_appr_limit[].
            DELETE ADJACENT DUPLICATES FROM gt_appr_limit.
          ENDIF.
*End of VIMI-18347/snittala

        WHEN OTHERS.
      ENDCASE.
    ENDIF.
  ENDIF.
ENDFORM.                    " DYNAMIC_TABLE
*&---------------------------------------------------------------------*
*&      Form  VALIDATION
*&---------------------------------------------------------------------*
*     To Perform validations on the uploded records fromthe file
*----------------------------------------------------------------------*
*      -->P_gt_usermap_coa  -   the details of USERTAB
*      -->P_gt_appr_coa     the details of COATAB
*      -->P_LT_ERROR_MGS    the details of APLTAB
*----------------------------------------------------------------------*
FORM validation .

  DATA: lv_txt1  TYPE string,
        lv_txt2  TYPE string,
        wa_msg   TYPE einfo,
        lv_ind   TYPE sy-tabix,
        lv_txt   TYPE char100,
        lv_cnt   TYPE i,
        lv_uid   TYPE /ors/umoid,
        lt_level TYPE TABLE OF /opt/at_level,
        wa_level TYPE /opt/at_level,
        gs_usmap LIKE LINE OF gt_usermap.

* begin of VIMI-16547
  DATA: ls_appr_coa           LIKE gs_appr_coa1,
        ls_appr_coa_duplicate LIKE LINE OF gt_appr_coa_duplicate,
        lt_appr_coa_dup       TYPE SORTED TABLE OF /opt/appr_coa WITH UNIQUE KEY comp_code
                                                                           appr_level "VIMI-16768
                                                                          opt_userid
                                                                          otype actorid counter.
* end of VIMI-16547

  REFRESH : gt_usermap1_coa , gt_appr_coa1 , gt_appr_limit1.
* Start of INS VIMI-10153
  CLEAR gv_fmode.
  gv_fmode = p_fmode.
* End of INS VIMI-10153
  gt_usermap2_coa  =  gt_usermap_coa .
  gt_appr_coa2 =  gt_appr_coa.
  gt_appr_limit2 = gt_appr_limit.

  CHECK NOT gt_usermap_coa IS INITIAL OR
        NOT gt_appr_coa    IS INITIAL OR
        NOT gt_appr_limit  IS INITIAL.


* Begin of VIMI-18097/snittala

  LOOP AT gt_appr_coa INTO gs_app_coa.
    MOVE: gs_app_coa-comp_code TO wa_appr_coa-comp_code,
          gs_app_coa-appr_level TO wa_appr_coa-appr_level,
          gs_app_coa-opt_userid TO wa_appr_coa-opt_userid.
    APPEND wa_appr_coa TO it_appr_coa.
    CLEAR wa_appr_coa.
  ENDLOOP.
  SORT  it_appr_coa.
  DELETE ADJACENT DUPLICATES FROM it_appr_coa COMPARING ALL FIELDS.
* End of VIMI-18097/snittala

* When delta mode is selected foe upload , check the related entries
* in the COA tables and update the information provided in the file and insert new records.
  IF p_dmode = 'X'.
* Details of USER TAB
    SELECT *
    FROM /ors/usermap
    INTO TABLE gt_usermap1_coa.

    CLEAR lv_cnt.
    SORT gt_usermap1_coa.               "VIMI-18097/snittala
    LOOP AT gt_usermap2_coa INTO gs_usermap2_coa.
      lv_ind = sy-tabix.
      IF NOT gs_usermap2_coa-opt_userid IS INITIAL.
        READ TABLE gt_usermap1_coa INTO gs_usermap1_coa WITH KEY opt_userid = gs_usermap2_coa-opt_userid
                                                            BINARY SEARCH.        "VIMI-18097/snittala
        IF sy-subrc NE 0.
          l_tab = 'USR'.
          CLEAR: wa_msg,
                 lv_txt.
          wa_msg-msgid = '/OPT/VIM_701'.
          wa_msg-msgno = '050'.
          CALL FUNCTION 'MESSAGE_GET_TEXT'
            EXPORTING
              ieinfo        = wa_msg
              ilangu        = sy-langu
            IMPORTING
              etext         = lv_txt
            EXCEPTIONS
              no_t100_found = 1
              OTHERS        = 2.
          IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
          ENDIF.

          REPLACE '&' WITH space INTO lv_txt.
          CONDENSE lv_txt.

          PERFORM capture_messages USING lv_txt l_tab gs_usermap2_coa-opt_userid.
          gs_usermap2_coa-deleted = 'D'.
          MODIFY gt_usermap2_coa FROM gs_usermap2_coa INDEX lv_ind TRANSPORTING deleted .
          CLEAR gs_usermap2_coa.
        ENDIF.
      ELSE.

        lv_cnt = lv_cnt + 1.
        CLEAR lv_uid.
        MOVE lv_cnt TO lv_uid.
        CONDENSE lv_uid.
        CONCATENATE '&'
                    lv_uid
              INTO gs_usermap2_coa-opt_userid.
        CONDENSE gs_usermap2_coa-email NO-GAPS.             "VIMI-17168
        PERFORM get_userid USING gs_usermap2_coa
                        CHANGING gs_usermap2_coa-opt_userid.

        IF gs_usermap2_coa-opt_userid IS INITIAL.
          lv_cnt = lv_cnt + 1.
          CLEAR lv_uid.
          MOVE lv_cnt TO lv_uid.
          CONDENSE lv_uid.
          CONCATENATE '&'
                      lv_uid
                INTO gs_usermap2_coa-opt_userid.
        ENDIF.
        MODIFY gt_usermap2_coa FROM gs_usermap2_coa INDEX lv_ind TRANSPORTING opt_userid email. "VIMI-17168
        MODIFY gt_usermap_coa FROM gs_usermap2_coa INDEX lv_ind TRANSPORTING opt_userid email. "VIMI-17168
        CLEAR gs_usermap2_coa.
      ENDIF.
    ENDLOOP.

    DELETE gt_usermap2_coa WHERE deleted = 'D'.
    gs_usermap2_coa-mandt = sy-mandt.
    MODIFY gt_usermap2_coa FROM gs_usermap2_coa TRANSPORTING mandt WHERE mandt IS INITIAL.
    MODIFY gt_usermap_coa  FROM gs_usermap2_coa TRANSPORTING mandt WHERE mandt IS INITIAL.

    IF NOT gt_appr_coa2[]    IS INITIAL OR
       NOT gt_appr_limit2[]  IS INITIAL OR
       NOT gt_usermap2_coa[] IS INITIAL.

      LOOP AT gt_usermap1_coa INTO gs_usermap1_coa.
        READ TABLE gt_usermap2_coa INTO gs_usermap2_coa WITH KEY opt_userid = gs_usermap1_coa-opt_userid.
        IF sy-subrc <> 0.
          APPEND gs_usermap1_coa TO gt_usermap2_coa.
        ENDIF.
      ENDLOOP.
    ENDIF.
*Details of APPR_LIMIT TAB
    IF NOT gt_appr_coa2[] IS INITIAL OR
       NOT gt_appr_limit2[] IS INITIAL.

      SELECT *
          FROM /opt/appr_limit
          APPENDING TABLE  gt_appr_limit1.

      SELECT *
        FROM /opt/at_level
        INTO TABLE lt_level.

* Begin of VIMI-18191/snittala
      SELECT *
         FROM /ors/expense_dec
          INTO TABLE gt_extype
         WHERE language = sy-langu.
* End of VIMI-18191/snittala
      LOOP AT gt_appr_limit2 INTO gs_app_limit.
        lv_ind = sy-tabix.
        READ TABLE lt_level INTO wa_level WITH KEY appr_level =  gs_app_limit-appr_level.
        IF sy-subrc NE 0.
          l_tab = 'APL'.
          PERFORM capture_level_messages USING TEXT-t22
                                               l_tab
                                               gs_app_limit-bukrs
                                               gs_app_limit-expense_type
                                               gs_app_limit-appr_level.
          gs_app_limit-head_limit_chk  = 'D'.
          MODIFY gt_appr_limit2 FROM gs_app_limit INDEX  lv_ind TRANSPORTING head_limit_chk.
          CLEAR gs_app_limit.
          CONTINUE.
        ENDIF.
* Begin of VIMI-18191/snittala
        IF NOT gs_app_limit-expense_type IS INITIAL.
          READ TABLE gt_extype INTO gs_extype WITH KEY expense_type = gs_app_limit-expense_type.
          IF NOT sy-subrc IS INITIAL.
            l_tab = 'APL'.
            PERFORM capture_level_messages USING TEXT-t42
                                                 l_tab
                                                 gs_app_limit-bukrs
                                                 gs_app_limit-expense_type
                                                 gs_app_limit-appr_level.
            gs_app_limit-head_limit_chk  = 'D'.
            MODIFY gt_appr_limit2 FROM gs_app_limit INDEX  lv_ind TRANSPORTING head_limit_chk.
            CLEAR gs_app_limit.
            CONTINUE.
          ENDIF.
        ENDIF.
* End of VIMI-18191/snittala
      ENDLOOP.

      DELETE gt_appr_limit2 WHERE head_limit_chk = 'D'.

      gs_app_limit-mandt = sy-mandt.
      MODIFY gt_appr_limit2 FROM gs_app_limit TRANSPORTING mandt WHERE mandt IS INITIAL.
      MODIFY gt_appr_limit FROM gs_app_limit TRANSPORTING mandt WHERE mandt IS INITIAL.

      LOOP AT gt_appr_limit1 INTO gs_appr_limit1.
        READ TABLE gt_appr_limit2 INTO gs_app_limit2 WITH KEY bukrs = gs_appr_limit1-bukrs
                                                            expense_type = gs_appr_limit1-expense_type
                                                            appr_level = gs_appr_limit1-appr_level .
        IF sy-subrc <> 0.
          APPEND gs_appr_limit1 TO gt_appr_limit2.
        ENDIF.
      ENDLOOP.
* Details of COA TAB
* Begin of VIMI-18097/snittala
*      SELECT *
*      FROM  /opt/appr_coa
*      APPENDING TABLE gt_appr_coa1.
      IF NOT it_appr_coa[] IS INITIAL.
        SELECT *
          FROM  /opt/appr_coa
          APPENDING TABLE gt_appr_coa1
          FOR ALL ENTRIES IN it_appr_coa
          WHERE comp_code = it_appr_coa-comp_code
          AND  appr_level = it_appr_coa-appr_level
          AND  opt_userid = it_appr_coa-opt_userid.
      ENDIF.
* End of VIMI-18097/snittala

      LOOP AT gt_appr_coa2 INTO gs_appr_coa1.
        lv_ind = sy-tabix.         "VIMI-18191/snittala

*     begin of VIMI-16547: Duplicate check
*       duplicate check in csv
        READ TABLE lt_appr_coa_dup TRANSPORTING NO FIELDS FROM gs_appr_coa1.
        IF sy-subrc = 0.
*          MOVE-CORRESPONDING ls_appr_coa TO ls_appr_coa_duplicate. "VIMI-16768
          MOVE-CORRESPONDING gs_appr_coa1 TO ls_appr_coa_duplicate. "VIMI-16768
          ls_appr_coa_duplicate-msg = 'Duplicate entry'(m46).
          APPEND ls_appr_coa_duplicate TO gt_appr_coa_duplicate .
          DELETE TABLE gt_appr_coa FROM gs_appr_coa1.
          DELETE TABLE gt_appr_coa2 FROM gs_appr_coa1.
          CONTINUE.
        ELSE.
          INSERT gs_appr_coa1 INTO TABLE lt_appr_coa_dup .
        ENDIF.

*       duplicate check compared to database
        ls_appr_coa = gs_appr_coa1.
        IF ls_appr_coa-mandt IS INITIAL.
          ls_appr_coa-mandt = sy-mandt.
        ENDIF.
        READ TABLE gt_appr_coa1 TRANSPORTING NO FIELDS FROM ls_appr_coa.
        IF sy-subrc = 0.
          MOVE-CORRESPONDING ls_appr_coa TO ls_appr_coa_duplicate.
          ls_appr_coa_duplicate-msg = 'Entry already exists'(m47).
          APPEND ls_appr_coa_duplicate TO gt_appr_coa_duplicate .
          DELETE TABLE gt_appr_coa FROM gs_appr_coa1.
          DELETE TABLE gt_appr_coa2 FROM gs_appr_coa1.
          CONTINUE.
        ENDIF.
*     end of VIMI-16547

*        lv_ind = sy-tabix.         "VIMI-18191/snittala

        IF gs_appr_coa1-comp_code IS INITIAL.
          l_tab = 'COA'.
          PERFORM capture_coa_messages USING TEXT-m13
                                             l_tab
                                             gs_appr_coa1-comp_code
                                             gs_appr_coa1-appr_level
                                             gs_appr_coa1-opt_userid.
          gs_appr_coa1-otype = 'DE'.
          MODIFY gt_appr_coa2 FROM gs_appr_coa1 INDEX lv_ind TRANSPORTING otype.
          CLEAR gs_appr_coa1.
          CONTINUE.
        ENDIF.

        READ TABLE gt_appr_limit1 INTO gs_appr_limit1 WITH KEY appr_level =  gs_appr_coa1-appr_level.
        IF sy-subrc NE 0.
          l_tab = 'COA'.
          PERFORM capture_coa_messages USING TEXT-t22
                                             l_tab
                                             gs_appr_coa1-comp_code
                                             gs_appr_coa1-appr_level
                                             gs_appr_coa1-opt_userid.
          gs_appr_coa1-otype = 'DE'.
          MODIFY gt_appr_coa2 FROM gs_appr_coa1 INDEX lv_ind TRANSPORTING otype.
          CLEAR gs_appr_coa1.
          CONTINUE.
        ENDIF.
      ENDLOOP.

      DELETE gt_appr_coa2 WHERE otype = 'DE'.
      gs_appr_coa1-mandt = sy-mandt.
      MODIFY gt_appr_coa2 FROM gs_appr_coa1 TRANSPORTING mandt WHERE mandt IS INITIAL.
      MODIFY gt_appr_coa  FROM gs_appr_coa1 TRANSPORTING mandt WHERE mandt IS INITIAL.


      LOOP AT gt_appr_coa1 INTO gs_appr_coa1.

        READ TABLE gt_appr_coa2 INTO gs_app_coa2 WITH KEY comp_code = gs_appr_coa1-comp_code
                                                          appr_level = gs_appr_coa1-appr_level
                                                          opt_userid = gs_appr_coa1-opt_userid.
        "counter    = gs_appr_coa1-counter.
* Begin D-VIMI 17244
*        IF sy-subrc <> 0.
*          APPEND gs_appr_coa1 TO gt_appr_coa2.
*        ENDIF.
* End of D-VIMI 17244
* Begin of I-VIMI 17244
        IF sy-subrc IS INITIAL.
          READ TABLE gt_appr_coa2 INTO gs_app_coa2 WITH KEY comp_code  = gs_appr_coa1-comp_code
                                                            appr_level = gs_appr_coa1-appr_level
                                                            opt_userid = gs_appr_coa1-opt_userid
                                                            counter    = gs_appr_coa1-counter.
          IF sy-subrc EQ 0.
* happens only if input record is supplied with a counter, to update an existing rec in CoA.
* hence consider rec from input file only...
          ELSE.
            APPEND gs_appr_coa1 TO gt_appr_coa2.
          ENDIF.
        ELSE.
          DELETE gt_appr_coa1 WHERE comp_code  EQ gs_appr_coa1-comp_code
                                AND appr_level EQ gs_appr_coa1-appr_level
                                AND opt_userid EQ gs_appr_coa1-opt_userid.
        ENDIF.
* End of I-VIMI 17244
      ENDLOOP.

      gt_ncoa_old[] = gt_appr_coa1[].    "I-VIMI 17244

    ENDIF.

    IF gt_usermap2_coa[] IS INITIAL AND
       gt_appr_coa2[]    IS INITIAL AND
       gt_appr_limit2[]  IS INITIAL.
      EXIT.
    ENDIF.

  ENDIF.
* When full mode is selected validate the entries in the file as the old records are deleted completely
* and the records existing in the file are updated in the COA tables.

* BEGIN Insert VIMI-17284
  IF NOT p_fmode IS INITIAL.
    LOOP AT gt_usermap2_coa INTO gs_usermap2_coa.
      lv_ind = sy-tabix.
      IF  gs_usermap2_coa-opt_userid IS INITIAL.
        lv_cnt = lv_cnt + 1.
        CLEAR lv_uid.
        MOVE lv_cnt TO lv_uid.
        CONDENSE lv_uid.
        CONCATENATE '&'
                    lv_uid
              INTO gs_usermap2_coa-opt_userid.
        PERFORM get_userid USING gs_usermap2_coa
                        CHANGING gs_usermap2_coa-opt_userid.
        MODIFY gt_usermap2_coa FROM gs_usermap2_coa INDEX lv_ind TRANSPORTING opt_userid.
        MODIFY gt_usermap_coa FROM gs_usermap2_coa INDEX lv_ind TRANSPORTING opt_userid.
      ENDIF.
      CLEAR gs_usermap2_coa.
    ENDLOOP.
  ENDIF.
* END Insert VIMI-17284


  gt_usermap[] = gt_usermap2_coa[].

* Start of INS VIMI-10153
  IF NOT p_fmode IS INITIAL.
    IF ( NOT gt_appr_coa2[]   IS INITIAL   OR
         NOT gt_appr_limit2[] IS INITIAL ) AND
             gt_usermap[]     IS INITIAL.
      SELECT *
        FROM /ors/usermap
        INTO TABLE gt_usermap
        ORDER BY PRIMARY KEY.                               "VIMI-14042
    ENDIF.

    IF NOT gt_appr_coa2[]   IS INITIAL AND
           gt_appr_limit2[] IS INITIAL.
      SELECT *
        FROM /opt/appr_limit
        INTO TABLE gt_appr_limit2.
    ENDIF.
* Begin of VIMI-19181
    IF gv_fmodelog IS NOT INITIAL.
      SELECT * FROM /opt/appr_coa INTO TABLE gt_ncoa_old.
      SELECT * FROM /opt/appr_limit INTO TABLE gt_level_old.
    ENDIF.
* End of VIMI-19181
  ENDIF.

  LOOP AT gt_usermap INTO gs_usmap.
    lv_ind = sy-tabix.
    IF  gs_usmap-opt_userid IS INITIAL.
      lv_cnt = lv_cnt + 1.
      CLEAR lv_uid.
      MOVE lv_cnt TO lv_uid.
      CONDENSE lv_uid.
      CONCATENATE '&'
                  lv_uid
            INTO gs_usmap-opt_userid.
    ENDIF.
    IF NOT gs_usmap-deleted IS INITIAL AND
       gs_usmap-deleted NE 'X'.

      CLEAR lv_txt.

      l_tab = 'USR'.

      wa_msg-msgid = 'EJ'.
      wa_msg-msgno = '034'.
      CALL FUNCTION 'MESSAGE_GET_TEXT'
        EXPORTING
          ieinfo        = wa_msg
          ilangu        = sy-langu
        IMPORTING
          etext         = lv_txt
        EXCEPTIONS
          no_t100_found = 1
          OTHERS        = 2.
      IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      ENDIF.

      REPLACE '&' WITH gs_usmap-deleted INTO lv_txt.
      CONDENSE lv_txt.
      CONCATENATE 'DELETED'
                   lv_txt
             INTO lv_txt
        SEPARATED BY space.
      PERFORM capture_messages USING lv_txt l_tab gs_usmap-opt_userid.
      gs_usmap-deleted = 'D'.
    ENDIF.
    MODIFY gt_usermap FROM gs_usmap INDEX lv_ind.
    CLEAR gs_usmap.
  ENDLOOP.
  DELETE gt_usermap WHERE deleted = 'D'.
  gs_usmap-mandt = sy-mandt.
  MODIFY gt_usermap FROM gs_usmap TRANSPORTING mandt WHERE mandt IS INITIAL.
* End of INS VIMI-10153.

* Begin of insert VIMI-15934
  gt_usermap_unfiltered[] = gt_usermap[].
* End of insert VIMI-15934

  SELECT *
    FROM /opt/bl_t401
    INTO TABLE gt_401.

  SELECT *
      FROM /opt/at_levelt
      INTO TABLE gt_lvltxt
     WHERE spras = sy-langu.
  IF gt_extype[] IS INITIAL.  "VIMI-18191/snittala
    SELECT *
      FROM /ors/expense_dec
      INTO TABLE gt_extype
     WHERE language = sy-langu.
  ENDIF.                        "VIMI-18191/snittala
  IF NOT gt_appr_limit2 IS INITIAL.
    LOOP AT gt_appr_limit2 INTO gs_app_limit2.
      MOVE-CORRESPONDING gs_app_limit2 TO gt_level1.
      APPEND gt_level1.
    ENDLOOP.
  ENDIF.


  LOOP AT gt_appr_coa2 INTO gs_app_coa2.
    IF gs_app_coa2-appr_level LE 1.
      MOVE-CORRESPONDING  gs_app_coa2 TO gt_ncoa2.
      APPEND  gt_ncoa2.
    ELSEIF gs_app_coa2-appr_level GE 2.
      MOVE-CORRESPONDING  gs_app_coa2 TO gt_ncoa3.
      APPEND gt_ncoa3.
    ENDIF.
    CLEAR : gs_app_coa2.
  ENDLOOP.


  CALL FUNCTION 'DDUT_DOMVALUES_GET'
    EXPORTING
      name          = '/OPT/DO_HEAD_LIMIT_CHK'
      langu         = sy-langu
    TABLES
      dd07v_tab     = gt_values_h
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  LOOP AT gt_level1.
    g_tabix = sy-tabix.
    READ TABLE gt_extype INTO gs_extype WITH KEY expense_type = gt_level1-expense_type.
    IF sy-subrc = 0.
      IF gs_extype-expense_type IS INITIAL.
        gt_level1-extxt = gs_extype-expense_desc.
      ELSE.
        CONCATENATE gs_extype-expense_type
                    '-'
                    gs_extype-expense_desc
               INTO gt_level1-extxt
          SEPARATED BY space.
      ENDIF.
    ENDIF.
    READ TABLE gt_lvltxt INTO gs_lvltxt WITH KEY appr_level = gt_level1-appr_level.
    IF sy-subrc = 0.
      CONCATENATE gs_lvltxt-appr_level
                  '-'
                  gs_lvltxt-descr
             INTO gt_level1-descr
        SEPARATED BY space.
    ENDIF.
    READ TABLE gt_values_h INTO gs_values_h WITH KEY
                              domvalue_l = gt_level1-head_limit_chk.
    IF sy-subrc = 0.
      CONCATENATE gs_values_h-domvalue_l
                  '-'
                  gs_values_h-ddtext
             INTO gt_level1-btext.
    ENDIF.
    MODIFY gt_level1 INDEX g_tabix.
    IF p_fmode IS INITIAL.    "VIMI-19181
      MOVE-CORRESPONDING gt_level1 TO gt_level_old.
      APPEND gt_level_old.
      CLEAR gt_level_old.
    ENDIF.                    "VIMI-19181
  ENDLOOP.

  LOOP AT gt_level1.
    CALL METHOD /opt/vim_auth_check=>check_liap_level_limits
      EXPORTING
        pi_bukrs = gt_level1-bukrs
        pi_actvt = lv_actvt
      EXCEPTIONS
        failed   = 1.
    IF sy-subrc <> 0.
      INSERT gt_level1 INTO TABLE gt_level_filtered.
      DELETE gt_level1.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_ncoa2.
    g_tabix = sy-tabix.
    READ TABLE gt_lvltxt INTO gs_lvltxt WITH KEY appr_level = gt_ncoa2-appr_level.
    IF sy-subrc = 0.
      CONCATENATE gs_lvltxt-appr_level
                  '-'
                  gs_lvltxt-descr
             INTO gt_ncoa2-descr
        SEPARATED BY space.
    ENDIF.
*    MOVE-CORRESPONDING gt_ncoa2 TO gt_ncoa_old.  "D-VIMI-17244
    MODIFY gt_ncoa2 INDEX g_tabix.
*    APPEND gt_ncoa_old.                           "D-VIMI-17244
    CLEAR gt_ncoa_old.
    CLEAR gt_ncoa2.
  ENDLOOP.

  LOOP AT gt_ncoa3.
    g_tabix = sy-tabix.
    READ TABLE gt_lvltxt INTO gs_lvltxt WITH KEY appr_level = gt_ncoa3-appr_level.
    IF sy-subrc = 0.
      IF gs_lvltxt-appr_level IS INITIAL.
        gt_ncoa3-descr = gs_lvltxt-descr.
      ELSE.
        CONCATENATE gs_lvltxt-appr_level
                    '-'
                    gs_lvltxt-descr
               INTO gt_ncoa3-descr
          SEPARATED BY space.
      ENDIF.
    ENDIF.
*    MOVE-CORRESPONDING gt_ncoa3 TO gt_ncoa_old.  "D-VIMI-17244
    MODIFY gt_ncoa3 INDEX g_tabix.
*    APPEND gt_ncoa_old.                          "D-VIMI-17244
    CLEAR gt_ncoa_old.
    CLEAR gt_ncoa3.
  ENDLOOP.

  LOOP AT gt_ncoa2.
    READ TABLE gt_usermap WITH KEY opt_userid = gt_ncoa2-opt_userid.
    IF sy-subrc <> 0.
      CLEAR lv_group.
    ELSE.
      PERFORM get_sap_user_group
        USING gt_usermap-sap_user_id
        CHANGING lv_group.
    ENDIF.
    CALL METHOD /opt/vim_auth_check=>check_liap_approver
      EXPORTING
        pi_group = lv_group
        pi_bukrs = gt_ncoa2-comp_code
        pi_actvt = lv_actvt
      EXCEPTIONS
        failed   = 1.
    IF sy-subrc <> 0.
      INSERT gt_ncoa2 INTO TABLE gt_ncoa_filtered.
      DELETE gt_ncoa2.
    ENDIF.
  ENDLOOP.

  LOOP AT gt_ncoa3.
    READ TABLE gt_usermap WITH KEY opt_userid = gt_ncoa3-opt_userid.
    IF sy-subrc <> 0.
      CLEAR lv_group.
    ELSE.
      PERFORM get_sap_user_group
        USING gt_usermap-sap_user_id
        CHANGING lv_group.
    ENDIF.
    CALL METHOD /opt/vim_auth_check=>check_liap_approver
      EXPORTING
        pi_group = lv_group
        pi_bukrs = gt_ncoa3-comp_code
        pi_actvt = lv_actvt
      EXCEPTIONS
        failed   = 1.
    IF sy-subrc <> 0.
      INSERT gt_ncoa3 INTO TABLE gt_ncoa_filtered.
      DELETE gt_ncoa3.
    ENDIF.
  ENDLOOP.

  SORT gt_ncoa_filtered BY comp_code appr_level opt_userid otype actorid counter.

  LOOP AT gt_usermap.
    PERFORM get_sap_user_group
      USING gt_usermap-sap_user_id
      CHANGING lv_group.
    CALL METHOD /opt/vim_auth_check=>check_appr_usermap
      EXPORTING
        pi_group = lv_group
        pi_actvt = lv_actvt
      EXCEPTIONS
        failed   = 1.
    IF sy-subrc <> 0.
      INSERT gt_usermap INTO TABLE gt_usermap_filtered.
      DELETE gt_usermap.
    ENDIF.
  ENDLOOP.

  SORT gt_level1 BY bukrs expense_type appr_level.
* Start of INS VIMI-10153
  IF NOT gt_level1[]  IS INITIAL OR
     NOT gt_ncoa2[]   IS INITIAL OR
     NOT gt_ncoa3[]   IS INITIAL OR
     NOT gt_usermap[] IS INITIAL.
* End of INS VIMI-10153
* begin of VIMI-17623
    IF p_tmode = 'X'.
      gv_skip_change_docs = 'X'.
    ENDIF.
* end of VIMI-17623
    PERFORM save_data.

  ENDIF.                                                    "VIMI-10153
ENDFORM.                    " VALIDATION
*&---------------------------------------------------------------------*
*&      Form  SAVE_UPLOAD_DATA
*&---------------------------------------------------------------------*
*       To save the data into COA tables after validations
*----------------------------------------------------------------------*

FORM save_upload_data .

  DATA : lr_oref TYPE REF TO cx_root,                       "VIMI-16216
         lv_text TYPE string.                               "VIMI-16216

* Begin of VIMI-24996/AMANGAPA
  DATA : lt_substitutes  TYPE TABLE OF /ors/substitute,
         it_substitution TYPE TABLE OF /ors/rfc_substitute,
         wa_substitution TYPE /ors/rfc_substitute.
* End of VIMI-24996/AMANGAPA

  CHECK NOT gt_usermap_coa IS INITIAL OR
        NOT gt_appr_coa    IS INITIAL OR
        NOT gt_appr_limit  IS INITIAL.

  DELETE ADJACENT DUPLICATES FROM lt_error_mgs COMPARING bukrs
                                                         expense_type
                                                         appr_level
                                                         userid
                                                         details
                                                         approval_limit
                                                         head_limit_chk
                                                         add_pack_limit.

  LOOP AT lt_error_mgs INTO ls_error_mgs.
    lv_index = sy-tabix.
    IF ls_error_mgs-tab = c_usr.
      READ TABLE gt_usermap_coa INTO gs_usermap_coa WITH KEY opt_userid = ls_error_mgs-userid.
      IF sy-subrc = 0.
        gv_nusr = gv_nusr + 1.
        DELETE gt_usermap_coa WHERE opt_userid = ls_error_mgs-userid.
      ENDIF.
    ELSEIF  ls_error_mgs-tab = c_coa.
      READ TABLE gt_appr_coa INTO gs_app_coa WITH KEY comp_code  = ls_error_mgs-bukrs
                                                       appr_level = ls_error_mgs-appr_level
                                                       opt_userid = ls_error_mgs-userid.
*                             expense_type = ls_error_mgs-expense_type. "VIMI-18001-snittala
      IF sy-subrc = 0.
        gv_ncoa = gv_ncoa + 1.
        IF NOT ls_error_mgs-expense_type IS INITIAL.     "VIMI-18139/snittala
          DELETE gt_appr_coa WHERE comp_code  = ls_error_mgs-bukrs
                               AND appr_level = ls_error_mgs-appr_level
                               AND opt_userid = ls_error_mgs-userid
                               AND expense_type = ls_error_mgs-expense_type.
*Begin of VIMI-18139-snittala
* If errors are not due to expense type
        ELSE.
          DELETE gt_appr_coa WHERE comp_code  = ls_error_mgs-bukrs
                               AND appr_level = ls_error_mgs-appr_level
                               AND opt_userid = ls_error_mgs-userid.
        ENDIF.
      ENDIF.
*End of VIMI-18139/snittala
    ELSEIF ls_error_mgs-tab = c_apl.
      READ TABLE gt_appr_limit INTO gs_app_limit WITH KEY bukrs = ls_error_mgs-bukrs
                                                          expense_type = ls_error_mgs-expense_type
                                                          appr_level = ls_error_mgs-appr_level.
*                                                          details = ls_error_mgs-details
*                                                          approval_limit = ls_error_mgs-approval_limit
*                                                          head_limit_chk = ls_error_mgs-head_limit_chk
*                                                          add_pack_limit = ls_error_mgs-add_pack_limit.
      IF sy-subrc = 0.
        gv_napl =  gv_napl + 1.
        DELETE gt_appr_limit WHERE bukrs = ls_error_mgs-bukrs
                             AND  expense_type = ls_error_mgs-expense_type
                             AND  appr_level = ls_error_mgs-appr_level.
*                             AND  details = ls_error_mgs-details
*                             AND  approval_limit = ls_error_mgs-approval_limit
*                             AND  head_limit_chk = ls_error_mgs-head_limit_chk
*                             AND  add_pack_limit = ls_error_mgs-add_pack_limit.
      ELSE.
        DELETE lt_error_mgs INDEX lv_index.

      ENDIF.
    ENDIF.
  ENDLOOP.

  DESCRIBE TABLE gt_usermap_coa LINES gv_usrtab.
  DESCRIBE TABLE gt_appr_coa LINES gv_coatab.
  DESCRIBE TABLE gt_appr_limit LINES gv_leveltab.
  DESCRIBE TABLE lt_error_mgs LINES lv_failed.


* BEGIN Insert VIMI-17284
  DATA: lv_value_dil TYPE /ptgwfi/value.
  DATA: ls_user_p TYPE /ors/user_prefer.
  DATA: lv_value_mdil TYPE /ptgwfi/value.
  DATA: lt_user_prefer TYPE TABLE OF /ors/user_prefer.
  DATA: lt_bapi_ret TYPE TABLE OF bapiret2.

  CLEAR lv_value_dil.
  CALL FUNCTION '/PTGWFI/CP_READCONSTANT'
    EXPORTING
      constname          = 'DEFAULT_INV_LIST'
      productcode        = 'IAP'
    IMPORTING
      constvalue         = lv_value_dil
    EXCEPTIONS
      constant_not_found = 1
      OTHERS             = 2.

  CLEAR lv_value_mdil.
  CALL FUNCTION '/PTGWFI/CP_READCONSTANT'
    EXPORTING
      constname          = 'MOB_DEFAULT_INV_LIST'
      productcode        = 'IAP'
    IMPORTING
      constvalue         = lv_value_mdil
    EXCEPTIONS
      constant_not_found = 1
      OTHERS             = 2.

  ls_user_p-max_recent_list = 5.
  ls_user_p-e_notify_active = 'X'.
  ls_user_p-inv_list_field  = lv_value_dil.
  ls_user_p-inv_list_field_m  = lv_value_mdil.


  SELECT * FROM /ors/user_prefer INTO TABLE lt_user_prefer.
* END Insert VIMI-17284

* Begin of Insert VIMI-16538
  IF p_tmode IS INITIAL.
* End of Insert VIMI-16538
    IF p_dmode = 'X'.
* Upload using the Delta mode
*(Update the existing records from file and insert the new records from the file to COA tables)
* Update the Usermap details.
      PERFORM lock_tables.
      IF NOT gt_usermap_coa IS INITIAL.
        MODIFY /ors/usermap FROM TABLE gt_usermap_coa.
* BEGIN Insert VIMI-17284
*       Update /ORS/USER_PREFER if there is no entry
        LOOP AT gt_usermap_coa INTO gs_usermap_coa.
          READ TABLE lt_user_prefer
            WITH KEY approver = gs_usermap_coa-opt_userid
            TRANSPORTING NO FIELDS.
          IF sy-subrc <> 0.
            ls_user_p-approver = gs_usermap_coa-opt_userid.
            CLEAR ls_user_p-date_format.
            CLEAR ls_user_p-decimal_notation.
            IF NOT gs_usermap_coa-sap_user_id IS INITIAL.
              SELECT SINGLE datfm dcpfm FROM usr01
                INTO (ls_user_p-date_format, ls_user_p-decimal_notation)
                WHERE bname = gs_usermap_coa-sap_user_id.
            ENDIF.
            CALL FUNCTION '/ORS/000007_UPDATE_PERFERENCE'
              EXPORTING
                user_preference = ls_user_p
              TABLES
                return          = lt_bapi_ret.
          ENDIF.
        ENDLOOP.
* END Insert VIMI-17284
      ENDIF.
* Update the COA details.
      IF NOT gt_appr_coa IS INITIAL.
        MODIFY /opt/appr_coa FROM TABLE gt_appr_coa.
      ENDIF.
* Update the Approver limit details.
      IF NOT gt_appr_limit IS INITIAL.
        MODIFY /opt/appr_limit FROM TABLE gt_appr_limit.
      ENDIF.
      PERFORM unlock_tables.

    ELSE.
*Begin VIMI-16216
* It makes no sense to do upload when there is error in the file.
      CHECK lt_error_mgs[] IS INITIAL.
*End VIMI-16216
* Upload using the Full mode
*(delete all the records from data base and insert the records from the file to COA tables)
      PERFORM lock_tables.
      IF NOT gt_usermap_coa IS INITIAL.
        DELETE FROM /ors/usermap CLIENT SPECIFIED WHERE mandt = sy-mandt.
*Begin VIMI-16216 75SP4
*       INSERT /ors/usermap FROM TABLE gt_usermap_coa.
        TRY.
            CLEAR lv_text.
            INSERT /ors/usermap FROM TABLE gt_usermap_coa.
          CATCH cx_sy_open_sql_db INTO lr_oref.
            lv_text = lr_oref->get_text( ).
          CLEANUP.
        ENDTRY.
        IF NOT lv_text IS INITIAL.
          CLEAR ls_error_mgs.
          ls_error_mgs-userid = 'EXCEPTION'.
          ls_error_mgs-tab = c_usr.
          ls_error_mgs-message = lv_text.
          APPEND ls_error_mgs TO lt_error_mgs.
          PERFORM unlock_tables.
          EXIT.
        ENDIF.
*End VIMI-16216 75SP4
* BEGIN Insert VIMI-17284
*       Update /ORS/USER_PREFER
        LOOP AT gt_usermap_coa INTO gs_usermap_coa.
          ls_user_p-approver = gs_usermap_coa-opt_userid.
          CLEAR ls_user_p-date_format.
          CLEAR ls_user_p-decimal_notation.
          IF NOT gs_usermap_coa-sap_user_id IS INITIAL.
            SELECT SINGLE datfm dcpfm FROM usr01
              INTO (ls_user_p-date_format, ls_user_p-decimal_notation)
              WHERE bname = gs_usermap_coa-sap_user_id.
          ENDIF.
* Begin of VIMI-24996/AMANGAPA
          IF p_fmode = 'X'.
            REFRESH: lt_substitutes, it_substitution. "INSERT VIMI-26825:ASUTHARA
            CALL FUNCTION '/ORS/000007_USER_SUBS_GET'
              EXPORTING
                user_id     = gs_usermap_coa-opt_userid
              TABLES
                substitutes = lt_substitutes.

            LOOP AT lt_substitutes INTO DATA(ls_substitutes).
              MOVE-CORRESPONDING ls_substitutes TO wa_substitution.
              APPEND wa_substitution TO it_substitution.
              CLEAR: ls_substitutes, wa_substitution.
            ENDLOOP.

            IF NOT it_substitution[] IS INITIAL.
              CALL FUNCTION '/ORS/000007_UPDATE_PERFERENCE'
                EXPORTING
                  user_preference = ls_user_p
                TABLES
                  substitution    = it_substitution
                  return          = lt_bapi_ret.
            ELSE.
              CALL FUNCTION '/ORS/000007_UPDATE_PERFERENCE'
                EXPORTING
                  user_preference = ls_user_p
                TABLES
                  return          = lt_bapi_ret.
            ENDIF.
          ELSE.
* End of VIMI-24996/AMANGAPA
            CALL FUNCTION '/ORS/000007_UPDATE_PERFERENCE'
              EXPORTING
                user_preference = ls_user_p
              TABLES
                return          = lt_bapi_ret.
          ENDIF.                    "VIMI-24996
        ENDLOOP.
* END Insert VIMI-17284
      ENDIF.

      IF NOT gt_appr_coa IS INITIAL.
        DELETE FROM /opt/appr_coa CLIENT SPECIFIED WHERE mandt = sy-mandt.
*Begin VIMI-16216 75SP4
*       INSERT /opt/appr_coa FROM TABLE gt_appr_coa.
        TRY.
            CLEAR lv_text.
            INSERT /opt/appr_coa FROM TABLE gt_appr_coa.
          CATCH cx_sy_open_sql_db INTO lr_oref.
            lv_text = lr_oref->get_text( ).
          CLEANUP.
        ENDTRY.
        IF NOT lv_text IS INITIAL.
          CLEAR ls_error_mgs.
          ls_error_mgs-userid = 'EXCEPTION'.
          ls_error_mgs-tab = c_coa.
          ls_error_mgs-message = lv_text.
          APPEND ls_error_mgs TO lt_error_mgs.
          PERFORM unlock_tables.
          EXIT.
        ENDIF.
*End VIMI-16216 75SP4
      ENDIF.

      IF NOT gt_appr_limit IS INITIAL.
        DELETE FROM /opt/appr_limit CLIENT SPECIFIED WHERE mandt = sy-mandt.
*Begin VIMI-16216 75SP4
*       INSERT /opt/appr_limit FROM TABLE gt_appr_limit.
        TRY.
            CLEAR lv_text.
            INSERT /opt/appr_limit FROM TABLE gt_appr_limit.
          CATCH cx_sy_open_sql_db INTO lr_oref.
            lv_text = lr_oref->get_text( ).
          CLEANUP.
        ENDTRY.
        IF NOT lv_text IS INITIAL.
          CLEAR ls_error_mgs.
          ls_error_mgs-userid = 'EXCEPTION'.
          ls_error_mgs-tab = c_apl.
          ls_error_mgs-message = lv_text.
          APPEND ls_error_mgs TO lt_error_mgs.
          PERFORM unlock_tables.
          EXIT.
        ENDIF.
*End VIMI-16216 75SP4
      ENDIF.
      PERFORM unlock_tables.
      COMMIT WORK.
    ENDIF.
* Begin of Insert VIMI-16538
  ENDIF.
* End of Insert VIMI-16538

ENDFORM.                    " SAVE_UPLOAD_DATA
*&---------------------------------------------------------------------*
*&      Form  SAP_TO_TEXT
*&---------------------------------------------------------------------*
*       Convert internal table to file format
*----------------------------------------------------------------------*
*      <--P_P1_I_TAB_RAW_DATA  - The text data
*----------------------------------------------------------------------*
FORM sap_to_text  CHANGING p1_i_tab_raw_data TYPE truxs_t_text_data.

  CALL FUNCTION 'SAP_CONVERT_TO_TEX_FORMAT'
    EXPORTING
      i_field_seperator    = ','
*     I_LINE_HEADER        =
*     I_FILENAME           =
*     I_APPL_KEEP          = ' '
    TABLES
      i_tab_sap_data       = <t_dyntable>
    CHANGING
      i_tab_converted_data = p1_i_tab_raw_data
    EXCEPTIONS
      conversion_failed    = 1
      OTHERS               = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE 'I' NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    " SAP_TO_TEXT
*&---------------------------------------------------------------------*
*&      Form  EXIT_FM
*&---------------------------------------------------------------------*
*     Customer exit to enhance the functionality
*----------------------------------------------------------------------*
*      -->P_gt_usermap_coa
*      -->P_gt_appr_coa
*      -->P_gt_appr_limit
*      -->P_fm_exit
*      -->P_I_DMODE
*      -->P_I_FMODE
*      -->P_I_UPLOAD
*      -->P_I_DWLOAD
*      -->P_I_FILEPATH
*      <--P_g_success
*      <--P_RC
*----------------------------------------------------------------------*
FORM exit_fm  TABLES   p_gt_usermap_coa STRUCTURE /ors/usermap
                       p_gt_appr_coa STRUCTURE /opt/appr_coa
                       p_gt_appr_limit STRUCTURE /opt/appr_limit
              USING    p_fm_exit TYPE /opt/ii_value_de
                       p_dmode TYPE c
                       p_fmode TYPE c
                       p_upload TYPE c
                       p_dwload TYPE c
                       p_filepath TYPE string
              CHANGING p_g_success TYPE c
                       p_rc TYPE i.

  CALL FUNCTION p_fm_exit    " /OPT/COA_UPLOAD_EXIT
    EXPORTING
      i_dmode      = p_dmode
      i_fmode      = p_fmode
      i_upload     = p_upload
      i_dwload     = p_dwload
      i_filepath   = p_filepath
    IMPORTING
      e_success    = p_g_success
    TABLES
      t_usermap    = p_gt_usermap_coa
      t_appr_coa   = p_gt_appr_coa
      t_appr_limit = p_gt_appr_limit
    EXCEPTIONS
      rc           = 1
      OTHERS       = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE 'I' NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    EXIT.
  ENDIF.

ENDFORM.                    " EXIT_FM
*&---------------------------------------------------------------------*
*&      Form  CHECK_FILE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM check_file .

* To provide F4 help for file on presenation server
*  IF p_ps EQ 'X' . "VIMI-14339
  CALL METHOD cl_gui_frontend_services=>get_temp_directory
    CHANGING
      temp_dir = directory.
  CALL METHOD cl_gui_frontend_services=>file_open_dialog
    EXPORTING
      window_title      = 'SELECT THE FILE'
      initial_directory = directory
*     file_filter       = '*.CSV'              "VIMI-18733
      file_filter       = '(*.csv)|*.csv|'      "VIMI-18733
      multiselection    = ' '
    CHANGING
      file_table        = filetable
      rc                = rc.
  IF rc = 1.
    READ TABLE filetable INDEX 1 INTO line.
    p_file = line-filename.
  ENDIF.
*Begin 7.5 VIMI-14339
*  ELSE.
** To provide F4 help for file on application server
*    CALL FUNCTION 'F4_DXFILENAME_TOPRECURSION'
*      EXPORTING
*        i_location_flag = 'A'
*        i_server        = ' '
**        i_path          = search_dir
**        filemask        = c_fnh_mask
*        fileoperation   = 'R'
*      IMPORTING
*        o_path          = file_path
*      EXCEPTIONS
*        rfc_error       = 1
*        OTHERS          = 2.
*
*    IF sy-subrc EQ 0.
*      p_file = file_path.
*    ENDIF.
*
*    IF NOT p_file  IS INITIAL.
*      WRITE:/ 'Directory exists.'.
*    ELSE.
*      WRITE:/ 'Directory does not exist.'.
*    ENDIF.
*  ENDIF.
*End 7.5 VIMI-14339
ENDFORM.                    " CHECK_FILE
*&---------------------------------------------------------------------*
*&      Form  UPLOAD_DATA_FILE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM upload_data_file .
  p_file1 = p_file.
  IF NOT p_upload IS INITIAL .
    gv_param_name = 'COA_UPLOAD_EXIT_UP'.
    PERFORM custom_exit USING gv_param_name
                        CHANGING fm_exit.
    IF NOT fm_exit IS INITIAL.
*     Begin of VIMI-16299 Replace
*      PERFORM exit_fm TABLES gt_usermap_coa
*                             gt_appr_coa
*                             gt_appr_limit
*                      USING  fm_exit
*                             p_dmode
*                             p_fmode
*                             p_upload
*                             p_dwload
*                             p_file1
*                   CHANGING  g_success
*                             rc .
      LOOP AT gt_file INTO gs_file.
        p_file1 = gs_file-filename.
        PERFORM exit_fm TABLES gt_usermap_coa
                               gt_appr_coa
                               gt_appr_limit
                        USING  fm_exit
                               p_dmode
                               p_fmode
                               p_upload
                               p_dwload
                               p_file1
                     CHANGING  g_success
                               rc .
      ENDLOOP.
*     End of VIMI-16299
    ELSE.
      PERFORM upload_get_dta.
    ENDIF.
  ENDIF.

ENDFORM.                    " UPLOAD_DATA_FILE
*&---------------------------------------------------------------------*
*&      Form  DOWNLOAD_DATA_FILE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM download_data_file .
  IF NOT p_dwload IS INITIAL.
*   Begin of VIMI-16125 Replace
    PERFORM download TABLES i_tab_raw_data
                      USING  p_file1
                             p_ps.
*    PERFORM download TABLES i_tab_raw_data
*                      USING  p_file1.
**                             p_ps. "VIMI-14339
*   End of VIMI-16125 Replace
  ENDIF.

ENDFORM.                    " DOWNLOAD_DATA_FILE
*&---------------------------------------------------------------------*
*&      Form  INITILALIZATION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM initialization USING p_gv_subrc.

*** Start of changes @001
  DATA : lt_files TYPE TABLE OF eps2fili,
         lv_dir   TYPE eps2filnam.
*** End of changes @001
  DATA : lv_tcode TYPE sy-tcode.
  DATA:  lv_varkey TYPE rstable-varkey.                     "VIMI-16206
  REFRESH : i_tab_raw_data,
            gt_usermap_coa,
            gt_appr_coa ,
            gt_appr_limit,
            lt_error_mgs,
            gt_coa_upload.

  CLEAR :gs_usermap_coa ,
         gs_app_coa,
         gs_app_limit,
         ls_error_mgs,
         gv_fmodelog.        "VIMI-19181

  lv_tcode = '/OPT/VIM_COAUPLOAD'.

  AUTHORITY-CHECK OBJECT 'S_TCODE'
                ID       'TCD'
                FIELD    lv_tcode.

  IF sy-subrc NE 0.
    MESSAGE i027(/opt/viic) WITH lv_tcode.
    p_gv_subrc = 4.
  ENDIF.

* Begin of VIMI-16206: Lock checks early in the process
  IF p_upload = 'X'.
    lv_varkey = sy-mandt.

    CALL FUNCTION 'ENQUEUE_E_TABLEE'
      EXPORTING
        tabname        = '/OPT/APPR_COA'
        varkey         = lv_varkey
        _scope         = 1
      EXCEPTIONS
        foreign_lock   = 1
        system_failure = 2
        OTHERS         = 3.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE 'I' NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      p_gv_subrc = 4.
    ENDIF.
    CHECK p_gv_subrc = 0.
    CALL FUNCTION 'ENQUEUE_E_TABLEE'
      EXPORTING
        tabname        = '/OPT/APPR_LIMIT'
        varkey         = lv_varkey
        _scope         = 1
      EXCEPTIONS
        foreign_lock   = 1
        system_failure = 2
        OTHERS         = 3.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE 'I' NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      p_gv_subrc = 4.
    ENDIF.
    CHECK p_gv_subrc = 0.
    CALL FUNCTION 'ENQUEUE_E_TABLEE'
      EXPORTING
        tabname        = '/OPT/AFS_CODER'
        varkey         = lv_varkey
        _scope         = 1
      EXCEPTIONS
        foreign_lock   = 1
        system_failure = 2
        OTHERS         = 3.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE 'I' NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      p_gv_subrc = 4.
    ENDIF.
    CHECK p_gv_subrc = 0.
  ENDIF.
* end of VIMI-16206

* Begin of VIMI-16125
* Check p_file is not empty
  IF p_ps IS NOT INITIAL.
    IF p_file IS INITIAL.
      MESSAGE i005(/opt/coa_upl).
      p_gv_subrc = 4.
    ENDIF.
  ENDIF.

  IF p_as IS NOT INITIAL.
*   Check p_path is not empty
    IF p_path IS INITIAL.
      MESSAGE i006(/opt/coa_upl).
      p_gv_subrc = 4.
    ELSE.
*     Get physical path from customizing (Transaction FILE)
*     Begin of VIMI-16299 Replace
*      CALL FUNCTION 'FILE_GET_NAME'
*        EXPORTING
*          logical_filename = p_path
*        IMPORTING
*          file_name        = p_file
*        EXCEPTIONS
*          file_not_found   = 1
*          OTHERS           = 2.
*      IF sy-subrc <> 0.
*        MESSAGE i007(/opt/coa_upl).
*        p_gv_subrc = 4.
*      ENDIF.
*      DATA: ls_filepath LIKE LINE OF p_path.
*      LOOP AT p_path INTO ls_filepath.

*     VIMI-18205: check allowed filenames (SAP PQ requirement)
*** Start of changes @001
      lv_dir = p_path.
      CALL FUNCTION 'EPS2_GET_DIRECTORY_LISTING'
        EXPORTING
          iv_dir_name            = lv_dir
        TABLES
          dir_list               = lt_files
        EXCEPTIONS
          invalid_eps_subdir     = 1
          sapgparam_failed       = 2
          build_directory_failed = 3
          no_authorization       = 4
          read_directory_failed  = 5
          too_many_read_errors   = 6
          empty_directory_list   = 7
          OTHERS                 = 8.
      IF sy-subrc IS INITIAL.
        READ TABLE lt_files INTO DATA(ls_files) INDEX 1. "reading recent file
        IF sy-subrc = 0.
          gs_file-filename = lv_dir && ls_files-name.
          APPEND gs_file TO gt_file.
        ENDIF.
      ELSE.
        MESSAGE i007(/opt/coa_upl).
        p_gv_subrc = 4.
      ENDIF.
*      IF p_path NP cv_allowed_filename_cond.
*        MESSAGE i009(/opt/coa_upl) WITH cv_allowed_filename_cond.
*        p_gv_subrc = 4.
*        RETURN.
*      ENDIF.
**     end of VIMI-18205
*      CLEAR gs_file.
*      CLEAR gt_file.
*      CALL FUNCTION 'FILE_GET_NAME'
*        EXPORTING
*          logical_filename = p_path
**         logical_filename = ls_filepath-low
*        IMPORTING
*          file_name        = gs_file
*        EXCEPTIONS
*          file_not_found   = 1
*          OTHERS           = 2.
*      IF sy-subrc <> 0.
*        MESSAGE i007(/opt/coa_upl).
*        p_gv_subrc = 4.
*      ELSE.
*        APPEND gs_file TO gt_file.
*      ENDIF.
*** End of changes @001
*      ENDLOOP.
*   End of VIMI-16299
    ENDIF.
  ENDIF.
* End of VIMI-16125

  SELECT * FROM t001 INTO TABLE git_t001. "VIMI-16997/STAMADA

* Begin of VIMI-19181
  IF p_fmode IS NOT INITIAL.
    CALL FUNCTION '/PTGWFI/CP_READCONSTANT'
      EXPORTING
        constname          = 'COA_UPLOAD_FMODE_LOG'
        productcode        = 'IAP'
      IMPORTING
        constvalue         = gv_fmodelog
      EXCEPTIONS
        constant_not_found = 1
        OTHERS             = 2.
  ENDIF.
* End of VIMI-19181
ENDFORM.                    " INITILALIZATION
*&---------------------------------------------------------------------*
*&      Form  DISPLAY_OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM display_output .
  DATA: ls_appr_coa_nodel LIKE LINE OF gt_appr_coa. " VIMI-16273
  DATA: ls_appr_coa_dup LIKE LINE OF gt_appr_coa.   " VIMI-16327
  DATA: lv_lines TYPE i.                            " VIMI-16538

* Begin of insert VIMI-16538
  IF p_tmode IS NOT INITIAL.
    WRITE:/.
    WRITE:/5 'W A R N I N G: Test Mode!'(043).
    WRITE:/.
    WRITE:/.
  ENDIF.
* End of insert VIMI-16538

* Begin of delete VIMI-16538
** Begin of VIMI-16244
*  IF gt_appr_coa_conv_error IS NOT INITIAL.
*    NEW-LINE.
*    SKIP 1.
*    WRITE:/5 sy-uline(155).
*    WRITE:/5 sy-vline.
*    WRITE: 10(148) 'Conversion errors WBS element :'(036) COLOR COL_HEADING, sy-vline.
*    WRITE:/5 sy-uline(155).
*    WRITE:
*      5 sy-vline,
*      /10(8) 'CompCode'(030),
*      20(5) 'Level'(031),
*      30(35) 'OpenText User-ID'(032),
*      70(4) 'Type'(033),
*      80(12) 'Actor'(034),
*      100(10) 'Counter'(035),
*      110(24) 'WBS-Element'(037),
*      134(24) 'WBS-Element'(037),
*      sy-vline,
*      5 sy-vline.
*
*    LOOP AT gt_appr_coa_conv_error INTO ls_appr_coa_nodel.
*      WRITE:
*        5 sy-vline,
*        /10(4) ls_appr_coa_nodel-comp_code,
*        20(3) ls_appr_coa_nodel-appr_level,
*        30(35) ls_appr_coa_nodel-opt_userid,
*        70(2) ls_appr_coa_nodel-otype,
*        80(12) ls_appr_coa_nodel-actorid,
*        110(24) ls_appr_coa_nodel-wbs_element USING NO EDIT MASK,
*        134(24) ls_appr_coa_nodel-wbs_element2 USING NO EDIT MASK,
*        sy-vline,
*        5 sy-vline.
*    ENDLOOP.
*    WRITE: /5 sy-uline(155).
*  ENDIF.
** end of VIMI-16244
* End of delete VIMI-16538

* Begin of VIMI-18139/snittala
* Begin of insert VIMI-16538
*  DESCRIBE TABLE gt_appr_coa_nodel LINES lv_lines.
*  ADD lv_lines TO gv_ncoa.
*  DESCRIBE TABLE gt_appr_coa_duplicate LINES lv_lines.
*  ADD lv_lines TO gv_ncoa.
*  DESCRIBE TABLE gt_appr_coa_conv_error LINES lv_lines.
*  ADD lv_lines TO gv_ncoa.
*  DESCRIBE TABLE gt_appr_coa_val_error LINES lv_lines.
*  ADD lv_lines TO gv_ncoa.
* End of insert VIMI-16538
* Above logic is not needed anymore.
  CLEAR gv_ncoa.
  gv_ncoa = gv_coa_act - gv_coatab.
* End of VIMI-18139/snittala
* Begin of VIMI-18191/snittala
  CLEAR gv_napl.
  gv_napl = gv_apprlmt_act - gv_leveltab.
* End of VIMI-18191/snittala


  DESCRIBE TABLE lt_error_mgs[] LINES lv_failed.            "VIMI-16261

* to display the o/p with sucessful and unsucessful records.
  IF p_upload = 'X' AND fm_exit IS INITIAL.
*Begin VIMI-16216
    IF p_dmode IS INITIAL AND NOT lt_error_mgs[] IS INITIAL. "Full Upload mode
      CLEAR ls_error_mgs.
      READ TABLE lt_error_mgs INTO ls_error_mgs WITH KEY userid = 'EXCEPTION'.
      IF sy-subrc = 0. "cx_sy_open_sql_db error occurs
        WRITE:'Upload fails. Please correct the file and do upload again...'(021).
        NEW-LINE.
        IF ls_error_mgs-tab = c_usr.
          WRITE:/'Inserting in table fails:'(019), '/ors/usermap.'.
          WRITE:/'Reason: '(020),  ls_error_mgs-message.
        ELSEIF ls_error_mgs-tab = c_coa.
          WRITE:/'Inserting in table fails:'(019), '/opt/appr_coa.'.
          WRITE:/'Reason: '(020),  ls_error_mgs-message.
        ELSEIF ls_error_mgs-tab = c_apl.
          WRITE:/'Inserting in table fails:'(019), '/opt/appr_limit.'.
          WRITE:/'Reason:'(020),  ls_error_mgs-message.
        ENDIF.
      ELSE. " No cx_sy_open_sql_db error
        WRITE:/'Upload cancelled. Please correct the file and do upload again...'(022).
        NEW-LINE.
        WRITE:/'Erronous Records:'(018), lv_failed.
        NEW-LINE.
        SKIP 1.
        SORT lt_error_mgs BY tab.
        WRITE:/ sy-vline,
                (15) 'Optuserid'(011) COLOR COL_HEADING, sy-vline,
                (25) 'Tab type'(012)  COLOR COL_HEADING, sy-vline,
                (120) 'Error Reason'(013)  COLOR COL_HEADING, sy-vline.
        WRITE:/ sy-uline(170).

        LOOP AT lt_error_mgs INTO ls_error_mgs.
          WRITE:/ sy-vline ,
                (15) ls_error_mgs-userid ,sy-vline,
                (25) ls_error_mgs-tab ,sy-vline,
                (120) ls_error_mgs-message ,sy-vline.
        ENDLOOP.
        WRITE:/ sy-uline(170).
      ENDIF.
    ELSE.     "Delta Upload Mode or full mode with no error
*End VIMI-16216
      WRITE: /5 sy-uline(35).
      WRITE:/5 sy-vline,
            10(28) 'Successful Records Uploaded'(004) COLOR COL_HEADING, sy-vline.
      WRITE: /5 sy-uline(35).
*  NEW-LINE.
      WRITE: 5 sy-vline,
             /10(16) 'USERTAB      :'(005),gv_usrtab, sy-vline,
             5 sy-vline,
             /10(16) 'COATAB       :'(006),gv_coatab, sy-vline,
             5 sy-vline,
             /10(16) 'APL-LIMITTAB :'(007),gv_leveltab, sy-vline,
             5 sy-vline.
      WRITE: /5 sy-uline(35).
      WRITE: /5 sy-uline(35).
      WRITE: /5 sy-vline,
             10(28) 'UnSuccessful Records '(008) COLOR COL_HEADING, sy-vline.
      WRITE: /5 sy-uline(35).
*  NEW-LINE.
      WRITE: 5 sy-vline,
             /10(16) 'USERTAB      :'(005),gv_nusr, sy-vline,
             5 sy-vline,
             /10(16) 'COATAB       :'(006),gv_ncoa, sy-vline,
             5 sy-vline,
             /10(16) 'APL-LIMITTAB :'(007),gv_napl, sy-vline,
             5 sy-vline.
      WRITE: /5 sy-uline(35).
* Begin of insert VIMI-16538
      IF lv_failed <> 0.
* End of insert VIMI-16538
        NEW-LINE.
        SKIP 1.                                    "VIMI-18191
        WRITE:/5 'Unsuccessful Records Details are shown below :'(009). "VIMI-18191
* Begin of VIMI-18139/snittala
* The count logic is revised.The unsuccessful record count handled
* in new logic
*        SKIP 1.
*        WRITE:/5 'Unsuccessful Records Details :'(009), lv_failed.
*        NEW-LINE.
* End of VIMI-18139/snittala
        SKIP 1.
        READ TABLE lt_error_mgs INTO ls_error_mgs WITH KEY tab = c_usr.
        IF sy-subrc = 0.
          WRITE:/5 'User Details :'(010).
          WRITE:/5 sy-uline(100).

          WRITE:/5 sy-vline,
                (15) 'Optuserid'(011) COLOR COL_HEADING, sy-vline,
                (25) 'Tab type'(012)  COLOR COL_HEADING, sy-vline,
                (50) 'Error Reason'(013)  COLOR COL_HEADING, sy-vline.
          WRITE:/5 sy-uline(100).

          LOOP AT lt_error_mgs INTO ls_error_mgs WHERE tab = c_usr.
            WRITE: /5  sy-vline ,
                  (15) ls_error_mgs-userid ,sy-vline,
                  (25) ls_error_mgs-tab ,sy-vline,
                  (50) ls_error_mgs-message ,sy-vline.
          ENDLOOP.

          WRITE:/5 sy-uline(100).
        ENDIF.
        NEW-LINE.
        SKIP 1.
        READ TABLE lt_error_mgs INTO ls_error_mgs WITH KEY tab = c_coa.
        IF sy-subrc = 0.
          WRITE:/5 'COA Details :'(014).
*          WRITE:/5 sy-uline(100).         "VIMI-18191/snittala
          WRITE:/5 sy-uline(130).         "VIMI-18191/snittala
          WRITE:/5 sy-vline,

*Begin of VIMI-18191/snittala
*                (15) 'Optuserid'(011) COLOR COL_HEADING, sy-vline,
*                (25) 'Tab type'(012)  COLOR COL_HEADING, sy-vline,
*                (50) 'Error Reason'(013)  COLOR COL_HEADING, sy-vline.
                (10) 'Tab type'(012)  COLOR COL_HEADING, sy-vline,
                (15) 'Optuserid'(011) COLOR COL_HEADING, sy-vline,
                (10) 'Comp Code' COLOR COL_HEADING, sy-vline,
                (10) 'Exp Type' COLOR COL_HEADING, sy-vline,
                (10) 'Appr Level' COLOR COL_HEADING, sy-vline,
                (56) 'Error Reason'(013) COLOR COL_HEADING, sy-vline.
* End of VIMI-18191/snittala
*          WRITE:/5 sy-uline(100).         "VIMI-18191/snittala
          WRITE:/5 sy-uline(130).         "VIMI-18191/snittala

          LOOP AT lt_error_mgs INTO ls_error_mgs WHERE tab = c_coa.
            WRITE: /5  sy-vline ,

* Begin of VIMI-18191/snittala
*                (15) ls_error_mgs-userid ,sy-vline,
*                (25) ls_error_mgs-tab ,sy-vline,
*                (50) ls_error_mgs-message ,sy-vline,
                  (10) ls_error_mgs-tab ,sy-vline,
                   (15) ls_error_mgs-userid ,sy-vline,
                  (10) ls_error_mgs-bukrs,sy-vline,
                  (10) ls_error_mgs-expense_type,sy-vline,
                  (10) ls_error_mgs-appr_level,sy-vline,
                  (56) ls_error_mgs-message,sy-vline.

* End of VIMI-18191-snittala
          ENDLOOP.
*          WRITE:/5 sy-uline(100).         "VIMI-18191/snittala
          WRITE:/5 sy-uline(130).         "VIMI-18191/snittala
        ENDIF.
        NEW-LINE.
        SKIP 1.
        READ TABLE lt_error_mgs INTO ls_error_mgs WITH KEY tab = c_apl.
        IF sy-subrc = 0.
          WRITE:/5 'APL Details :'(015).
*          WRITE:/5 sy-uline(82).           "VIMI-18191/snittala
          WRITE:/5 sy-uline(130).           "VIMI-18191/snittala
          WRITE:/5 sy-vline,

* Begin of VIMI-18191/snittala
*               (25) 'Tab type'(012)  COLOR COL_HEADING, sy-vline,
*              (50) 'Error Reason'(013) COLOR COL_HEADING, sy-vline.
*          WRITE:/5 sy-uline(82).
              (28) 'Tab type'(012)  COLOR COL_HEADING, sy-vline,
              (10) 'Comp Code' COLOR COL_HEADING, sy-vline,
              (10) 'Exp Type' COLOR COL_HEADING, sy-vline,
              (10) 'Appr Level' COLOR COL_HEADING, sy-vline,
              (56) 'Error Reason'(013) COLOR COL_HEADING, sy-vline.
          WRITE:/5 sy-uline(130).
* End of VIMI-18191/snittala
          LOOP AT lt_error_mgs INTO ls_error_mgs WHERE tab = c_apl.
            WRITE: /5  sy-vline ,
*            (15) ls_error_mgs-userid ,sy-vline,
* Begin of VIMI-18191/snittala
*       (25) ls_error_mgs-tab ,sy-vline,
*                (50) ls_error_mgs-message ,sy-vline,
                  (28) ls_error_mgs-tab ,sy-vline,
                  (10) ls_error_mgs-bukrs, sy-vline,
                  (10) ls_error_mgs-expense_type, sy-vline,
                  (10) ls_error_mgs-appr_level, sy-vline,
                  (56) ls_error_mgs-message, sy-vline.

* End of VIMI-18191-snittala
          ENDLOOP.
*           WRITE:/5 sy-uline(82).           "VIMI-18191/snittala
          WRITE:/5 sy-uline(130).           "VIMI-18191/snittala
        ENDIF.
* Begin of insert VIMI-16538
      ENDIF.
* End of insert VIMI-16538
    ENDIF.                                                  "VIMI-16216

* Begin of insert VIMI-16538
    IF gt_appr_coa_conv_error IS NOT INITIAL.
      PERFORM display_protocol USING gt_appr_coa_conv_error '036'.
    ENDIF.
    IF gt_appr_coa_val_error IS NOT INITIAL.
      PERFORM display_protocol USING gt_appr_coa_val_error '039'.
    ENDIF.
* End of insert VIMI-16538

* begin of VIMI-16273
    IF gt_appr_coa_del IS NOT INITIAL OR gt_appr_coa_nodel IS NOT INITIAL.
      NEW-LINE.
      SKIP 1.
      WRITE:/5 'Deletion of COA User Details :'(024).

      WRITE:/5 sy-uline(45).
      WRITE:/5 sy-vline.
      IF gv_deletion_failed = 'X'.
        WRITE: 10(38) 'Deletion failed :'(027) COLOR COL_HEADING, sy-vline.
      ELSE.
        WRITE: 10(38) 'Deleted Records :'(028) COLOR COL_HEADING, sy-vline.
        WRITE:/5 sy-uline(45).
        WRITE:
          5 sy-vline,
          /10(26) 'Marked for deletion'(025), gv_marked_for_deletion, sy-vline,
          5 sy-vline,
          /10(26) 'Actually deleted   '(026), gv_actually_deleted, sy-vline,
          5 sy-vline.
      ENDIF.
      WRITE: /5 sy-uline(45).

      IF gt_appr_coa_nodel IS NOT INITIAL.
* Begin of replace VIMI-16538
*        NEW-LINE.
*        SKIP 1.
*        WRITE:/5 sy-uline(107).
*        WRITE:/5 sy-vline.
*        WRITE: 10(100) 'Marked for deletion; but not deleted  :'(029) COLOR COL_HEADING, sy-vline.
*        WRITE:/5 sy-uline(107).
*        WRITE:
*          5 sy-vline,
*          /10(8) 'CompCode'(030),
*          20(5) 'Level'(031),
*          30(35) 'OpenText User-ID'(032),
*          70(4) 'Type'(033),
*          80(12) 'Actor'(034),
*          100(10) 'Counter'(035),
*          sy-vline,
*          5 sy-vline.
*
*        LOOP AT gt_appr_coa_nodel INTO ls_appr_coa_nodel.
*          WRITE:
*            5 sy-vline,
*            /10(4) ls_appr_coa_nodel-comp_code,
*            20(3) ls_appr_coa_nodel-appr_level,
*            30(35) ls_appr_coa_nodel-opt_userid,
*            70(2) ls_appr_coa_nodel-otype,
*            80(12) ls_appr_coa_nodel-actorid,
*            100(10) ls_appr_coa_nodel-counter,
*            sy-vline,
*            5 sy-vline.
*        ENDLOOP.
*        WRITE: /5 sy-uline(107).
        PERFORM display_protocol USING gt_appr_coa_nodel '029'.
* End of replace VIMI-16538
      ENDIF.
    ENDIF.
* end of VIMI-16273

* begin of VIMI-16327
    IF gt_appr_coa_duplicate IS NOT INITIAL.
* Begin of replace VIMI-16538
*      NEW-LINE.
*      SKIP 1.
*      WRITE:/5 sy-uline(107).
*      WRITE:/5 sy-vline.
*      WRITE: 10(100) 'Already existing entries, no update:'(038) COLOR COL_HEADING, sy-vline.
*      WRITE:/5 sy-uline(107).
*      WRITE:
*        5 sy-vline,
*        /10(8) 'CompCode'(030),
*        20(5) 'Level'(031),
*        30(35) 'OpenText User-ID'(032),
*        70(4) 'Type'(033),
*        80(12) 'Actor'(034),
*        100(10) 'Counter'(035),
*        sy-vline,
*        5 sy-vline.
*
*      LOOP AT gt_appr_coa_duplicate INTO ls_appr_coa_dup.
*        WRITE:
*          5 sy-vline,
*          /10(4) ls_appr_coa_dup-comp_code,
*          20(3) ls_appr_coa_dup-appr_level,
*          30(35) ls_appr_coa_dup-opt_userid,
*          70(2) ls_appr_coa_dup-otype,
*          80(12) ls_appr_coa_dup-actorid,
*          100(10) ls_appr_coa_dup-counter,
*          sy-vline,
*          5 sy-vline.
*      ENDLOOP.
*      WRITE: /5 sy-uline(107).
      PERFORM display_protocol USING gt_appr_coa_duplicate '038'.
* End of replace VIMI-16538
    ENDIF.
* end of VIMI-16327


  ELSEIF p_dwload = 'X' AND fm_exit IS INITIAL.
    WRITE: /5 sy-uline(35).
    WRITE:/5 sy-vline,
       10(28) 'Downloaded Records : '(016) COLOR COL_HEADING, sy-vline.
    WRITE: /5 sy-uline(35).
*  NEW-LINE.
    WRITE: 5 sy-vline,
           /10(16) 'USERTAB      :'(005),gv_usrtab, sy-vline,
           5 sy-vline,
           /10(16) 'COATAB       :'(006),gv_coatab, sy-vline,
           5 sy-vline,
           /10(16) 'APL-LIMITTAB :'(007),gv_leveltab, sy-vline,
           5 sy-vline.
    WRITE: /5 sy-uline(35).
  ENDIF.

ENDFORM.                    " DISPLAY_OUTPUT
*&---------------------------------------------------------------------*
*&      Form  CUSTOM_EXIT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LV_PARAM_NAME  text
*      <--P_FM_EXIT  text
*----------------------------------------------------------------------*
FORM custom_exit  USING    p_lv_param_name TYPE /ptgwfi/const
                  CHANGING p_fm_exit TYPE /opt/ii_value_de.

  CALL FUNCTION '/OPT/VIM_READ_CONSTANT'
    EXPORTING
      prod_code   = 'IAP'
      param_name  = p_lv_param_name
    IMPORTING
      param_value = p_fm_exit
    EXCEPTIONS
      not_found   = 1
      OTHERS      = 2.
  IF sy-subrc <> 0.
*    MESSAGE ID sy-msgid TYPE 'I' NUMBER sy-msgno
*            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    " CUSTOM_EXIT

*
*&---------------------------------------------------------------------*
*&      Form  UPLOAD_GET_DTA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM upload_get_dta .

* GUI for upload data.
* Begin of VIMI-16125 replace
  PERFORM upload TABLES i_tab_raw_data
                   USING  p_file1
                          p_ps.
*  PERFORM upload TABLES i_tab_raw_data
*                   USING  p_file1.
**                          p_ps.    "VIMI-14339
* End of VIMI-16125 replace

* to get the configuration inf from /opt/coa_uplcfg for each tab
  PERFORM read_config.

*To upload the data into respective internal tables
  PERFORM upload_data TABLES i_tab_raw_data
                             gt_coa_upload.
* begin of VIMI-16273
* Delete lines with "delete flag"
  PERFORM handle_deleted_lines.
* end of VIMI-16273

* begin of VIMI-16327
  PERFORM enrich_data.
* end of VIMI-16327

*To perform validations on the records provided in the file.
  PERFORM validation .

* To save the records from the internal tables to coa tables .
  PERFORM save_upload_data .
*  ENDIF.

ENDFORM.                    " UPLOAD_GET_DTA
*&---------------------------------------------------------------------*
*&      Form  DOWNLOAD_GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM download_get_data .

  DATA : p1_i_tab_raw_data TYPE truxs_t_text_data,
         p2_i_tab_raw_data TYPE truxs_t_text_data,
         ps_tab_raw_data   TYPE LINE OF truxs_t_text_data,
         lt_data_table     TYPE REF TO data.                    "VIMI-16224
  CLEAR : gv_usrtab,
          gv_coatab,
          gv_leveltab.


  SELECT * FROM /ors/usermap INTO TABLE gt_usermap_coa .
  SELECT * FROM /opt/appr_coa INTO TABLE gt_appr_coa.
  SELECT * FROM /opt/appr_limit INTO TABLE gt_appr_limit.

  DESCRIBE TABLE gt_usermap_coa LINES gv_usrtab.
  DESCRIBE TABLE gt_appr_coa LINES gv_coatab.
  DESCRIBE TABLE gt_appr_limit LINES gv_leveltab.


  IF NOT gt_usermap_coa IS INITIAL.
    UNASSIGN <t_dyntable>.

* Begin of VIMI-16224
    IF p_dcc IS NOT INITIAL.
      CLEAR lt_data_table.
      PERFORM download_apply_configuration USING c_usr gt_usermap_coa CHANGING  lt_data_table sy-subrc.
      IF sy-subrc <> 0.
        WRITE: TEXT-t39.
        RETURN.
      ENDIF.
      ASSIGN lt_data_table->* TO <t_dyntable>.
    ELSE.
* end of VIMI-16224
*    IF sy-subrc = 0.                                      "VIMI-11630
      ASSIGN gt_usermap_coa TO <t_dyntable>.
*    ENDIF.
    ENDIF.                                                  "VIMI-16224
    "VIMI-11630
    IF NOT <t_dyntable> IS INITIAL.                         "VIMI-11630
      PERFORM sap_to_text CHANGING p1_i_tab_raw_data.

      p2_i_tab_raw_data = p1_i_tab_raw_data.
    ENDIF.                                                  "VIMI-11630
  ENDIF.

  IF NOT  gt_appr_coa IS INITIAL.
    UNASSIGN <t_dyntable>.
* Begin of VIMI-16224
    IF p_dcc IS NOT INITIAL.
      CLEAR lt_data_table.
      PERFORM download_apply_configuration USING c_coa gt_appr_coa CHANGING  lt_data_table sy-subrc.
      IF sy-subrc <> 0.
        WRITE: TEXT-t39.
        RETURN.
      ENDIF.
      ASSIGN lt_data_table->* TO <t_dyntable>.
    ELSE.
* end of VIMI-16224
*    IF sy-subrc = 0.                                      "VIMI-11630
      ASSIGN gt_appr_coa TO <t_dyntable>.
*    ENDIF.                                         "VIMI-11630
    ENDIF.                                                  "VIMI-16224

    IF NOT <t_dyntable> IS INITIAL.                         "VIMI-11630
      PERFORM sap_to_text CHANGING p1_i_tab_raw_data.

      LOOP AT p1_i_tab_raw_data INTO ps_tab_raw_data.
        APPEND ps_tab_raw_data TO p2_i_tab_raw_data.
      ENDLOOP.

    ENDIF.                                                  "VIMI-11630
  ENDIF.

  IF NOT gt_appr_limit IS INITIAL.
    UNASSIGN <t_dyntable>.
* Begin of VIMI-16224
    IF p_dcc IS NOT INITIAL.
      PERFORM download_apply_configuration USING c_apl gt_appr_limit CHANGING  lt_data_table sy-subrc.
      IF sy-subrc <> 0.
        WRITE: TEXT-t39.
        RETURN.
      ENDIF.
      ASSIGN lt_data_table->* TO <t_dyntable>.
    ELSE.
* end of VIMI-16224
*    IF sy-subrc = 0.                                      "VIMI-11630
      ASSIGN gt_appr_limit TO <t_dyntable>.
*    ENDIF.                                      "VIMI-11630
    ENDIF.                                                  "VIMI-16224

    IF NOT <t_dyntable> IS INITIAL.                         "VIMI-11630
*     Begin of VIMI-16224
*      PERFORM sap_to_text CHANGING p1_i_tab_raw_data.
      PERFORM sap_to_text2 CHANGING p1_i_tab_raw_data.
**     End of VIMI-16224
      LOOP AT p1_i_tab_raw_data INTO ps_tab_raw_data.
        APPEND ps_tab_raw_data TO p2_i_tab_raw_data.
      ENDLOOP.
    ENDIF.                                                  "VIMI-11630
  ENDIF.

* To download the data from the presentation
* Begin of VIMI-16125 replace
  IF NOT p_ps IS INITIAL.
    CALL FUNCTION 'GUI_DOWNLOAD'
      EXPORTING
        filename = p_file1
      TABLES
        data_tab = p2_i_tab_raw_data
      EXCEPTIONS
        OTHERS   = 1.
  ELSE.
*   Begin of VIMI-16299 Replace
*    OPEN DATASET p_file1 FOR OUTPUT IN TEXT MODE ENCODING DEFAULT .
*    IF sy-subrc EQ 0.
*      LOOP AT p2_i_tab_raw_data INTO  ps_tab_raw_data .
*        TRANSFER  ps_tab_raw_data  TO p_file1 .
*      ENDLOOP.
*      WRITE: text-t38.
*    ELSE.
*      WRITE: text-t39.
*    ENDIF.
*    CLOSE DATASET p_file1.

    LOOP AT gt_file INTO gs_file.
      OPEN DATASET gs_file-filename FOR OUTPUT IN TEXT MODE ENCODING DEFAULT .
      IF sy-subrc EQ 0.
        LOOP AT p2_i_tab_raw_data INTO  ps_tab_raw_data .
          TRANSFER  ps_tab_raw_data  TO gs_file-filename.
        ENDLOOP.
        WRITE: TEXT-t38.
      ELSE.
        WRITE: TEXT-t39.
      ENDIF.

      CLOSE DATASET gs_file-filename.
    ENDLOOP.
*   End of VIMI-16299
    RETURN.
  ENDIF.

  IF sy-subrc EQ 0.
    WRITE: TEXT-t38.
  ELSE.
    WRITE: TEXT-t39.
  ENDIF.


**  IF NOT p_ps IS INITIAL.    "VIMI-14339
*  CALL FUNCTION 'GUI_DOWNLOAD'
*    EXPORTING
*      filename = p_file1
*    TABLES
*      data_tab = p2_i_tab_raw_data
*    EXCEPTIONS
*      OTHERS   = 1.
**Begin 7.5 VIMI-14339 - comment out
**  ELSE.
**    OPEN DATASET p_file1 FOR OUTPUT IN TEXT MODE ENCODING DEFAULT .
**    IF sy-subrc EQ 0.
**      LOOP AT p2_i_tab_raw_data INTO  ps_tab_raw_data .
**        TRANSFER  ps_tab_raw_data  TO p_file1 .
**      ENDLOOP.
**    ENDIF.
**    CLOSE DATASET p_file1.
**  ENDIF.
**
**  IF sy-subrc EQ 0.
**    WRITE: text-t38.
**  ELSE.
**    WRITE: text-t39.
**  ENDIF.
**End 7.5 VIMI-14339
* End of VIMI-16125 replace

ENDFORM.                    " DOWNLOAD_GET_DATA
*&---------------------------------------------------------------------*
*&      Form  READ_CONFIG
*&---------------------------------------------------------------------*
*       Read the Upload Configuration Data.
*----------------------------------------------------------------------*
FORM read_config .
  SELECT * FROM /opt/coa_uplcfg INTO TABLE gt_coa_upload WHERE active = 'X'.
  IF sy-subrc = 0.
    SORT gt_coa_upload BY tab sequence.
  ELSE.
    MESSAGE TEXT-t41 TYPE 'E'.
  ENDIF.
ENDFORM.                    " READ_CONFIG
*&---------------------------------------------------------------------*
*&      Form  GET_USERID
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM get_userid  USING    p_usermap TYPE /ors/usermap
                 CHANGING p_opt_userid.

  DATA: lcl_usermap TYPE REF TO /ors/usermapping,
        lwa_usermap TYPE /ors/usermap.

  lwa_usermap = p_usermap.

  PERFORM get_usermap_object CHANGING lcl_usermap.

  CALL METHOD lcl_usermap->addnewmapping
    CHANGING
      one_user           = lwa_usermap
    EXCEPTIONS
      cannot_create_user = 1
      OTHERS             = 2.

  IF sy-subrc = 0.
    p_opt_userid = lwa_usermap-opt_userid.
    CLEAR lwa_usermap.
  ELSE.

  ENDIF.

ENDFORM.                    " GET_USERID
*&---------------------------------------------------------------------*
*&      Form  CAPTURE_LEVEL_MESSAGES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM capture_level_messages  USING    p_text
                                      p_tab
                                      p_bukrs
                                      p_exptyp
                                      p_appr_level.

  IF NOT p_text IS INITIAL .
    ls_error_mgs-message      = p_text.
    ls_error_mgs-tab          = p_tab.
    ls_error_mgs-bukrs        = p_bukrs.
    ls_error_mgs-expense_type = p_exptyp.
    ls_error_mgs-appr_level   = p_appr_level.
    APPEND ls_error_mgs TO lt_error_mgs.
    CLEAR : ls_error_mgs.
  ELSE.
    EXIT.
  ENDIF.

ENDFORM.                    " CAPTURE_LEVEL_MESSAGES
*&---------------------------------------------------------------------*
*&      Form  CAPTURE_COA_MESSAGES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_TEXT_T22  text
*      -->P_L_TAB  text
*      -->P_GS_APPR_COA1_BUKRS  text
*      -->P_GS_APPR_COA1_APPR_LEVEL  text
*      -->P_GS_APPR_COA1_OPT_USERID  text
*----------------------------------------------------------------------*
FORM capture_coa_messages  USING    p_text
                                    p_tab
                                    p_bukrs
                                    p_appr_level
                                    p_opt_userid.

  IF NOT p_text IS INITIAL .
    ls_error_mgs-message      = p_text.
    ls_error_mgs-tab          = p_tab.
    ls_error_mgs-bukrs        = p_bukrs.
    ls_error_mgs-userid       = p_opt_userid.
    ls_error_mgs-appr_level   = p_appr_level.
    APPEND ls_error_mgs TO lt_error_mgs.
    CLEAR : ls_error_mgs.
  ELSE.
    EXIT.
  ENDIF.

ENDFORM.                    " CAPTURE_COA_MESSAGES
*&---------------------------------------------------------------------*
*&      Form  download_apply_config
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM download_apply_config USING p_variant TYPE char3
                           CHANGING p_raw_data TYPE truxs_t_text_data.

* VIMI-16224

* Types
  TYPES: BEGIN OF anydata,
           line_no   TYPE i,
           line_data TYPE c LENGTH 4096,
         END OF anydata.
  DATA: lt_datatab TYPE TABLE OF  anydata.
  DATA: ls_data LIKE LINE OF lt_datatab.



* Local data
  DATA: lt_config TYPE TABLE OF /opt/coa_uplcfg.
  DATA: ls_config TYPE /opt/coa_uplcfg.
  DATA: lt_raw_data TYPE truxs_t_text_data.
  DATA: ls_raw_data(4096) TYPE c.
  DATA: ls_raw_data_new(4096) TYPE c.
  DATA: lv_result(4096) TYPE c.
  DATA: lv_count TYPE i.
  DATA: lo_struc TYPE REF TO data.
  DATA: lt_comp_table TYPE cl_abap_structdescr=>component_table.
  DATA: lt_components TYPE cl_abap_structdescr=>component_table.
  DATA: ls_component TYPE abap_componentdescr.
  DATA: lo_tab TYPE REF TO cl_abap_tabledescr.
  DATA: lo_strucdescr TYPE REF TO cl_abap_structdescr.
  DATA: lt_struccomp_table TYPE cl_abap_structdescr=>component_table.
  DATA: ls_ddic_header TYPE x030l.

  FIELD-SYMBOLS: <fs_usermap_coa> TYPE /ors/usermap,
                 <fs_appr_coa>    TYPE /opt/appr_coa,
                 <fs_appr_limit>  TYPE /opt/appr_limit.


  IF p_dcc IS INITIAL.
    RETURN.
  ENDIF.


* Preparation
  lt_config = gt_coa_upload.
  DELETE lt_config
    WHERE
      tab <> p_variant.

* Apply config
  IF p_variant = c_usr.

*   Get components of struc
    ASSIGN gs_usermap_coa TO <fs_usermap_coa>.
    lo_tab ?= cl_abap_typedescr=>describe_by_data( gt_usermap_coa ).
    lo_strucdescr ?= lo_tab->get_table_line_type( ).
    CREATE DATA lo_struc TYPE HANDLE lo_strucdescr.
    lt_comp_table = lo_strucdescr->get_components( ).
    LOOP AT lt_comp_table INTO ls_component.
      IF ls_component-as_include IS INITIAL.
        APPEND ls_component TO lt_components.
      ELSE.
        CLEAR lt_struccomp_table.
        ls_ddic_header = ls_component-type->get_ddic_header( ).
        PERFORM get_struc_components USING ls_ddic_header-tabname
                                     CHANGING lt_struccomp_table.
        APPEND LINES OF lt_struccomp_table TO lt_components.
      ENDIF.
    ENDLOOP.

  ELSEIF p_variant = c_coa.

*   Get components of struc
    ASSIGN gs_app_coa TO <fs_appr_coa>.
    lo_tab ?= cl_abap_typedescr=>describe_by_data( gt_appr_coa ).
    lo_strucdescr ?= lo_tab->get_table_line_type( ).
    CREATE DATA lo_struc TYPE HANDLE lo_strucdescr.
    lt_comp_table = lo_strucdescr->get_components( ).
    LOOP AT lt_comp_table INTO ls_component.
      IF ls_component-as_include IS INITIAL.
        APPEND ls_component TO lt_components.
      ELSE.
        CLEAR lt_struccomp_table.
        ls_ddic_header = ls_component-type->get_ddic_header( ).
        PERFORM get_struc_components USING ls_ddic_header-tabname
                                     CHANGING lt_struccomp_table.
        APPEND LINES OF lt_struccomp_table TO lt_components.
      ENDIF.
    ENDLOOP.

  ELSEIF p_variant = c_apl.

*   Get components of struc
    ASSIGN gs_app_limit TO <fs_appr_limit>.
    lo_tab ?= cl_abap_typedescr=>describe_by_data( gt_appr_limit ).
    lo_strucdescr ?= lo_tab->get_table_line_type( ).
    CREATE DATA lo_struc TYPE HANDLE lo_strucdescr.
    lt_comp_table = lo_strucdescr->get_components( ).
    LOOP AT lt_comp_table INTO ls_component.
      IF ls_component-as_include IS INITIAL.
        APPEND ls_component TO lt_components.
      ELSE.
        CLEAR lt_struccomp_table.
        ls_ddic_header = ls_component-type->get_ddic_header( ).
        PERFORM get_struc_components USING ls_ddic_header-tabname
                                     CHANGING lt_struccomp_table.
        APPEND LINES OF lt_struccomp_table TO lt_components.
      ENDIF.
    ENDLOOP.

  ENDIF.


  LOOP AT p_raw_data INTO ls_raw_data.
*   Collect data
    CLEAR lt_datatab.
    CLEAR ls_data.
    CLEAR lv_count.
    DO.
      ADD 1 TO lv_count.
      SPLIT ls_raw_data AT ',' INTO lv_result ls_raw_data.

      CLEAR ls_component.
      READ TABLE lt_components
        INDEX lv_count
        INTO ls_component.

      CLEAR ls_config.
      READ TABLE lt_config
        WITH KEY fields = ls_component-name
        INTO ls_config.

      IF ls_config-sequence <> '0'.
        ls_data-line_no = ls_config-sequence.
        ls_data-line_data = lv_result.
        APPEND ls_data TO lt_datatab.
      ENDIF.
      IF ls_raw_data IS INITIAL.
        EXIT.
      ENDIF.
    ENDDO.
    IF lt_datatab IS INITIAL.
      CLEAR p_raw_data[].
      RETURN.
    ENDIF.
*   Reorganise data
    SORT lt_datatab BY line_no ASCENDING.
    CLEAR ls_raw_data_new.
    MOVE p_variant TO ls_raw_data_new.
    LOOP AT lt_datatab INTO ls_data.
*      IF ls_raw_data_new IS INITIAL.
*        ls_raw_data_new = ls_data-line_data.
*      ELSE.
      CONCATENATE ls_raw_data_new ',' ls_data-line_data INTO ls_raw_data_new.
*      ENDIF.
    ENDLOOP.
    APPEND ls_raw_data_new TO lt_raw_data.

  ENDLOOP.

  IF lt_raw_data IS NOT INITIAL.
    p_raw_data[] = lt_raw_data[].
  ENDIF.

ENDFORM.                    " download_apply_config
*&---------------------------------------------------------------------*
*&      Form  get_struc_components
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_struc_components USING p_tabname TYPE tabname
                          CHANGING p_struccomp_tab TYPE cl_abap_structdescr=>component_table.

* VIMI-16224

* Local data
  DATA: lt_struccomp_table TYPE cl_abap_structdescr=>component_table.
  DATA: lt_comp_table TYPE cl_abap_structdescr=>component_table.
  DATA: ls_component TYPE abap_componentdescr.
  DATA: ls_ddic_header TYPE x030l.
  DATA: lo_strucdescr TYPE REF TO cl_abap_structdescr.

* Get components of structure (recursive)
  lo_strucdescr ?= cl_abap_structdescr=>describe_by_name( p_tabname ).
  lt_struccomp_table = lo_strucdescr->get_components( ).

  LOOP AT lt_struccomp_table INTO ls_component.
    IF ls_component-as_include IS INITIAL.
      APPEND ls_component TO p_struccomp_tab.
    ELSE.
      CLEAR lt_comp_table.
      ls_ddic_header = ls_component-type->get_ddic_header( ).
      PERFORM get_struc_components USING ls_ddic_header-tabname
                                   CHANGING lt_comp_table.
      APPEND LINES OF lt_comp_table TO p_struccomp_tab.
    ENDIF.
  ENDLOOP.


ENDFORM.                    " Get_struc_components
*&---------------------------------------------------------------------*
*&      Form  sap_to_text2
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM sap_to_text2  CHANGING p1_i_tab_raw_data TYPE truxs_t_text_data.

* VIMI-16224

* Local data
  DATA: lt_raw_data TYPE truxs_t_text_data.
  DATA: ls_raw_data(4096) TYPE c.

  CLEAR lt_raw_data.
  CLEAR p1_i_tab_raw_data.

* Transform data

  CALL FUNCTION 'SAP_CONVERT_TO_TEX_FORMAT'
    EXPORTING
      i_field_seperator    = ';'
*     I_LINE_HEADER        =
*     I_FILENAME           =
*     I_APPL_KEEP          = ' '
    TABLES
      i_tab_sap_data       = <t_dyntable>
    CHANGING
      i_tab_converted_data = lt_raw_data
    EXCEPTIONS
      conversion_failed    = 1
      OTHERS               = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE 'I' NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  LOOP AT lt_raw_data INTO ls_raw_data.
* Begin of VIMI-23386/AMANGAPA
*    REPLACE ALL OCCURRENCES OF '.' IN ls_raw_data WITH ''.
*    REPLACE ALL OCCURRENCES OF ',' IN ls_raw_data WITH '.'.
    REPLACE ALL OCCURRENCES OF ',' IN ls_raw_data WITH ''.
* End of VIMI-23386/AMANGAPA
    REPLACE ALL OCCURRENCES OF ';' IN ls_raw_data WITH ','.
    APPEND ls_raw_data TO p1_i_tab_raw_data.
  ENDLOOP.


ENDFORM.                    " sap_to_text2
*&---------------------------------------------------------------------*
*&      Form  DOWNLOAD_APPLY_CONFIGURATION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_C_USR  text
*      <--P_GT_USERMAP_COA  text
*      <--P_LT_TABLE  text
*----------------------------------------------------------------------*
FORM download_apply_configuration  USING    piv_table
                                            pit_table TYPE ANY TABLE
                                   CHANGING pet_table TYPE REF TO data
                                            p_subrc TYPE sy-subrc.
  DATA : ref_struct_descr TYPE REF TO cl_abap_structdescr,
         ref_table_descr  TYPE REF TO cl_abap_tabledescr.
  DATA : lt_tabdescr   TYPE abap_compdescr_tab,
         wa_tabdescr   TYPE abap_compdescr,
         ls_coa_upload LIKE LINE OF gt_coa_upload.
  DATA: lo_target_struct     TYPE REF TO cl_abap_structdescr,
        lo_structdescr       TYPE REF TO cl_abap_structdescr,
        lo_target_table      TYPE REF TO cl_abap_tabledescr,

        lt_components        TYPE cl_abap_structdescr=>component_table,
        lt_sub_components    TYPE cl_abap_structdescr=>component_table,
        lt_components_create LIKE lt_components,
        ls_components        LIKE LINE OF lt_components.
  DATA: "t_newtable   TYPE REF TO data,
        t_newline    TYPE REF TO data.
  FIELD-SYMBOLS: <t_dyntable>        TYPE STANDARD TABLE,
                 <fs_dyntable>       TYPE any,
                 <fs_dyntable_input> TYPE any,
                 <f1>                TYPE any.
  p_subrc = 0.
  IF gt_coa_upload IS INITIAL.
    PERFORM read_config.
  ENDIF.
  TRY.
* Return structure of the table.
      ref_table_descr ?= cl_abap_typedescr=>describe_by_data( pit_table ).

      ref_struct_descr ?= ref_table_descr->get_table_line_type( ).

      lt_components = ref_struct_descr->get_components( ).
* iterative reading of structure components
      LOOP AT lt_components INTO ls_components WHERE as_include = abap_true.
        lo_structdescr ?= ls_components-type.
        lt_sub_components = lo_structdescr->get_components( ) .
        APPEND LINES OF lt_sub_components TO lt_components.
      ENDLOOP.

      CLEAR: ls_components.
      ls_components-type ?= cl_abap_elemdescr=>describe_by_data( piv_table ).
      ls_components-name = 'TAB'.
      APPEND ls_components TO lt_components_create.

      CLEAR: ls_components.
      SORT gt_coa_upload BY tab sequence.
      LOOP AT gt_coa_upload  INTO ls_coa_upload WHERE tab = piv_table
                                                      AND active = 'X'.
        IF  ls_coa_upload-fields = 'DELETE_FLAG'.
          CLEAR ls_components.
          ls_components-type ?= cl_abap_elemdescr=>describe_by_data( abap_true ).
          ls_components-name = 'DELETE_FLAG'.
          APPEND ls_components TO lt_components_create.
          CONTINUE.
        ENDIF.
        READ TABLE lt_components INTO ls_components  WITH KEY name = ls_coa_upload-fields.
        IF sy-subrc = 0.
          APPEND ls_components TO lt_components_create.
        ENDIF.
      ENDLOOP.

      lo_target_struct = cl_abap_structdescr=>create( lt_components_create ).

      lo_target_table = cl_abap_tabledescr=>create( lo_target_struct ).

      CREATE DATA pet_table TYPE HANDLE lo_target_table.
      ASSIGN pet_table->* TO <t_dyntable>.

*     Create dynamic work area and assign to FS
      CREATE DATA t_newline LIKE LINE OF <t_dyntable>.
      ASSIGN t_newline->* TO <fs_dyntable>.


      LOOP AT pit_table ASSIGNING <fs_dyntable_input>.

        MOVE-CORRESPONDING <fs_dyntable_input> TO <fs_dyntable>.
        ASSIGN COMPONENT 'TAB' OF STRUCTURE <fs_dyntable> TO <f1>.
        <f1> = piv_table.
* The marked field should not be uploaded.
        APPEND <fs_dyntable> TO <t_dyntable>.
      ENDLOOP.
    CATCH cx_root .
      p_subrc = 4.
  ENDTRY.
ENDFORM.                    " DOWNLOAD_APPLY_CONFIGURATION
*&---------------------------------------------------------------------*
*&      Form  HANDLE_DELETED_LINES
*&---------------------------------------------------------------------*
*       VIMI-16273
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM handle_deleted_lines .
  DATA: ls_appr_coa_del LIKE LINE OF gt_appr_coa_del,
*        lt_appr_coa_del TYPE TABLE OF /opt/appr_coa .      "VIMI-16813
        lt_appr_coa_del LIKE gt_appr_coa_del.               "VIMI-16813

*Begin of VIMI-17728/snittala
  DATA : lwa_ncoa     TYPE /opt/yappr_coa.
  DATA : lt_ncoa_del_rec TYPE TABLE OF /opt/yappr_coa.
  DATA : lt_ncoa_nupd TYPE TABLE OF /opt/yappr_coa.
  DATA : lv_date      TYPE sy-datum,
         lv_time      TYPE sy-uzeit,
         lv_timestamp TYPE timestamp,
         lv_utczone   TYPE tzonref-tzone,
         lv_sys_tzone TYPE tzonref-tzone.

* End of VIMI-17728/snittala

* Begin of VIMI-21919
  DATA: lt_ncoa_oupd TYPE TABLE OF /opt/yappr_coa,
        ls_ncoa_nupd TYPE /opt/yappr_coa,
        lv_cnt       TYPE i.
* End of VIMI-21919

*   ensure that entries marked for deletion are really fully specified.
  IF gt_appr_coa_del IS NOT INITIAL.
*    SELECT * FROM /opt/appr_coa INTO TABLE lt_appr_coa_del FOR ALL ENTRIES IN gt_appr_coa_del  "VIMI-16813
    SELECT * FROM /opt/appr_coa INTO CORRESPONDING FIELDS OF TABLE lt_appr_coa_del "VIMI-16813
                                FOR ALL ENTRIES IN gt_appr_coa_del "VIMI-16813
                                WHERE comp_code = gt_appr_coa_del-comp_code
                                  AND appr_level = gt_appr_coa_del-appr_level
                                  AND opt_userid = gt_appr_coa_del-opt_userid
                                  AND otype = gt_appr_coa_del-otype
                                  AND actorid = gt_appr_coa_del-actorid
                                  AND counter = gt_appr_coa_del-counter.
    IF lt_appr_coa_del IS NOT INITIAL.
*     Begin of insert VIMI-16538
      IF p_tmode IS INITIAL.
*     End of insert VIMI-16538
        DELETE /opt/appr_coa FROM TABLE lt_appr_coa_del.
*     Begin of insert VIMI-16538
      ENDIF.
*     End of insert VIMI-16538
      IF sy-subrc <> 0.
        gv_deletion_failed = 'X'.
        CLEAR gv_actually_deleted.
      ELSE.
        DESCRIBE TABLE lt_appr_coa_del LINES gv_actually_deleted.
* Begin of VIMI-17728/snittala
* Records that need to be deleted come with 'X' indicator from file.
* Change records to be handle for then
        IF NOT lt_appr_coa_del[] IS INITIAL.
          IF p_tmode IS INITIAL.
            CLEAR ls_appr_coa_del.
            LOOP AT lt_appr_coa_del INTO ls_appr_coa_del.
              MOVE-CORRESPONDING ls_appr_coa_del TO lwa_ncoa.
              APPEND lwa_ncoa TO lt_ncoa_del_rec.
            ENDLOOP.
*Change into storing time
            SELECT SINGLE tzonesys INTO lv_sys_tzone FROM ttzcu.
            CALL FUNCTION 'IB_CONVERT_INTO_TIMESTAMP'
              EXPORTING
                i_datlo     = sy-datum
                i_timlo     = sy-uzeit
                i_tzone     = lv_sys_tzone
              IMPORTING
                e_timestamp = lv_timestamp.

            CONVERT TIME STAMP lv_timestamp
                    TIME  ZONE lv_utczone
                    INTO  DATE lv_date
                          TIME lv_time.
            PERFORM write_coa_doc TABLES lt_ncoa_nupd
                                         lt_ncoa_del_rec
                                   USING 'D'
                                         lv_date
                                         lv_time.
          ENDIF.
        ENDIF.
* End of VIMI-17728/snittala
* Begin of VIMI-21919
* When records are deleted, counter need to be readjusted
        REFRESH lt_ncoa_nupd.
        CLEAR lwa_ncoa.
        SELECT * FROM  /opt/appr_coa INTO TABLE lt_ncoa_nupd
                                     FOR ALL ENTRIES IN gt_appr_coa_del
                                     WHERE comp_code = gt_appr_coa_del-comp_code
                                       AND appr_level = gt_appr_coa_del-appr_level
                                       AND opt_userid = gt_appr_coa_del-opt_userid
                                       AND otype = gt_appr_coa_del-otype
                                       AND actorid = gt_appr_coa_del-actorid.
        IF sy-subrc EQ 0.

          LOOP AT lt_ncoa_nupd INTO ls_ncoa_nupd.
            lv_cnt = lv_cnt + 1.
            IF ls_ncoa_nupd-counter EQ lv_cnt.
              CONTINUE.
            ELSE.
              MOVE-CORRESPONDING ls_ncoa_nupd TO lwa_ncoa.
              APPEND lwa_ncoa TO lt_ncoa_oupd.

              ls_ncoa_nupd-counter = lv_cnt.
              MODIFY lt_ncoa_nupd FROM ls_ncoa_nupd INDEX lv_cnt
                                                        TRANSPORTING counter.

            ENDIF.
            CLEAR:ls_ncoa_nupd,lwa_ncoa.
          ENDLOOP.

          IF lt_ncoa_oupd[] IS NOT INITIAL.
            DELETE /opt/appr_coa FROM TABLE lt_ncoa_oupd.
          ENDIF.

          IF lt_ncoa_nupd[] IS NOT INITIAL.
            MODIFY /opt/appr_coa FROM TABLE lt_ncoa_nupd.
          ENDIF.
        ENDIF.
        CLEAR: lv_cnt,lt_ncoa_nupd,lt_ncoa_oupd.
* End of VIMI-21919

      ENDIF.
    ENDIF.
    DESCRIBE TABLE gt_appr_coa_del LINES gv_marked_for_deletion.
    IF gv_marked_for_deletion <> gv_actually_deleted.
*     get delta between requested and actual deletion
* begin of VIMI-16813
      LOOP AT gt_appr_coa_del INTO ls_appr_coa_del.
        ls_appr_coa_del-mandt = sy-mandt.
        READ TABLE lt_appr_coa_del TRANSPORTING NO FIELDS
             WITH KEY comp_code = ls_appr_coa_del-comp_code
                      appr_level = ls_appr_coa_del-appr_level
                      opt_userid = ls_appr_coa_del-opt_userid
                      otype = ls_appr_coa_del-otype
                      actorid = ls_appr_coa_del-actorid
                      counter = ls_appr_coa_del-counter.
        IF sy-subrc <> 0.
          ls_appr_coa_del-msg = TEXT-045.
          APPEND ls_appr_coa_del TO gt_appr_coa_nodel.
        ENDIF.

      ENDLOOP.
*      CALL METHOD /opt/cl_c_pmc_utilities=>compare_tables
*        EXPORTING
*          it_table_new = lt_appr_coa_del
*          it_table_old = gt_appr_coa_del
*        IMPORTING
*          et_deleted   = gt_appr_coa_nodel
*        EXCEPTIONS
*          OTHERS       = 0.
* end of VIMI-16813
    ENDIF.
  ENDIF.

ENDFORM.                    " HANDLE_DELETED_LINES
*&---------------------------------------------------------------------*
*&      Form  ENRICH_DATA
*&---------------------------------------------------------------------*
*       VIMI-16327
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM enrich_data .
  DATA: lt_appr_checked LIKE gt_appr_coa,
        lt_appr_coa_db  TYPE SORTED TABLE OF /opt/appr_coa
                        WITH UNIQUE KEY comp_code
                                        appr_level
                                        opt_userid
                                        otype
                                        actorid
                                        counter.
  DATA: lv_counter        TYPE i,
        lv_counter_check  TYPE i,
        lv_duplicate      TYPE abap_bool,
        ls_appr_coa_check LIKE LINE OF gt_appr_coa,
        ls_appr_coa_dup   LIKE LINE OF gt_appr_coa_duplicate, "VIMI-16358
        lv_dup_checked    TYPE abap_bool.                      "VIMI-16547

  FIELD-SYMBOLS: <ls_appr_coa>     LIKE LINE OF gt_appr_coa,
                 <ls_appr_checked> LIKE LINE OF lt_appr_checked,
                 <ls_appr_coa_db>  LIKE LINE OF lt_appr_coa_db.

  DATA: wl_appr_coa LIKE LINE OF gt_appr_coa_protocol.  "VIMI-18588/snittala

*  SORT gt_appr_coa.                                         "VIMI-16538 VIMI-25735 - Del
* Handle Empty Counter if delivered
  READ TABLE gt_appr_coa TRANSPORTING NO FIELDS WITH KEY counter = ''.
  IF sy-subrc = 0.
    lv_dup_checked = abap_false.                            "VIMI-16547
* Start of INS VIMI-25735
    SORT gt_appr_coa BY comp_code appr_level opt_userid otype actorid.
    ls_appr_coa_check-mandt = sy-mandt.
    MODIFY gt_appr_coa FROM ls_appr_coa_check TRANSPORTING mandt WHERE mandt IS INITIAL.
    CLEAR ls_appr_coa_check.
* End of INS VIMI-25735
* get all existing entries for same key combination
    SELECT * FROM /opt/appr_coa INTO TABLE lt_appr_coa_db
                                FOR ALL ENTRIES IN gt_appr_coa
                                WHERE comp_code = gt_appr_coa-comp_code
                                  AND appr_level = gt_appr_coa-appr_level
                                  AND opt_userid = gt_appr_coa-opt_userid
                                  AND otype = gt_appr_coa-otype
                                  AND actorid = gt_appr_coa-actorid
                                    ORDER BY PRIMARY KEY.
    LOOP AT gt_appr_coa ASSIGNING <ls_appr_coa> WHERE counter IS INITIAL.
      <ls_appr_coa>-mandt = sy-mandt.
      IF p_dmode = 'X'. "only delta mode.
*     At new key combination: check for existing Database entries
        AT NEW actorid.
          lv_counter = 1.
          lv_dup_checked = abap_true.                       "VIMI-16547
          LOOP AT lt_appr_coa_db ASSIGNING <ls_appr_coa_db>
                                 WHERE comp_code = <ls_appr_coa>-comp_code
                                  AND appr_level = <ls_appr_coa>-appr_level
                                  AND opt_userid = <ls_appr_coa>-opt_userid
                                  AND otype = <ls_appr_coa>-otype
                                  AND actorid = <ls_appr_coa>-actorid.

            CLEAR ls_appr_coa_check.
            ls_appr_coa_check = <ls_appr_coa>.
            ls_appr_coa_check-counter =  <ls_appr_coa_db>-counter.
            IF <ls_appr_coa_db> = ls_appr_coa_check. "duplicate entry
              lv_duplicate = 'X'.
              EXIT.
            ELSE. "new entry:
              IF lv_counter < <ls_appr_coa_db>-counter.
                lv_counter = <ls_appr_coa_db>-counter.
              ENDIF.
            ENDIF.
          ENDLOOP.
          IF sy-subrc <> 0.
            CLEAR lv_counter.
          ENDIF.
        ENDAT.
* begin of VIMI-16547
*        IF lv_dup_checked = abap_false.                    "VIMI-25735
        IF lv_duplicate = abap_false.                      "VIMI-25735
          LOOP AT lt_appr_coa_db ASSIGNING <ls_appr_coa_db>
                                 WHERE comp_code = <ls_appr_coa>-comp_code
                                  AND appr_level = <ls_appr_coa>-appr_level
                                  AND opt_userid = <ls_appr_coa>-opt_userid
                                  AND otype = <ls_appr_coa>-otype
                                  AND actorid = <ls_appr_coa>-actorid.
            CLEAR ls_appr_coa_check.
            ls_appr_coa_check = <ls_appr_coa>.
            ls_appr_coa_check-counter =  <ls_appr_coa_db>-counter.
            IF <ls_appr_coa_db> = ls_appr_coa_check. "duplicate entry
              lv_duplicate = 'X'.
              EXIT.
            ENDIF.
          ENDLOOP.
        ENDIF.
* end of VIMI-16547
      ENDIF. "delta mode
      IF lv_duplicate = abap_true.
        IF <ls_appr_coa_db> IS ASSIGNED.
* begin of change  VIMI-16538
          MOVE-CORRESPONDING <ls_appr_coa_db> TO ls_appr_coa_dup.
          ls_appr_coa_dup-msg = 'Duplicate entry'(m46).
          APPEND ls_appr_coa_dup TO gt_appr_coa_duplicate.
*          APPEND <ls_appr_coa_db> TO gt_appr_coa_duplicate.
* ed of change VIMI-16538
        ELSE.
* begin of change  VIMI-16538
          MOVE-CORRESPONDING <ls_appr_coa> TO ls_appr_coa_dup.
          ls_appr_coa_dup-msg = 'Duplicate entry'(m46).
          APPEND ls_appr_coa_dup TO gt_appr_coa_duplicate.
*          APPEND <ls_appr_coa> TO gt_appr_coa_duplicate.
* ed of change VIMI-16538
        ENDIF.
        DELETE TABLE gt_appr_coa FROM <ls_appr_coa>.
        CLEAR lv_duplicate.
        CONTINUE.
      ENDIF.
* Start of DEL VIMI-25735
** Begin of VIMI-19181
*      AT NEW opt_userid.
*        CLEAR lv_counter.
*      ENDAT.
** End of VIMI-19181
* End of DEL VIMI-25735
*     set counter
      ADD 1 TO lv_counter.
* Begin of VIMI-18588/snittala
      IF lv_counter > 99999.
        MOVE-CORRESPONDING <ls_appr_coa> TO wl_appr_coa.
        wl_appr_coa-msg = 'Max counter limit exceeded.Record ignored.'(046).
        APPEND wl_appr_coa TO gt_appr_coa_val_error.
        CLEAR wl_appr_coa.
        DELETE TABLE gt_appr_coa FROM <ls_appr_coa>.
      ELSE.
* End of VIMI-18588/snittala
        <ls_appr_coa>-counter = lv_counter.
      ENDIF.           "VIMI-18588/snittala
* Start of INS VIMI-25735
      AT END OF opt_userid.
        CLEAR lv_counter.
      ENDAT.
* End of INS VIMI-25735
    ENDLOOP.
  ENDIF.

ENDFORM.                    " ENRICH_DATA
*&---------------------------------------------------------------------*
*&      Form  display_protocol
*&---------------------------------------------------------------------*
*       VIMI-16538
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM display_protocol USING pit_appr_coa_protocol LIKE gt_appr_coa_protocol
                            piv_key TYPE inum.

  DATA: ls_appr_coa_protocol LIKE LINE OF gt_appr_coa_protocol.
  DATA: lt_textpool LIKE textpool OCCURS 0 WITH HEADER LINE.
  DATA: ls_textpool TYPE textpool.
*  DATA: lv_pos TYPE i.
*  DATA: lv_endpos TYPE i.
*  DATA: lv_len TYPE i.
*  DATA: lv_value TYPE char256.
  DATA: lv_title TYPE textpooltx.
*  DATA: ref_struct_descr TYPE REF TO cl_abap_structdescr.
*  DATA: ref_table_descr TYPE REF TO cl_abap_tabledescr.
*  DATA: ls_coa_upload LIKE LINE OF gt_coa_upload.
*  DATA: lo_structdescr TYPE REF TO cl_abap_structdescr.
*  DATA: lo_typedescr TYPE REF TO cl_abap_typedescr.
*  DATA: lt_ddic_object TYPE dd_x031l_table.
*  DATA: lt_components TYPE cl_abap_structdescr=>component_table.
*  DATA: lt_sub_components TYPE cl_abap_structdescr=>component_table.
*  DATA: ls_ddic_object TYPE x031l.
*  DATA: ls_components LIKE LINE OF lt_components.

  TYPES: BEGIN OF output,
           pos    TYPE i,
           len    TYPE i,
           type   TYPE abap_typekind,
           name   TYPE abap_compname,
           textid TYPE inum,
           text   TYPE char256,
         END OF output.

  DATA: lt_output TYPE TABLE OF output.
  DATA: ls_output LIKE LINE OF lt_output.

  FIELD-SYMBOLS: <output> LIKE LINE OF lt_output.
  FIELD-SYMBOLS: <appr_coa_protocol> LIKE LINE OF gt_appr_coa_protocol.
  FIELD-SYMBOLS: <value> TYPE any.



  READ TEXTPOOL sy-repid INTO lt_textpool LANGUAGE sy-langu.
  DELETE lt_textpool
    WHERE
      id <> 'I'.
  READ TABLE lt_textpool
    WITH KEY key = piv_key
    INTO ls_textpool.
  lv_title = ls_textpool-entry.


*    IF p_fprot IS INITIAL.
*     Only show key fields
  NEW-LINE.
  SKIP 1.
  WRITE:/5 sy-uline(145).
  WRITE:/5 sy-vline.
  WRITE: 10(138) lv_title COLOR COL_HEADING, sy-vline.
  WRITE:/5 sy-uline(145).
  WRITE:
    5 sy-vline,
    /10(8) 'CompCode'(030),
    20(5) 'Level'(031),
    27(35) 'OpenText User-ID'(032),
    66(4) 'Type'(033),
    72(12) 'Actor'(034),
    86(10) 'Counter'(035),
    98(50) 'Message'(044),
    sy-vline,
    5 sy-vline.

  WRITE /5 sy-uline(145).
  LOOP AT pit_appr_coa_protocol INTO ls_appr_coa_protocol.
    WRITE:
      5 sy-vline,
      /10(4) ls_appr_coa_protocol-comp_code,
      20(3) ls_appr_coa_protocol-appr_level,
      27(35) ls_appr_coa_protocol-opt_userid,
      66(2) ls_appr_coa_protocol-otype,
      72(12) ls_appr_coa_protocol-actorid,
      86(10) ls_appr_coa_protocol-counter,
      98(50) ls_appr_coa_protocol-msg,
      149     sy-vline,
      5 sy-vline.

  ENDLOOP.
  WRITE: /5 sy-uline(145).


*    ELSE.
**     Show all fields specified in table /opt/coa_uplcfg
**     Get components of input structure
*      IF gt_coa_upload IS INITIAL.
*        PERFORM read_config.
*      ENDIF.
*      TRY.
*        ref_table_descr ?= cl_abap_typedescr=>describe_by_data( pit_appr_coa_protocol ).
*        ref_struct_descr ?= ref_table_descr->get_table_line_type( ).
*        lt_components = ref_struct_descr->get_components( ).
*        LOOP AT lt_components INTO ls_components WHERE as_include = abap_true.
*          lo_structdescr ?= ls_components-type.
*          lt_sub_components = lo_structdescr->get_components( ) .
*          APPEND LINES OF lt_sub_components TO lt_components.
*        ENDLOOP.
*      ENDTRY.
*
**     Get component output length and define output
*      LOOP AT lt_components INTO ls_components WHERE as_include = abap_false.
*        CLEAR ls_coa_upload.
*        READ TABLE gt_coa_upload
*          WITH KEY tab = 'COA'
*                   fields = ls_components-name
*          INTO ls_coa_upload.
*        CLEAR ls_output.
*        IF NOT ls_coa_upload IS INITIAL.
*          lo_typedescr ?= ls_components-type.
*          lt_ddic_object = lo_typedescr->get_ddic_object( ).
*          CLEAR ls_ddic_object.
*          READ TABLE lt_ddic_object INDEX 1 INTO ls_ddic_object.
*          IF lt_output IS INITIAL.
*            lv_pos = 10.
*            ls_output-pos = lv_pos.
*          ELSE.
*            ls_output-pos = lv_pos + 2.
*          ENDIF.
*          ls_output-len = ls_ddic_object-exlength.
*          IF ls_output-len < 10.
*            ls_output-len = 10.
*          ENDIF.
*          ls_output-type = ls_ddic_object-exid.
*          ls_output-name = ls_components-name.
*          APPEND ls_output TO lt_output.
*          lv_pos = lv_pos + ls_output-len.
*        ENDIF.
*      ENDLOOP.
*
*      READ TABLE gt_coa_upload
*        WITH KEY tab = 'COA'
*                 fields = 'MSG'
*        TRANSPORTING NO FIELDS.
*
*      IF sy-subrc <> 0.
*        READ TABLE lt_components
*          WITH KEY name = 'MSG'
*          INTO ls_components.
*
*        IF NOT ls_components IS INITIAL.
*          lo_typedescr ?= ls_components-type.
*          lt_ddic_object = lo_typedescr->get_ddic_object( ).
*          CLEAR ls_ddic_object.
*          READ TABLE lt_ddic_object INDEX 1 INTO ls_ddic_object.
*          IF lt_output IS INITIAL.
*            lv_pos = 10.
*            ls_output-pos = lv_pos.
*          ELSE.
*            ls_output-pos = lv_pos + 2.
*          ENDIF.
*          ls_output-len = ls_ddic_object-exlength.
*          IF ls_output-len < 10.
*            ls_output-len = 10.
*          ENDIF.
*          ls_output-type = ls_ddic_object-exid.
*          ls_output-name = ls_components-name.
*          APPEND ls_output TO lt_output.
*          lv_pos = lv_pos + ls_output-len.
*        ENDIF.
*      ENDIF.
*
**     Get text symbols and texts.
*      LOOP AT lt_output ASSIGNING <output>.
*        CASE <output>-name.
*          WHEN 'COMP_CODE'.
*            <output>-textid = '101'.
*          WHEN 'APPR_LEVEL'.
*            <output>-textid = '102'.
*          WHEN 'OPT_USERID'.
*            <output>-textid = '103'.
*          WHEN 'OTYPE'.
*            <output>-textid = '104'.
*          WHEN 'ACTORID'.
*            <output>-textid = '105'.
*          WHEN 'COUNTER'.
*            <output>-textid = '106'.
*          WHEN 'EXPENSE_TYPE'.
*            <output>-textid = '107'.
*          WHEN 'EXPENSE_TYPE2'.
*            <output>-textid = '108'.
*          WHEN 'BUKRS'.
*            <output>-textid = '109'.
*          WHEN 'BUKRS2'.
*            <output>-textid = '110'.
*          WHEN 'KOSTL'.
*            <output>-textid = '111'.
*          WHEN 'KOSTL2'.
*            <output>-textid = '112'.
*          WHEN 'WBS_ELEMENT'.
*            <output>-textid = '113'.
*          WHEN 'WBS_ELEMENT2'.
*            <output>-textid = '114'.
*          WHEN 'INTERNAL_ORDER'.
*            <output>-textid = '115'.
*          WHEN 'INTERNAL_ORDER2'.
*            <output>-textid = '116'.
*          WHEN 'GL_ACCT'.
*            <output>-textid = '117'.
*          WHEN 'GL_ACCT2'.
*            <output>-textid = '118'.
*          WHEN 'ACTIVITY_TYPE'.
*            <output>-textid = '119'.
*          WHEN 'ACTIVITY_TYPE2'.
*            <output>-textid = '120'.
*          WHEN 'NETWORK_NO'.
*            <output>-textid = '121'.
*          WHEN 'NETWORK_NO2'.
*            <output>-textid = '122'.
*          WHEN 'PROFIT_CENTER'.
*            <output>-textid = '123'.
*          WHEN 'PROFIT_CENTER2'.
*            <output>-textid = '124'.
*          WHEN 'REAL_ESTATE_CON'.
*            <output>-textid = '125'.
*          WHEN 'REAL_ESTATE_CON2'.
*            <output>-textid = '126'.
*          WHEN 'PLANT'.
*            <output>-textid = '127'.
*          WHEN 'PLANT2'.
*            <output>-textid = '128'.
*          WHEN 'ASSIGNMENT'.
*            <output>-textid = '129'.
*          WHEN 'ASSIGNMENT2'.
*            <output>-textid = '130'.
*          WHEN 'EARMARKED_FUND'.
*            <output>-textid = '131'.
*          WHEN 'EARMARKED_FUND2'.
*            <output>-textid = '132'.
*          WHEN 'COST_OBJECT'.
*            <output>-textid = '133'.
*          WHEN 'COST_OBJECT2'.
*            <output>-textid = '134'.
*          WHEN 'FUND_CENTER'.
*            <output>-textid = '135'.
*          WHEN 'FUND_CENTER2'.
*            <output>-textid = '136'.
*          WHEN 'BUSINESS_AREA'.
*            <output>-textid = '137'.
*          WHEN 'BUSINESS_AREA2'.
*            <output>-textid = '138'.
*          WHEN 'PARTNER_AREA'.
*            <output>-textid = '139'.
*          WHEN 'MSG'.
*            <output>-textid = '140'.
*          WHEN OTHERS.
*        ENDCASE.
*        IF <output>-textid IS NOT INITIAL.
*          CLEAR ls_textpool.
*          READ TABLE lt_textpool
*            WITH KEY key = <output>-textid
*            INTO ls_textpool.
*          <output>-text = ls_textpool-entry.
*        ENDIF.
*      ENDLOOP.
*
**     Write output
*      lv_len = lv_pos - 9.
*      lv_endpos = lv_pos + 3.
*      lv_pos = lv_pos - 1.
*      NEW-LINE.
*      SKIP 1.
*      WRITE /5 sy-uline(lv_pos).
*      WRITE /10(lv_len) lv_title COLOR COL_HEADING.
*      WRITE /5 sy-uline(lv_pos).
*      LOOP AT lt_output INTO ls_output.
*        IF sy-tabix = 1.
*          WRITE /ls_output-pos(ls_output-len) ls_output-text.
*        ELSE.
*          WRITE AT ls_output-pos(ls_output-len) ls_output-text.
*        ENDIF.
*      ENDLOOP.
*
*      LOOP AT pit_appr_coa_protocol INTO ls_appr_coa_protocol.
*        ASSIGN ls_appr_coa_protocol TO <appr_coa_protocol>.
*        WRITE /5 sy-uline(lv_pos).
*        LOOP AT lt_output INTO ls_output.
*          ASSIGN COMPONENT ls_output-name OF STRUCTURE <appr_coa_protocol> TO <value>.
*          MOVE <value> TO lv_value.
*          IF sy-tabix = 1.
*            WRITE /ls_output-pos(ls_output-len) lv_value.
*          ELSE.
*            WRITE AT ls_output-pos(ls_output-len) lv_value.
*          ENDIF.
*        ENDLOOP.
*      ENDLOOP.
*      WRITE: /5 sy-uline(lv_pos).
*    ENDIF.


ENDFORM.                    " display_protocol
*&---------------------------------------------------------------------*
*&      Form  CHECK_PATH
*&---------------------------------------------------------------------*
*       added VIMI-18205: SAP PQ requirement: restricted filenames
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM check_path .
*** Start of changes @001

  DATA : lv_al_path TYPE string.

  lv_al_path  = '/usr/sap/tst'.
  CALL FUNCTION '/SAPDMC/LSM_F4_SERVER_FILE'
    EXPORTING
      directory        = lv_al_path
*     FILEMASK         = ' '
    IMPORTING
      serverfile       = p_path
    EXCEPTIONS
      canceled_by_user = 1
      OTHERS           = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

*  DATA: BEGIN OF l_file,
*          fileintern TYPE filename-fileintern,
*          filename   TYPE filename_d,
*        END OF l_file,
*        lt_file  LIKE TABLE OF l_file,
*        lt_value TYPE TABLE OF ddshretval,
*        ls_value LIKE LINE OF lt_value.
*
*  SELECT fileintern filename FROM filetextci INTO TABLE lt_file WHERE  langu = sy-langu AND
*                                                     fileintern LIKE cv_allowed_filename.
*  IF sy-subrc <> 0.
*    SELECT fileintern filename FROM filetextci INTO TABLE lt_file WHERE  langu = 'EN' AND
*                                                       fileintern LIKE cv_allowed_filename.
*    IF sy-subrc <> 0.
*      SELECT fileintern filename FROM filetextci INTO TABLE lt_file WHERE fileintern LIKE cv_allowed_filename.
*    ENDIF.
*  ENDIF.
*  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
*    EXPORTING
*      retfield        = 'FILEINTERN'
*      value_org       = 'S'
*    TABLES
*      value_tab       = lt_file
*      return_tab      = lt_value
*    EXCEPTIONS
*      parameter_error = 1
*      no_values_found = 2
*      OTHERS          = 3.
*
*  READ TABLE lt_value INDEX 1 INTO ls_value.
*  p_path = ls_value-fieldval.
*** End of changes @001
ENDFORM.                    " CHECK_PATH


*******************************************************************************************************************

  
  
