METHOD /otx/pf03_if_action~execute_action.

  DATA: l_refresh             TYPE /otx/pf03_e_require_refresh,
        ls_msg                TYPE symsg,
        lt_return             TYPE  bapirettab,
        ls_display_attributes TYPE /otx/pf32_s_bpf_display,
        lt_display_attributes TYPE TABLE OF /otx/pf32_s_bpf_display,
        lt_actions            TYPE /otx/pf03_tt_actn_message,
        lv_lines              TYPE i,
        lv_sent               TYPE flag,
        lv_status             TYPE /otx/pf01_e_status.
  DATA lh_badi_handler TYPE REF TO /otx/pf32_cl_badi_hdl_wobj_act.
  DATA lt_after_return TYPE bapirettab.
  DATA lv_action_success TYPE boole_d.
  DATA lv_exit TYPE boole_d.

  FIELD-SYMBOLS: <fs_return> TYPE bapiret2,
                 <fs_action> TYPE /otx/pf03_s_actn_message.
*
  pe_execute_refresh = abap_false.
  lv_action_success = abap_true.

*--- Check entries are from same system
  CLEAR lv_lines.
  lt_actions[] = pct_actions.
  SORT lt_actions BY wobj_logsys.
  DELETE ADJACENT DUPLICATES FROM lt_actions COMPARING wobj_logsys.
  DESCRIBE TABLE lt_actions LINES lv_lines.
  IF lv_lines GT 1.
    RAISE EXCEPTION TYPE /otx/cx_pf03_exception
      EXPORTING
        pf00_msgty = 'E'
        pf00_msgid = '/OTX/PF32_MSG'
        pf00_msgno = '006'.
  ENDIF.
  
  
  *******************************************************************************************************************
  
  
  FUNCTION zvim_pf32_idf_email .
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     VALUE(PI_REGID) TYPE  /OTX/PF01_E_REGID
*"  EXPORTING
*"     VALUE(PET_RETURN) TYPE  BAPIRETTAB
*"     VALUE(PE_SENT) TYPE  FLAG
*"----------------------------------------------------------------------

  DATA: lt_image        TYPE /otx/pf01_tt_1img,
        lt_email_config TYPE TABLE OF ty_email_config,
        ls_return2      TYPE bapiret2,
        lv_flag         TYPE flag.


** get the Inbound email config:
  SELECT ar_object,
         ar_object_body,
         ar_object_att
    FROM /otx/pf01_t_smai
    INTO TABLE @lt_email_config.

** get the image data:
  SELECT *
    FROM /otx/pf01_t_1img
    INTO TABLE @lt_image
    WHERE regid = @pi_regid.

  "" get the data from REG table:
  SELECT SINGLE * FROM /otx/pf01_t_1reg INTO @DATA(ls_reg)
    WHERE regid = @pi_regid.

  IF sy-subrc IS INITIAL AND ls_reg-mail IS NOT INITIAL.

    DATA(lv_mail1) = ls_reg-mail.

    TRANSLATE lv_mail1 TO UPPER CASE.

    "" Get the AP emails:
    SELECT SINGLE * FROM zptp_apemail INTO @DATA(ls_apemail)
      WHERE email = @lv_mail1.

    IF sy-subrc IS NOT INITIAL.

      TRANSLATE lv_mail1 TO LOWER CASE.

      SELECT SINGLE * FROM zptp_apemail INTO @ls_apemail
        WHERE email = @lv_mail1.

    ENDIF.
  ENDIF.

  IF ls_reg-mail_s IS NOT INITIAL.

    "" Send email back to sender:
    PERFORM send_email TABLES   lt_image
                                lt_email_config
                       USING    ls_reg
                                ls_apemail
                       CHANGING lv_flag.
  ENDIF.

  IF lv_flag = abap_true.

    pe_sent = abap_true.

    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = 'S'
        cl     = '/OTX/PF32_MSG'
        number = 009
      IMPORTING
        return = ls_return2.
    APPEND ls_return2 TO pet_return.
  ENDIF.

ENDFUNCTION.

FORM send_email  TABLES lt_image TYPE /otx/pf01_tt_1img
                        lt_email_config TYPE ty_email_config_tt
                 USING ls_reg TYPE /otx/pf01_t_1reg
                       ls_apemail TYPE zptp_apemail
                 CHANGING lv_flag TYPE flag.


  DATA:
    lt_text            TYPE bcsy_text,
    lt_line            TYPE TABLE OF tline,
    lt_mail_sent       TYPE TABLE OF zvim_vend_mail,
    lv_mail            TYPE ad_smtpadr,
    lv_addr            TYPE adr6-smtp_addr,
    ls_mail_sent       TYPE zvim_vend_mail,
    ls_text            LIKE LINE OF lt_text,
    ls_key             TYPE salv_s_layout_key,
    lv_content         TYPE /otx/pf01_e_content,
    lv_attchmnt_subjct TYPE so_obj_des,
    lv_attachment_type TYPE so_obj_tp,
    lv_length          TYPE i,
    lv_vim_email       TYPE /otx/pf01_e_mail,
    lv_send_to         TYPE /otx/pf01_e_mail_s,
    lv_send_cc         TYPE zptp_email,
    lv_mime            TYPE c,
    lv_size            TYPE so_obj_len,
    lt_bindata         TYPE solix_tab,
    lv_sent_to_all     TYPE os_boolean,
    lv_subject         TYPE so_obj_des,
    lv_concat1         TYPE string,
    lo_send_request    TYPE REF TO cl_bcs,
    lo_document        TYPE REF TO cl_document_bcs,
    lo_recipient       TYPE REF TO if_recipient_bcs,
    lo_bcs_exception   TYPE REF TO cx_bcs,
    lo_table           TYPE REF TO cl_salv_table,
    lo_functions       TYPE REF TO cl_salv_functions,
    lo_display         TYPE REF TO cl_salv_display_settings,
    lo_columns         TYPE REF TO cl_salv_columns_table,
    lo_column          TYPE REF TO cl_salv_column_table,
    lo_layout          TYPE REF TO cl_salv_layout.


  lv_vim_email   = ls_reg-mail.
  lv_send_to     = ls_reg-mail_s.
  lv_send_cc     = ls_apemail-payment_email.



  TRY.
** create persistent send request
      lo_send_request = cl_bcs=>create_persistent( ).


** read the SO10 text and creating email body text:
      CALL FUNCTION 'READ_TEXT'
        EXPORTING
          id                      = 'ST'
          language                = 'E'
          name                    = 'ZVIM_INB_EMAIL'
          object                  = 'TEXT'
        TABLES
          lines                   = lt_line
        EXCEPTIONS
          id                      = 1
          language                = 2
          name                    = 3
          not_found               = 4
          object                  = 5
          reference_check         = 6
          wrong_access_to_archive = 7
          OTHERS                  = 8.

      LOOP AT lt_line INTO DATA(ls_line).
        ls_text-line = ls_line-tdline.
        APPEND ls_text TO lt_text.
      ENDLOOP.

** creating subject for email:

      DATA(lv_reg)   = ls_reg-regid.
      DATA(lv_docid) = ls_reg-target_projkey.

      SHIFT : lv_reg LEFT DELETING LEADING '0',
              lv_docid LEFT DELETING LEADING '0'.

      lv_subject = 'Alnylam Inv Recpt Error: DP ID:' && lv_docid.

** adding subject and body text for email:
      lo_document = cl_document_bcs=>create_document(
        i_type    = 'RAW'
        i_text    = lt_text
        i_subject = lv_subject ).


      LOOP AT lt_image ASSIGNING FIELD-SYMBOL(<fs_att>) WHERE regid = ls_reg-regid.

        lv_content = <fs_att>-content.
        CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
          EXPORTING
            buffer        = lv_content
          IMPORTING
            output_length = lv_length
          TABLES
            binary_tab    = lt_bindata.

        lv_size = lv_length.
        IF lt_bindata IS NOT INITIAL.

** reading the inbound email config with the archive object of REGID attachment and updating attachment filename :
          READ TABLE lt_email_config INTO DATA(ls_email_config)
          WITH KEY ar_object = <fs_att>-ar_object.
          IF sy-subrc IS INITIAL.
            lv_attchmnt_subjct = 'Invoice'.
          ENDIF.

          READ TABLE lt_email_config INTO ls_email_config
          WITH KEY ar_object_body = <fs_att>-ar_object.
          IF sy-subrc IS INITIAL.
            lv_attchmnt_subjct = 'Orig. Email'.
          ENDIF.

          READ TABLE lt_email_config INTO ls_email_config
          WITH KEY ar_object_att = <fs_att>-ar_object.
          IF sy-subrc IS INITIAL.
            lv_attchmnt_subjct = 'Supporting Doc.'.
          ENDIF.

** attachment doctype (PDF, EXCEL etc.):
          lv_attachment_type = <fs_att>-doc_type.

          lo_document->add_attachment(
            i_attachment_type    = lv_attachment_type
            i_attachment_subject = lv_attchmnt_subjct
            i_attachment_size    = lv_size
            i_att_content_hex    = lt_bindata ).

        ENDIF.
        REFRESH : lt_bindata[].

      ENDLOOP.




**add document object to send request
      lo_send_request->set_document( lo_document ).

** add recipient (e-mail address) -----------------------
      lv_mail = lv_send_to.
      lo_recipient = cl_cam_address_bcs=>create_internet_address( lv_mail ).

      CALL METHOD lo_send_request->add_recipient
        EXPORTING
          i_recipient = lo_recipient
          i_express   = 'X'.

** add CC recipient:
      IF lv_send_cc IS NOT INITIAL.

        lv_addr = lv_send_cc.
        lo_recipient = cl_cam_address_bcs=>create_internet_address( lv_addr ).
        CALL METHOD lo_send_request->add_recipient
          EXPORTING
            i_recipient = lo_recipient
            i_copy      = 'X'
            i_express   = 'X'.
      ENDIF.

      lo_send_request->set_send_immediately( 'X' ).

** triggering email to vendor:
      lv_sent_to_all = lo_send_request->send( i_with_error_screen = 'X' ).

      COMMIT WORK.

      lv_flag = abap_true.


*   ------------ exception handling ----------------------------------
    CATCH cx_bcs INTO lo_bcs_exception.

  ENDTRY.


ENDFORM.

*--- Check entries have same handler
  LOOP AT pct_actions ASSIGNING <fs_action>.
    FREE: ls_display_attributes.
    <fs_action>-object->/otx/pf03_if_wobj~get_display_attributes( IMPORTING pes_display_attributes = ls_display_attributes ).
    APPEND ls_display_attributes TO lt_display_attributes.
  ENDLOOP.
  CLEAR lv_lines.
  SORT lt_display_attributes BY handle_id.
  DELETE ADJACENT DUPLICATES FROM lt_display_attributes COMPARING handle_id.
  DESCRIBE TABLE lt_display_attributes LINES lv_lines.
  IF lv_lines GT 1.
    RAISE EXCEPTION TYPE /otx/cx_pf03_exception
      EXPORTING
        pf00_msgty = 'E'
        pf00_msgid = '/OTX/PF32_MSG'
        pf00_msgno = '007'.
  ENDIF.

  LOOP AT pct_actions ASSIGNING <fs_action>.

    FREE: ls_display_attributes,
          lt_return.

    <fs_action>-object->/otx/pf03_if_wobj~get_display_attributes( IMPORTING pes_display_attributes = ls_display_attributes ).

*-- Check handler status
    IF ls_display_attributes-handle_status = 'F'.
      CLEAR ls_msg.
      ls_msg-msgty = 'E'.
      ls_msg-msgid = '/OTX/PF32_MSG'.
      ls_msg-msgno = 002.
      ls_msg-msgv1 = ls_display_attributes-status.
      APPEND ls_msg TO <fs_action>-messages.
      CONTINUE.                                             "BOB-2199
    ENDIF.

*-- Change status
    IF ls_display_attributes-regid IS INITIAL
      OR ls_display_attributes-handle_id IS INITIAL.
      CLEAR ls_msg.
      ls_msg-msgty = 'E'.
      ls_msg-msgid = '/OTX/PF32_MSG'.
      ls_msg-msgno = 003.
      APPEND ls_msg TO <fs_action>-messages.
*   Relevant data not available to process action
      CONTINUE.                                             "BOB-2199
    ENDIF.
****************

    CALL FUNCTION 'ZVIM_PF32_IDF_EMAIL'
      EXPORTING
        pi_regid   = ls_display_attributes-regid
      IMPORTING
        pet_return = lt_return
        pe_sent    = lv_sent.

    IF sy-subrc <> 0.
      ls_msg-msgty = 'E'.
      ls_msg-msgid = '/OTX/PF00_M_001'.
      ls_msg-msgno = 012.
      ls_msg-msgv1 = <fs_action>-object->/otx/pf03_if_wobj~ms_logsys-rfc_dest_usr.
      APPEND ls_msg TO <fs_action>-messages.
      lv_exit = abap_true.
      CLEAR lv_action_success.
    ENDIF.
*   Exit processing if no reason is selected
    READ TABLE lt_return TRANSPORTING NO FIELDS
     WITH KEY type = 'E'.
    IF sy-subrc NE 0 AND lv_sent IS INITIAL.
      lv_exit = abap_true.
      CLEAR lv_action_success.
    ELSEIF sy-subrc EQ 0 AND lv_sent IS INITIAL.
      CLEAR lv_action_success.
    ENDIF.

****************
    LOOP AT lt_return ASSIGNING <fs_return>.
      CLEAR ls_msg.
      ls_msg-msgty = <fs_return>-type.
      ls_msg-msgid = <fs_return>-id.
      ls_msg-msgno = <fs_return>-number.
      ls_msg-msgv1 = <fs_return>-message_v1.
      ls_msg-msgv2 = <fs_return>-message_v2.
      ls_msg-msgv3 = <fs_return>-message_v3.
      ls_msg-msgv4 = <fs_return>-message_v4.
      APPEND ls_msg TO <fs_action>-messages.
    ENDLOOP.

    IF lv_exit EQ abap_true.
      EXIT.
    ENDIF.

    READ TABLE <fs_action>-messages TRANSPORTING NO FIELDS
     WITH KEY msgty = 'E'.
    IF sy-subrc NE 0.
*--- Refresh
      pe_execute_refresh = abap_true.
    ENDIF.


  ENDLOOP.

ENDMETHOD.
